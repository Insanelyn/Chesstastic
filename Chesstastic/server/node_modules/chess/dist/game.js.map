{"version":3,"sources":["game.js"],"names":["addToHistory","game","ev","hashCode","getHashCode","move","Move","prevSquare","postSquare","capturedPiece","algebraic","moveHistory","push","denotePromotionInHistory","latest","length","promotion","Game","board","White","Black","i","sum","createHash","squares","piece","update","file","rank","side","notation","digest","create","on","getSquare","prevFile","prevRank","postFile","postRank","originSquare","targetSquare","hash"],"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","file":"game.js","sourcesContent":["/**\n\tGames contain the history of a board and the board itself.\n\n\tAt time of writing this, the game is also intended to store some\n\tdegree of information regarding the opponents and keys that\n\tcould be used for storage, etc.\n*/\n\nimport { Board } from './board';\nimport { EventEmitter } from 'events';\nimport { SideType } from './piece';\nimport crypto from 'crypto';\n\nfunction addToHistory (game) {\n\treturn function (ev) {\n\t\tlet\n\t\t\thashCode = game.getHashCode(),\n\t\t\tmove = new Move(\n\t\t\t\tev.prevSquare,\n\t\t\t\tev.postSquare,\n\t\t\t\tev.capturedPiece,\n\t\t\t\tev.algebraic,\n\t\t\t\thashCode);\n\n\t\tgame.moveHistory.push(move);\n\t};\n}\n\nfunction denotePromotionInHistory (game) {\n\treturn function () {\n\t\tlet\n\t\t\tlatest = game.moveHistory[\n\t\t\tgame.moveHistory.length - 1];\n\n\t\tif (latest) {\n\t\t\tlatest.promotion = true;\n\t\t}\n\t};\n}\n\nexport class Game extends EventEmitter {\n\tconstructor (board) {\n\t\tsuper();\n\n\t\tthis.board = board;\n\t\tthis.moveHistory = [];\n\t}\n\n\tstatic create () {\n\t\tlet\n\t\t\tboard = Board.create(),\n\t\t\tgame = new Game(board);\n\n\t\t// handle move and promotion events correctly\n\t\tboard.on('move', addToHistory(game));\n\t\tboard.on('promote', denotePromotionInHistory(game));\n\n\t\treturn game;\n\t}\n\n\tgetCurrentSide () {\n\t\treturn this.moveHistory.length % 2 === 0 ?\n\t\t\tSideType.White :\n\t\t\tSideType.Black;\n\t}\n\n\tgetHashCode () {\n\t\tlet\n\t\t\ti = 0,\n\t\t\tsum = crypto.createHash('md5');\n\n\t\tfor (i = 0; i < this.board.squares.length; i++) {\n\t\t\tif (this.board.squares[i].piece !== null) {\n\t\t\t\tsum.update(this.board.squares[i].file +\n\t\t\t\t\tthis.board.squares[i].rank +\n\t\t\t\t\t(this.board.squares[i].piece.side === SideType.White ? 'w' : 'b') +\n\t\t\t\t\tthis.board.squares[i].piece.notation +\n\t\t\t\t\t(i < (this.board.squares.length - 1) ? '-' : ''));\n\t\t\t}\n\t\t}\n\n\t\t// generate hash code for board\n\t\treturn sum.digest('base64');\n\t}\n\n\tstatic load (moveHistory) {\n\t\tlet\n\t\t\tboard = Board.create(),\n\t\t\tgame = new Game(),\n\t\t\ti = 0;\n\n\t\t// handle move and promotion events correctly\n\t\tboard.on('move', addToHistory(game));\n\t\tboard.on('promote', denotePromotionInHistory(game));\n\n\t\t// apply move history\n\t\tfor (i = 0; i < moveHistory.length; i++) {\n\t\t\tboard.move(\n\t\t\t\tboard.getSquare(\n\t\t\t\t\tmoveHistory[i].prevFile,\n\t\t\t\t\tmoveHistory[i].prevRank),\n\t\t\t\tboard.getSquare(\n\t\t\t\t\tmoveHistory[i].postFile,\n\t\t\t\t\tmoveHistory[i].postRank));\n\t\t}\n\n\t\treturn game;\n\t}\n}\n\nexport class Move {\n\tconstructor (originSquare, targetSquare, capturedPiece, notation, hash) {\n\t\tthis.algebraic = notation;\n\t\tthis.capturedPiece = capturedPiece;\n\t\tthis.hashCode = hash;\n\t\tthis.piece = targetSquare.piece;\n\t\tthis.promotion = false;\n\t\tthis.postFile = targetSquare.file;\n\t\tthis.postRank = targetSquare.rank;\n\t\tthis.prevFile = originSquare.file;\n\t\tthis.prevRank = originSquare.rank;\n\t}\n}\n\nexport default { Game, Move };\n"]}