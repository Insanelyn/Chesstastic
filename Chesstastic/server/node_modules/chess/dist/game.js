'use strict';

var cov_240na0baid = function () {
	var path = '/Volumes/Data/Projects/brozeph/node-chess/src/game.js',
	    hash = '75e2bb9da6cccc00e3e444dcf5d84344566ef80f',
	    Function = function () {}.constructor,
	    global = new Function('return this')(),
	    gcv = '__coverage__',
	    coverageData = {
		path: '/Volumes/Data/Projects/brozeph/node-chess/src/game.js',
		statementMap: {
			'0': {
				start: {
					line: 15,
					column: 1
				},
				end: {
					line: 26,
					column: 3
				}
			},
			'1': {
				start: {
					line: 17,
					column: 14
				},
				end: {
					line: 17,
					column: 32
				}
			},
			'2': {
				start: {
					line: 18,
					column: 10
				},
				end: {
					line: 23,
					column: 13
				}
			},
			'3': {
				start: {
					line: 25,
					column: 2
				},
				end: {
					line: 25,
					column: 30
				}
			},
			'4': {
				start: {
					line: 30,
					column: 1
				},
				end: {
					line: 38,
					column: 3
				}
			},
			'5': {
				start: {
					line: 32,
					column: 12
				},
				end: {
					line: 33,
					column: 31
				}
			},
			'6': {
				start: {
					line: 35,
					column: 2
				},
				end: {
					line: 37,
					column: 3
				}
			},
			'7': {
				start: {
					line: 36,
					column: 3
				},
				end: {
					line: 36,
					column: 27
				}
			},
			'8': {
				start: {
					line: 43,
					column: 2
				},
				end: {
					line: 43,
					column: 10
				}
			},
			'9': {
				start: {
					line: 45,
					column: 2
				},
				end: {
					line: 45,
					column: 21
				}
			},
			'10': {
				start: {
					line: 46,
					column: 2
				},
				end: {
					line: 46,
					column: 24
				}
			},
			'11': {
				start: {
					line: 51,
					column: 11
				},
				end: {
					line: 51,
					column: 25
				}
			},
			'12': {
				start: {
					line: 52,
					column: 10
				},
				end: {
					line: 52,
					column: 25
				}
			},
			'13': {
				start: {
					line: 55,
					column: 2
				},
				end: {
					line: 55,
					column: 39
				}
			},
			'14': {
				start: {
					line: 56,
					column: 2
				},
				end: {
					line: 56,
					column: 54
				}
			},
			'15': {
				start: {
					line: 58,
					column: 2
				},
				end: {
					line: 58,
					column: 14
				}
			},
			'16': {
				start: {
					line: 62,
					column: 2
				},
				end: {
					line: 64,
					column: 18
				}
			},
			'17': {
				start: {
					line: 69,
					column: 7
				},
				end: {
					line: 69,
					column: 8
				}
			},
			'18': {
				start: {
					line: 70,
					column: 9
				},
				end: {
					line: 70,
					column: 33
				}
			},
			'19': {
				start: {
					line: 72,
					column: 2
				},
				end: {
					line: 80,
					column: 3
				}
			},
			'20': {
				start: {
					line: 73,
					column: 3
				},
				end: {
					line: 79,
					column: 4
				}
			},
			'21': {
				start: {
					line: 74,
					column: 4
				},
				end: {
					line: 78,
					column: 55
				}
			},
			'22': {
				start: {
					line: 83,
					column: 2
				},
				end: {
					line: 83,
					column: 30
				}
			},
			'23': {
				start: {
					line: 88,
					column: 11
				},
				end: {
					line: 88,
					column: 25
				}
			},
			'24': {
				start: {
					line: 89,
					column: 10
				},
				end: {
					line: 89,
					column: 20
				}
			},
			'25': {
				start: {
					line: 90,
					column: 7
				},
				end: {
					line: 90,
					column: 8
				}
			},
			'26': {
				start: {
					line: 93,
					column: 2
				},
				end: {
					line: 93,
					column: 39
				}
			},
			'27': {
				start: {
					line: 94,
					column: 2
				},
				end: {
					line: 94,
					column: 54
				}
			},
			'28': {
				start: {
					line: 97,
					column: 2
				},
				end: {
					line: 105,
					column: 3
				}
			},
			'29': {
				start: {
					line: 98,
					column: 3
				},
				end: {
					line: 104,
					column: 31
				}
			},
			'30': {
				start: {
					line: 107,
					column: 2
				},
				end: {
					line: 107,
					column: 14
				}
			},
			'31': {
				start: {
					line: 113,
					column: 2
				},
				end: {
					line: 113,
					column: 28
				}
			},
			'32': {
				start: {
					line: 114,
					column: 2
				},
				end: {
					line: 114,
					column: 37
				}
			},
			'33': {
				start: {
					line: 115,
					column: 2
				},
				end: {
					line: 115,
					column: 23
				}
			},
			'34': {
				start: {
					line: 116,
					column: 2
				},
				end: {
					line: 116,
					column: 34
				}
			},
			'35': {
				start: {
					line: 117,
					column: 2
				},
				end: {
					line: 117,
					column: 25
				}
			},
			'36': {
				start: {
					line: 118,
					column: 2
				},
				end: {
					line: 118,
					column: 36
				}
			},
			'37': {
				start: {
					line: 119,
					column: 2
				},
				end: {
					line: 119,
					column: 36
				}
			},
			'38': {
				start: {
					line: 120,
					column: 2
				},
				end: {
					line: 120,
					column: 36
				}
			},
			'39': {
				start: {
					line: 121,
					column: 2
				},
				end: {
					line: 121,
					column: 36
				}
			}
		},
		fnMap: {
			'0': {
				name: 'addToHistory',
				decl: {
					start: {
						line: 14,
						column: 9
					},
					end: {
						line: 14,
						column: 21
					}
				},
				loc: {
					start: {
						line: 14,
						column: 29
					},
					end: {
						line: 27,
						column: 1
					}
				},
				line: 14
			},
			'1': {
				name: '(anonymous_1)',
				decl: {
					start: {
						line: 15,
						column: 8
					},
					end: {
						line: 15,
						column: 9
					}
				},
				loc: {
					start: {
						line: 15,
						column: 22
					},
					end: {
						line: 26,
						column: 2
					}
				},
				line: 15
			},
			'2': {
				name: 'denotePromotionInHistory',
				decl: {
					start: {
						line: 29,
						column: 9
					},
					end: {
						line: 29,
						column: 33
					}
				},
				loc: {
					start: {
						line: 29,
						column: 41
					},
					end: {
						line: 39,
						column: 1
					}
				},
				line: 29
			},
			'3': {
				name: '(anonymous_3)',
				decl: {
					start: {
						line: 30,
						column: 8
					},
					end: {
						line: 30,
						column: 9
					}
				},
				loc: {
					start: {
						line: 30,
						column: 20
					},
					end: {
						line: 38,
						column: 2
					}
				},
				line: 30
			},
			'4': {
				name: '(anonymous_4)',
				decl: {
					start: {
						line: 42,
						column: 1
					},
					end: {
						line: 42,
						column: 2
					}
				},
				loc: {
					start: {
						line: 42,
						column: 21
					},
					end: {
						line: 47,
						column: 2
					}
				},
				line: 42
			},
			'5': {
				name: '(anonymous_5)',
				decl: {
					start: {
						line: 49,
						column: 1
					},
					end: {
						line: 49,
						column: 2
					}
				},
				loc: {
					start: {
						line: 49,
						column: 18
					},
					end: {
						line: 59,
						column: 2
					}
				},
				line: 49
			},
			'6': {
				name: '(anonymous_6)',
				decl: {
					start: {
						line: 61,
						column: 1
					},
					end: {
						line: 61,
						column: 2
					}
				},
				loc: {
					start: {
						line: 61,
						column: 19
					},
					end: {
						line: 65,
						column: 2
					}
				},
				line: 61
			},
			'7': {
				name: '(anonymous_7)',
				decl: {
					start: {
						line: 67,
						column: 1
					},
					end: {
						line: 67,
						column: 2
					}
				},
				loc: {
					start: {
						line: 67,
						column: 16
					},
					end: {
						line: 84,
						column: 2
					}
				},
				line: 67
			},
			'8': {
				name: '(anonymous_8)',
				decl: {
					start: {
						line: 86,
						column: 1
					},
					end: {
						line: 86,
						column: 2
					}
				},
				loc: {
					start: {
						line: 86,
						column: 27
					},
					end: {
						line: 108,
						column: 2
					}
				},
				line: 86
			},
			'9': {
				name: '(anonymous_9)',
				decl: {
					start: {
						line: 112,
						column: 1
					},
					end: {
						line: 112,
						column: 2
					}
				},
				loc: {
					start: {
						line: 112,
						column: 73
					},
					end: {
						line: 122,
						column: 2
					}
				},
				line: 112
			}
		},
		branchMap: {
			'0': {
				loc: {
					start: {
						line: 35,
						column: 2
					},
					end: {
						line: 37,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 35,
						column: 2
					},
					end: {
						line: 37,
						column: 3
					}
				}, {
					start: {
						line: 35,
						column: 2
					},
					end: {
						line: 37,
						column: 3
					}
				}],
				line: 35
			},
			'1': {
				loc: {
					start: {
						line: 62,
						column: 9
					},
					end: {
						line: 64,
						column: 17
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 63,
						column: 3
					},
					end: {
						line: 63,
						column: 17
					}
				}, {
					start: {
						line: 64,
						column: 3
					},
					end: {
						line: 64,
						column: 17
					}
				}],
				line: 62
			},
			'2': {
				loc: {
					start: {
						line: 73,
						column: 3
					},
					end: {
						line: 79,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 73,
						column: 3
					},
					end: {
						line: 79,
						column: 4
					}
				}, {
					start: {
						line: 73,
						column: 3
					},
					end: {
						line: 79,
						column: 4
					}
				}],
				line: 73
			},
			'3': {
				loc: {
					start: {
						line: 76,
						column: 6
					},
					end: {
						line: 76,
						column: 69
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 76,
						column: 60
					},
					end: {
						line: 76,
						column: 63
					}
				}, {
					start: {
						line: 76,
						column: 66
					},
					end: {
						line: 76,
						column: 69
					}
				}],
				line: 76
			},
			'4': {
				loc: {
					start: {
						line: 78,
						column: 6
					},
					end: {
						line: 78,
						column: 52
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 78,
						column: 44
					},
					end: {
						line: 78,
						column: 47
					}
				}, {
					start: {
						line: 78,
						column: 50
					},
					end: {
						line: 78,
						column: 52
					}
				}],
				line: 78
			}
		},
		s: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0,
			'35': 0,
			'36': 0,
			'37': 0,
			'38': 0,
			'39': 0
		},
		f: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0
		},
		b: {
			'0': [0, 0],
			'1': [0, 0],
			'2': [0, 0],
			'3': [0, 0],
			'4': [0, 0]
		},
		_coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	},
	    coverage = global[gcv] || (global[gcv] = {});

	if (coverage[path] && coverage[path].hash === hash) {
		return coverage[path];
	}

	coverageData.hash = hash;
	return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Move = exports.Game = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _board = require('./board');

var _events = require('events');

var _piece = require('./piece');

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               	Games contain the history of a board and the board itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               	At time of writing this, the game is also intended to store some
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               	degree of information regarding the opponents and keys that
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               	could be used for storage, etc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

function addToHistory(game) {
	cov_240na0baid.f[0]++;
	cov_240na0baid.s[0]++;

	return function (ev) {
		cov_240na0baid.f[1]++;

		var hashCode = (cov_240na0baid.s[1]++, game.getHashCode()),
		    move = (cov_240na0baid.s[2]++, new Move(ev.prevSquare, ev.postSquare, ev.capturedPiece, ev.algebraic, hashCode));

		cov_240na0baid.s[3]++;
		game.moveHistory.push(move);
	};
}

function denotePromotionInHistory(game) {
	cov_240na0baid.f[2]++;
	cov_240na0baid.s[4]++;

	return function () {
		cov_240na0baid.f[3]++;

		var latest = (cov_240na0baid.s[5]++, game.moveHistory[game.moveHistory.length - 1]);

		cov_240na0baid.s[6]++;
		if (latest) {
			cov_240na0baid.b[0][0]++;
			cov_240na0baid.s[7]++;

			latest.promotion = true;
		} else {
			cov_240na0baid.b[0][1]++;
		}
	};
}

var Game = exports.Game = function (_ref) {
	_inherits(Game, _ref);

	function Game(board) {
		_classCallCheck(this, Game);

		cov_240na0baid.f[4]++;
		cov_240na0baid.s[8]++;

		var _this = _possibleConstructorReturn(this, (Game.__proto__ || Object.getPrototypeOf(Game)).call(this));

		cov_240na0baid.s[9]++;


		_this.board = board;
		cov_240na0baid.s[10]++;
		_this.moveHistory = [];
		return _this;
	}

	_createClass(Game, [{
		key: 'getCurrentSide',
		value: function getCurrentSide() {
			cov_240na0baid.f[6]++;
			cov_240na0baid.s[16]++;

			return this.moveHistory.length % 2 === 0 ? (cov_240na0baid.b[1][0]++, _piece.SideType.White) : (cov_240na0baid.b[1][1]++, _piece.SideType.Black);
		}
	}, {
		key: 'getHashCode',
		value: function getHashCode() {
			cov_240na0baid.f[7]++;

			var i = (cov_240na0baid.s[17]++, 0),
			    sum = (cov_240na0baid.s[18]++, _crypto2.default.createHash('md5'));

			cov_240na0baid.s[19]++;
			for (i = 0; i < this.board.squares.length; i++) {
				cov_240na0baid.s[20]++;

				if (this.board.squares[i].piece !== null) {
					cov_240na0baid.b[2][0]++;
					cov_240na0baid.s[21]++;

					sum.update(this.board.squares[i].file + this.board.squares[i].rank + (this.board.squares[i].piece.side === _piece.SideType.White ? (cov_240na0baid.b[3][0]++, 'w') : (cov_240na0baid.b[3][1]++, 'b')) + this.board.squares[i].piece.notation + (i < this.board.squares.length - 1 ? (cov_240na0baid.b[4][0]++, '-') : (cov_240na0baid.b[4][1]++, '')));
				} else {
					cov_240na0baid.b[2][1]++;
				}
			}

			// generate hash code for board
			cov_240na0baid.s[22]++;
			return sum.digest('base64');
		}
	}], [{
		key: 'create',
		value: function create() {
			cov_240na0baid.f[5]++;

			var board = (cov_240na0baid.s[11]++, _board.Board.create()),
			    game = (cov_240na0baid.s[12]++, new Game(board));

			// handle move and promotion events correctly
			cov_240na0baid.s[13]++;
			board.on('move', addToHistory(game));
			cov_240na0baid.s[14]++;
			board.on('promote', denotePromotionInHistory(game));

			cov_240na0baid.s[15]++;
			return game;
		}
	}, {
		key: 'load',
		value: function load(moveHistory) {
			cov_240na0baid.f[8]++;

			var board = (cov_240na0baid.s[23]++, _board.Board.create()),
			    game = (cov_240na0baid.s[24]++, new Game()),
			    i = (cov_240na0baid.s[25]++, 0);

			// handle move and promotion events correctly
			cov_240na0baid.s[26]++;
			board.on('move', addToHistory(game));
			cov_240na0baid.s[27]++;
			board.on('promote', denotePromotionInHistory(game));

			// apply move history
			cov_240na0baid.s[28]++;
			for (i = 0; i < moveHistory.length; i++) {
				cov_240na0baid.s[29]++;

				board.move(board.getSquare(moveHistory[i].prevFile, moveHistory[i].prevRank), board.getSquare(moveHistory[i].postFile, moveHistory[i].postRank));
			}

			cov_240na0baid.s[30]++;
			return game;
		}
	}]);

	return Game;
}((_events.EventEmitter));

var Move = exports.Move = function Move(originSquare, targetSquare, capturedPiece, notation, hash) {
	_classCallCheck(this, Move);

	cov_240na0baid.f[9]++;
	cov_240na0baid.s[31]++;

	this.algebraic = notation;
	cov_240na0baid.s[32]++;
	this.capturedPiece = capturedPiece;
	cov_240na0baid.s[33]++;
	this.hashCode = hash;
	cov_240na0baid.s[34]++;
	this.piece = targetSquare.piece;
	cov_240na0baid.s[35]++;
	this.promotion = false;
	cov_240na0baid.s[36]++;
	this.postFile = targetSquare.file;
	cov_240na0baid.s[37]++;
	this.postRank = targetSquare.rank;
	cov_240na0baid.s[38]++;
	this.prevFile = originSquare.file;
	cov_240na0baid.s[39]++;
	this.prevRank = originSquare.rank;
};

exports.default = { Game: Game, Move: Move };
//# sourceMappingURL=game.js.map
