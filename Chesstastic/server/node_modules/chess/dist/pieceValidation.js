'use strict';

var cov_pnuidul9s = function () {
	var path = '/Volumes/Data/Projects/brozeph/node-chess/src/pieceValidation.js',
	    hash = 'ecdc0dcdb5b09c52de9319f36888edd7652ee720',
	    Function = function () {}.constructor,
	    global = new Function('return this')(),
	    gcv = '__coverage__',
	    coverageData = {
		path: '/Volumes/Data/Projects/brozeph/node-chess/src/pieceValidation.js',
		statementMap: {
			'0': {
				start: {
					line: 18,
					column: 2
				},
				end: {
					line: 18,
					column: 29
				}
			},
			'1': {
				start: {
					line: 19,
					column: 2
				},
				end: {
					line: 19,
					column: 29
				}
			},
			'2': {
				start: {
					line: 20,
					column: 2
				},
				end: {
					line: 20,
					column: 28
				}
			},
			'3': {
				start: {
					line: 21,
					column: 2
				},
				end: {
					line: 21,
					column: 31
				}
			},
			'4': {
				start: {
					line: 22,
					column: 2
				},
				end: {
					line: 22,
					column: 21
				}
			},
			'5': {
				start: {
					line: 23,
					column: 2
				},
				end: {
					line: 23,
					column: 19
				}
			},
			'6': {
				start: {
					line: 24,
					column: 2
				},
				end: {
					line: 24,
					column: 18
				}
			},
			'7': {
				start: {
					line: 34,
					column: 2
				},
				end: {
					line: 49,
					column: 3
				}
			},
			'8': {
				start: {
					line: 36,
					column: 4
				},
				end: {
					line: 36,
					column: 39
				}
			},
			'9': {
				start: {
					line: 38,
					column: 4
				},
				end: {
					line: 38,
					column: 37
				}
			},
			'10': {
				start: {
					line: 40,
					column: 4
				},
				end: {
					line: 40,
					column: 39
				}
			},
			'11': {
				start: {
					line: 42,
					column: 4
				},
				end: {
					line: 42,
					column: 37
				}
			},
			'12': {
				start: {
					line: 44,
					column: 4
				},
				end: {
					line: 44,
					column: 38
				}
			},
			'13': {
				start: {
					line: 46,
					column: 4
				},
				end: {
					line: 46,
					column: 37
				}
			},
			'14': {
				start: {
					line: 48,
					column: 4
				},
				end: {
					line: 48,
					column: 16
				}
			},
			'15': {
				start: {
					line: 54,
					column: 2
				},
				end: {
					line: 60,
					column: 6
				}
			},
			'16': {
				start: {
					line: 54,
					column: 55
				},
				end: {
					line: 60,
					column: 4
				}
			},
			'17': {
				start: {
					line: 55,
					column: 3
				},
				end: {
					line: 57,
					column: 4
				}
			},
			'18': {
				start: {
					line: 56,
					column: 4
				},
				end: {
					line: 56,
					column: 23
				}
			},
			'19': {
				start: {
					line: 59,
					column: 3
				},
				end: {
					line: 59,
					column: 38
				}
			},
			'20': {
				start: {
					line: 63,
					column: 9
				},
				end: {
					line: 67,
					column: 4
				}
			},
			'21': {
				start: {
					line: 68,
					column: 21
				},
				end: {
					line: 92,
					column: 4
				}
			},
			'22': {
				start: {
					line: 70,
					column: 13
				},
				end: {
					line: 70,
					column: 18
				}
			},
			'23': {
				start: {
					line: 71,
					column: 15
				},
				end: {
					line: 71,
					column: 20
				}
			},
			'24': {
				start: {
					line: 72,
					column: 21
				},
				end: {
					line: 72,
					column: 55
				}
			},
			'25': {
				start: {
					line: 73,
					column: 9
				},
				end: {
					line: 73,
					column: 10
				}
			},
			'26': {
				start: {
					line: 75,
					column: 4
				},
				end: {
					line: 91,
					column: 5
				}
			},
			'27': {
				start: {
					line: 76,
					column: 5
				},
				end: {
					line: 78,
					column: 52
				}
			},
			'28': {
				start: {
					line: 79,
					column: 5
				},
				end: {
					line: 79,
					column: 47
				}
			},
			'29': {
				start: {
					line: 81,
					column: 5
				},
				end: {
					line: 83,
					column: 6
				}
			},
			'30': {
				start: {
					line: 82,
					column: 6
				},
				end: {
					line: 82,
					column: 42
				}
			},
			'31': {
				start: {
					line: 85,
					column: 5
				},
				end: {
					line: 90,
					column: 6
				}
			},
			'32': {
				start: {
					line: 86,
					column: 6
				},
				end: {
					line: 86,
					column: 27
				}
			},
			'33': {
				start: {
					line: 88,
					column: 6
				},
				end: {
					line: 88,
					column: 60
				}
			},
			'34': {
				start: {
					line: 89,
					column: 6
				},
				end: {
					line: 89,
					column: 10
				}
			},
			'35': {
				start: {
					line: 94,
					column: 2
				},
				end: {
					line: 96,
					column: 3
				}
			},
			'36': {
				start: {
					line: 95,
					column: 3
				},
				end: {
					line: 95,
					column: 50
				}
			},
			'37': {
				start: {
					line: 98,
					column: 2
				},
				end: {
					line: 133,
					column: 3
				}
			},
			'38': {
				start: {
					line: 100,
					column: 3
				},
				end: {
					line: 105,
					column: 4
				}
			},
			'39': {
				start: {
					line: 101,
					column: 4
				},
				end: {
					line: 104,
					column: 27
				}
			},
			'40': {
				start: {
					line: 108,
					column: 3
				},
				end: {
					line: 113,
					column: 4
				}
			},
			'41': {
				start: {
					line: 109,
					column: 4
				},
				end: {
					line: 112,
					column: 27
				}
			},
			'42': {
				start: {
					line: 116,
					column: 3
				},
				end: {
					line: 119,
					column: 4
				}
			},
			'43': {
				start: {
					line: 117,
					column: 4
				},
				end: {
					line: 117,
					column: 64
				}
			},
			'44': {
				start: {
					line: 118,
					column: 4
				},
				end: {
					line: 118,
					column: 65
				}
			},
			'45': {
				start: {
					line: 122,
					column: 3
				},
				end: {
					line: 127,
					column: 4
				}
			},
			'46': {
				start: {
					line: 123,
					column: 4
				},
				end: {
					line: 123,
					column: 69
				}
			},
			'47': {
				start: {
					line: 124,
					column: 4
				},
				end: {
					line: 124,
					column: 70
				}
			},
			'48': {
				start: {
					line: 125,
					column: 4
				},
				end: {
					line: 125,
					column: 69
				}
			},
			'49': {
				start: {
					line: 126,
					column: 4
				},
				end: {
					line: 126,
					column: 70
				}
			},
			'50': {
				start: {
					line: 130,
					column: 3
				},
				end: {
					line: 130,
					column: 36
				}
			},
			'51': {
				start: {
					line: 132,
					column: 3
				},
				end: {
					line: 132,
					column: 50
				}
			},
			'52': {
				start: {
					line: 136,
					column: 2
				},
				end: {
					line: 136,
					column: 41
				}
			},
			'53': {
				start: {
					line: 142,
					column: 2
				},
				end: {
					line: 142,
					column: 15
				}
			},
			'54': {
				start: {
					line: 145,
					column: 2
				},
				end: {
					line: 145,
					column: 28
				}
			},
			'55': {
				start: {
					line: 146,
					column: 2
				},
				end: {
					line: 146,
					column: 31
				}
			},
			'56': {
				start: {
					line: 147,
					column: 2
				},
				end: {
					line: 147,
					column: 18
				}
			},
			'57': {
				start: {
					line: 153,
					column: 2
				},
				end: {
					line: 153,
					column: 15
				}
			},
			'58': {
				start: {
					line: 156,
					column: 2
				},
				end: {
					line: 156,
					column: 28
				}
			},
			'59': {
				start: {
					line: 157,
					column: 2
				},
				end: {
					line: 157,
					column: 28
				}
			},
			'60': {
				start: {
					line: 158,
					column: 2
				},
				end: {
					line: 158,
					column: 27
				}
			},
			'61': {
				start: {
					line: 159,
					column: 2
				},
				end: {
					line: 159,
					column: 30
				}
			},
			'62': {
				start: {
					line: 160,
					column: 2
				},
				end: {
					line: 160,
					column: 29
				}
			},
			'63': {
				start: {
					line: 161,
					column: 2
				},
				end: {
					line: 161,
					column: 18
				}
			},
			'64': {
				start: {
					line: 171,
					column: 2
				},
				end: {
					line: 171,
					column: 15
				}
			},
			'65': {
				start: {
					line: 174,
					column: 2
				},
				end: {
					line: 174,
					column: 31
				}
			},
			'66': {
				start: {
					line: 175,
					column: 2
				},
				end: {
					line: 175,
					column: 18
				}
			},
			'67': {
				start: {
					line: 181,
					column: 15
				},
				end: {
					line: 183,
					column: 27
				}
			},
			'68': {
				start: {
					line: 184,
					column: 16
				},
				end: {
					line: 186,
					column: 28
				}
			},
			'69': {
				start: {
					line: 187,
					column: 15
				},
				end: {
					line: 189,
					column: 27
				}
			},
			'70': {
				start: {
					line: 190,
					column: 16
				},
				end: {
					line: 192,
					column: 28
				}
			},
			'71': {
				start: {
					line: 193,
					column: 13
				},
				end: {
					line: 193,
					column: 15
				}
			},
			'72': {
				start: {
					line: 194,
					column: 7
				},
				end: {
					line: 194,
					column: 8
				}
			},
			'73': {
				start: {
					line: 195,
					column: 7
				},
				end: {
					line: 195,
					column: 11
				}
			},
			'74': {
				start: {
					line: 197,
					column: 2
				},
				end: {
					line: 205,
					column: 3
				}
			},
			'75': {
				start: {
					line: 198,
					column: 3
				},
				end: {
					line: 200,
					column: 25
				}
			},
			'76': {
				start: {
					line: 202,
					column: 3
				},
				end: {
					line: 204,
					column: 24
				}
			},
			'77': {
				start: {
					line: 207,
					column: 2
				},
				end: {
					line: 215,
					column: 3
				}
			},
			'78': {
				start: {
					line: 208,
					column: 3
				},
				end: {
					line: 210,
					column: 25
				}
			},
			'79': {
				start: {
					line: 212,
					column: 3
				},
				end: {
					line: 214,
					column: 25
				}
			},
			'80': {
				start: {
					line: 217,
					column: 2
				},
				end: {
					line: 225,
					column: 3
				}
			},
			'81': {
				start: {
					line: 218,
					column: 3
				},
				end: {
					line: 220,
					column: 25
				}
			},
			'82': {
				start: {
					line: 222,
					column: 3
				},
				end: {
					line: 224,
					column: 24
				}
			},
			'83': {
				start: {
					line: 227,
					column: 2
				},
				end: {
					line: 235,
					column: 3
				}
			},
			'84': {
				start: {
					line: 228,
					column: 3
				},
				end: {
					line: 230,
					column: 25
				}
			},
			'85': {
				start: {
					line: 232,
					column: 3
				},
				end: {
					line: 234,
					column: 25
				}
			},
			'86': {
				start: {
					line: 237,
					column: 2
				},
				end: {
					line: 245,
					column: 3
				}
			},
			'87': {
				start: {
					line: 238,
					column: 3
				},
				end: {
					line: 244,
					column: 4
				}
			},
			'88': {
				start: {
					line: 240,
					column: 4
				},
				end: {
					line: 240,
					column: 45
				}
			},
			'89': {
				start: {
					line: 241,
					column: 4
				},
				end: {
					line: 243,
					column: 5
				}
			},
			'90': {
				start: {
					line: 242,
					column: 5
				},
				end: {
					line: 242,
					column: 38
				}
			},
			'91': {
				start: {
					line: 251,
					column: 2
				},
				end: {
					line: 251,
					column: 15
				}
			},
			'92': {
				start: {
					line: 254,
					column: 2
				},
				end: {
					line: 254,
					column: 27
				}
			},
			'93': {
				start: {
					line: 255,
					column: 2
				},
				end: {
					line: 255,
					column: 29
				}
			},
			'94': {
				start: {
					line: 256,
					column: 2
				},
				end: {
					line: 256,
					column: 18
				}
			},
			'95': {
				start: {
					line: 263,
					column: 13
				},
				end: {
					line: 271,
					column: 32
				}
			},
			'96': {
				start: {
					line: 272,
					column: 7
				},
				end: {
					line: 272,
					column: 8
				}
			},
			'97': {
				start: {
					line: 273,
					column: 8
				},
				end: {
					line: 273,
					column: 12
				}
			},
			'98': {
				start: {
					line: 274,
					column: 7
				},
				end: {
					line: 274,
					column: 11
				}
			},
			'99': {
				start: {
					line: 277,
					column: 2
				},
				end: {
					line: 283,
					column: 3
				}
			},
			'100': {
				start: {
					line: 279,
					column: 3
				},
				end: {
					line: 279,
					column: 44
				}
			},
			'101': {
				start: {
					line: 280,
					column: 3
				},
				end: {
					line: 282,
					column: 4
				}
			},
			'102': {
				start: {
					line: 281,
					column: 4
				},
				end: {
					line: 281,
					column: 37
				}
			},
			'103': {
				start: {
					line: 286,
					column: 2
				},
				end: {
					line: 325,
					column: 3
				}
			},
			'104': {
				start: {
					line: 289,
					column: 3
				},
				end: {
					line: 293,
					column: 26
				}
			},
			'105': {
				start: {
					line: 295,
					column: 3
				},
				end: {
					line: 297,
					column: 4
				}
			},
			'106': {
				start: {
					line: 296,
					column: 4
				},
				end: {
					line: 296,
					column: 29
				}
			},
			'107': {
				start: {
					line: 300,
					column: 9
				},
				end: {
					line: 325,
					column: 3
				}
			},
			'108': {
				start: {
					line: 303,
					column: 3
				},
				end: {
					line: 305,
					column: 66
				}
			},
			'109': {
				start: {
					line: 306,
					column: 3
				},
				end: {
					line: 306,
					column: 9
				}
			},
			'110': {
				start: {
					line: 308,
					column: 3
				},
				end: {
					line: 324,
					column: 4
				}
			},
			'111': {
				start: {
					line: 310,
					column: 4
				},
				end: {
					line: 310,
					column: 45
				}
			},
			'112': {
				start: {
					line: 311,
					column: 4
				},
				end: {
					line: 323,
					column: 5
				}
			},
			'113': {
				start: {
					line: 317,
					column: 5
				},
				end: {
					line: 322,
					column: 30
				}
			},
			'114': {
				start: {
					line: 331,
					column: 2
				},
				end: {
					line: 331,
					column: 15
				}
			},
			'115': {
				start: {
					line: 334,
					column: 2
				},
				end: {
					line: 334,
					column: 28
				}
			},
			'116': {
				start: {
					line: 335,
					column: 2
				},
				end: {
					line: 335,
					column: 28
				}
			},
			'117': {
				start: {
					line: 336,
					column: 2
				},
				end: {
					line: 336,
					column: 27
				}
			},
			'118': {
				start: {
					line: 337,
					column: 2
				},
				end: {
					line: 337,
					column: 30
				}
			},
			'119': {
				start: {
					line: 338,
					column: 2
				},
				end: {
					line: 338,
					column: 30
				}
			},
			'120': {
				start: {
					line: 339,
					column: 2
				},
				end: {
					line: 339,
					column: 18
				}
			},
			'121': {
				start: {
					line: 345,
					column: 2
				},
				end: {
					line: 345,
					column: 15
				}
			},
			'122': {
				start: {
					line: 348,
					column: 2
				},
				end: {
					line: 348,
					column: 28
				}
			},
			'123': {
				start: {
					line: 349,
					column: 2
				},
				end: {
					line: 349,
					column: 27
				}
			},
			'124': {
				start: {
					line: 350,
					column: 2
				},
				end: {
					line: 350,
					column: 30
				}
			},
			'125': {
				start: {
					line: 351,
					column: 2
				},
				end: {
					line: 351,
					column: 29
				}
			},
			'126': {
				start: {
					line: 352,
					column: 2
				},
				end: {
					line: 352,
					column: 18
				}
			}
		},
		fnMap: {
			'0': {
				name: '(anonymous_0)',
				decl: {
					start: {
						line: 17,
						column: 1
					},
					end: {
						line: 17,
						column: 2
					}
				},
				loc: {
					start: {
						line: 17,
						column: 21
					},
					end: {
						line: 25,
						column: 2
					}
				},
				line: 17
			},
			'1': {
				name: '(anonymous_1)',
				decl: {
					start: {
						line: 27,
						column: 1
					},
					end: {
						line: 27,
						column: 2
					}
				},
				loc: {
					start: {
						line: 27,
						column: 27
					},
					end: {
						line: 31,
						column: 2
					}
				},
				line: 27
			},
			'2': {
				name: '(anonymous_2)',
				decl: {
					start: {
						line: 33,
						column: 1
					},
					end: {
						line: 33,
						column: 2
					}
				},
				loc: {
					start: {
						line: 33,
						column: 30
					},
					end: {
						line: 50,
						column: 2
					}
				},
				line: 33
			},
			'3': {
				name: '(anonymous_3)',
				decl: {
					start: {
						line: 52,
						column: 1
					},
					end: {
						line: 52,
						column: 2
					}
				},
				loc: {
					start: {
						line: 52,
						column: 23
					},
					end: {
						line: 137,
						column: 2
					}
				},
				line: 52
			},
			'4': {
				name: '(anonymous_4)',
				decl: {
					start: {
						line: 54,
						column: 26
					},
					end: {
						line: 54,
						column: 27
					}
				},
				loc: {
					start: {
						line: 54,
						column: 55
					},
					end: {
						line: 60,
						column: 4
					}
				},
				line: 54
			},
			'5': {
				name: '(anonymous_5)',
				decl: {
					start: {
						line: 54,
						column: 67
					},
					end: {
						line: 54,
						column: 68
					}
				},
				loc: {
					start: {
						line: 54,
						column: 88
					},
					end: {
						line: 60,
						column: 3
					}
				},
				line: 54
			},
			'6': {
				name: '(anonymous_6)',
				decl: {
					start: {
						line: 68,
						column: 21
					},
					end: {
						line: 68,
						column: 22
					}
				},
				loc: {
					start: {
						line: 68,
						column: 40
					},
					end: {
						line: 92,
						column: 4
					}
				},
				line: 68
			},
			'7': {
				name: '(anonymous_7)',
				decl: {
					start: {
						line: 141,
						column: 1
					},
					end: {
						line: 141,
						column: 2
					}
				},
				loc: {
					start: {
						line: 141,
						column: 21
					},
					end: {
						line: 148,
						column: 2
					}
				},
				line: 141
			},
			'8': {
				name: '(anonymous_8)',
				decl: {
					start: {
						line: 152,
						column: 1
					},
					end: {
						line: 152,
						column: 2
					}
				},
				loc: {
					start: {
						line: 152,
						column: 21
					},
					end: {
						line: 162,
						column: 2
					}
				},
				line: 152
			},
			'9': {
				name: '(anonymous_9)',
				decl: {
					start: {
						line: 164,
						column: 1
					},
					end: {
						line: 164,
						column: 2
					}
				},
				loc: {
					start: {
						line: 164,
						column: 27
					},
					end: {
						line: 166,
						column: 2
					}
				},
				line: 164
			},
			'10': {
				name: '(anonymous_10)',
				decl: {
					start: {
						line: 170,
						column: 1
					},
					end: {
						line: 170,
						column: 2
					}
				},
				loc: {
					start: {
						line: 170,
						column: 21
					},
					end: {
						line: 176,
						column: 2
					}
				},
				line: 170
			},
			'11': {
				name: '(anonymous_11)',
				decl: {
					start: {
						line: 178,
						column: 1
					},
					end: {
						line: 178,
						column: 2
					}
				},
				loc: {
					start: {
						line: 178,
						column: 30
					},
					end: {
						line: 246,
						column: 2
					}
				},
				line: 178
			},
			'12': {
				name: '(anonymous_12)',
				decl: {
					start: {
						line: 250,
						column: 1
					},
					end: {
						line: 250,
						column: 2
					}
				},
				loc: {
					start: {
						line: 250,
						column: 21
					},
					end: {
						line: 257,
						column: 2
					}
				},
				line: 250
			},
			'13': {
				name: '(anonymous_13)',
				decl: {
					start: {
						line: 260,
						column: 1
					},
					end: {
						line: 260,
						column: 2
					}
				},
				loc: {
					start: {
						line: 260,
						column: 30
					},
					end: {
						line: 326,
						column: 2
					}
				},
				line: 260
			},
			'14': {
				name: '(anonymous_14)',
				decl: {
					start: {
						line: 330,
						column: 1
					},
					end: {
						line: 330,
						column: 2
					}
				},
				loc: {
					start: {
						line: 330,
						column: 21
					},
					end: {
						line: 340,
						column: 2
					}
				},
				line: 330
			},
			'15': {
				name: '(anonymous_15)',
				decl: {
					start: {
						line: 344,
						column: 1
					},
					end: {
						line: 344,
						column: 2
					}
				},
				loc: {
					start: {
						line: 344,
						column: 21
					},
					end: {
						line: 353,
						column: 2
					}
				},
				line: 344
			}
		},
		branchMap: {
			'0': {
				loc: {
					start: {
						line: 34,
						column: 2
					},
					end: {
						line: 49,
						column: 3
					}
				},
				type: 'switch',
				locations: [{
					start: {
						line: 35,
						column: 3
					},
					end: {
						line: 36,
						column: 39
					}
				}, {
					start: {
						line: 37,
						column: 3
					},
					end: {
						line: 38,
						column: 37
					}
				}, {
					start: {
						line: 39,
						column: 3
					},
					end: {
						line: 40,
						column: 39
					}
				}, {
					start: {
						line: 41,
						column: 3
					},
					end: {
						line: 42,
						column: 37
					}
				}, {
					start: {
						line: 43,
						column: 3
					},
					end: {
						line: 44,
						column: 38
					}
				}, {
					start: {
						line: 45,
						column: 3
					},
					end: {
						line: 46,
						column: 37
					}
				}, {
					start: {
						line: 47,
						column: 3
					},
					end: {
						line: 48,
						column: 16
					}
				}],
				line: 34
			},
			'1': {
				loc: {
					start: {
						line: 54,
						column: 13
					},
					end: {
						line: 60,
						column: 5
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 54,
						column: 13
					},
					end: {
						line: 54,
						column: 21
					}
				}, {
					start: {
						line: 54,
						column: 26
					},
					end: {
						line: 60,
						column: 4
					}
				}],
				line: 54
			},
			'2': {
				loc: {
					start: {
						line: 55,
						column: 3
					},
					end: {
						line: 57,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 55,
						column: 3
					},
					end: {
						line: 57,
						column: 4
					}
				}, {
					start: {
						line: 55,
						column: 3
					},
					end: {
						line: 57,
						column: 4
					}
				}],
				line: 55
			},
			'3': {
				loc: {
					start: {
						line: 65,
						column: 12
					},
					end: {
						line: 65,
						column: 34
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 65,
						column: 18
					},
					end: {
						line: 65,
						column: 27
					}
				}, {
					start: {
						line: 65,
						column: 30
					},
					end: {
						line: 65,
						column: 34
					}
				}],
				line: 65
			},
			'4': {
				loc: {
					start: {
						line: 75,
						column: 11
					},
					end: {
						line: 75,
						column: 33
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 75,
						column: 11
					},
					end: {
						line: 75,
						column: 24
					}
				}, {
					start: {
						line: 75,
						column: 28
					},
					end: {
						line: 75,
						column: 33
					}
				}],
				line: 75
			},
			'5': {
				loc: {
					start: {
						line: 76,
						column: 13
					},
					end: {
						line: 78,
						column: 51
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 76,
						column: 13
					},
					end: {
						line: 76,
						column: 41
					}
				}, {
					start: {
						line: 77,
						column: 7
					},
					end: {
						line: 77,
						column: 40
					}
				}, {
					start: {
						line: 78,
						column: 7
					},
					end: {
						line: 78,
						column: 50
					}
				}],
				line: 76
			},
			'6': {
				loc: {
					start: {
						line: 79,
						column: 16
					},
					end: {
						line: 79,
						column: 45
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 79,
						column: 16
					},
					end: {
						line: 79,
						column: 35
					}
				}, {
					start: {
						line: 79,
						column: 39
					},
					end: {
						line: 79,
						column: 45
					}
				}],
				line: 79
			},
			'7': {
				loc: {
					start: {
						line: 81,
						column: 5
					},
					end: {
						line: 83,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 81,
						column: 5
					},
					end: {
						line: 83,
						column: 6
					}
				}, {
					start: {
						line: 81,
						column: 5
					},
					end: {
						line: 83,
						column: 6
					}
				}],
				line: 81
			},
			'8': {
				loc: {
					start: {
						line: 85,
						column: 5
					},
					end: {
						line: 90,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 85,
						column: 5
					},
					end: {
						line: 90,
						column: 6
					}
				}, {
					start: {
						line: 85,
						column: 5
					},
					end: {
						line: 90,
						column: 6
					}
				}],
				line: 85
			},
			'9': {
				loc: {
					start: {
						line: 85,
						column: 9
					},
					end: {
						line: 85,
						column: 25
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 85,
						column: 9
					},
					end: {
						line: 85,
						column: 16
					}
				}, {
					start: {
						line: 85,
						column: 20
					},
					end: {
						line: 85,
						column: 25
					}
				}],
				line: 85
			},
			'10': {
				loc: {
					start: {
						line: 94,
						column: 2
					},
					end: {
						line: 96,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 94,
						column: 2
					},
					end: {
						line: 96,
						column: 3
					}
				}, {
					start: {
						line: 94,
						column: 2
					},
					end: {
						line: 96,
						column: 3
					}
				}],
				line: 94
			},
			'11': {
				loc: {
					start: {
						line: 94,
						column: 6
					},
					end: {
						line: 94,
						column: 48
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 94,
						column: 6
					},
					end: {
						line: 94,
						column: 16
					}
				}, {
					start: {
						line: 94,
						column: 20
					},
					end: {
						line: 94,
						column: 48
					}
				}],
				line: 94
			},
			'12': {
				loc: {
					start: {
						line: 98,
						column: 2
					},
					end: {
						line: 133,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 98,
						column: 2
					},
					end: {
						line: 133,
						column: 3
					}
				}, {
					start: {
						line: 98,
						column: 2
					},
					end: {
						line: 133,
						column: 3
					}
				}],
				line: 98
			},
			'13': {
				loc: {
					start: {
						line: 98,
						column: 6
					},
					end: {
						line: 98,
						column: 30
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 98,
						column: 6
					},
					end: {
						line: 98,
						column: 16
					}
				}, {
					start: {
						line: 98,
						column: 20
					},
					end: {
						line: 98,
						column: 30
					}
				}],
				line: 98
			},
			'14': {
				loc: {
					start: {
						line: 100,
						column: 3
					},
					end: {
						line: 105,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 100,
						column: 3
					},
					end: {
						line: 105,
						column: 4
					}
				}, {
					start: {
						line: 100,
						column: 3
					},
					end: {
						line: 105,
						column: 4
					}
				}],
				line: 100
			},
			'15': {
				loc: {
					start: {
						line: 102,
						column: 5
					},
					end: {
						line: 104,
						column: 25
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 103,
						column: 7
					},
					end: {
						line: 103,
						column: 25
					}
				}, {
					start: {
						line: 104,
						column: 7
					},
					end: {
						line: 104,
						column: 25
					}
				}],
				line: 102
			},
			'16': {
				loc: {
					start: {
						line: 108,
						column: 3
					},
					end: {
						line: 113,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 108,
						column: 3
					},
					end: {
						line: 113,
						column: 4
					}
				}, {
					start: {
						line: 108,
						column: 3
					},
					end: {
						line: 113,
						column: 4
					}
				}],
				line: 108
			},
			'17': {
				loc: {
					start: {
						line: 110,
						column: 5
					},
					end: {
						line: 112,
						column: 25
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 111,
						column: 7
					},
					end: {
						line: 111,
						column: 25
					}
				}, {
					start: {
						line: 112,
						column: 7
					},
					end: {
						line: 112,
						column: 25
					}
				}],
				line: 110
			},
			'18': {
				loc: {
					start: {
						line: 116,
						column: 3
					},
					end: {
						line: 119,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 116,
						column: 3
					},
					end: {
						line: 119,
						column: 4
					}
				}, {
					start: {
						line: 116,
						column: 3
					},
					end: {
						line: 119,
						column: 4
					}
				}],
				line: 116
			},
			'19': {
				loc: {
					start: {
						line: 122,
						column: 3
					},
					end: {
						line: 127,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 122,
						column: 3
					},
					end: {
						line: 127,
						column: 4
					}
				}, {
					start: {
						line: 122,
						column: 3
					},
					end: {
						line: 127,
						column: 4
					}
				}],
				line: 122
			},
			'20': {
				loc: {
					start: {
						line: 197,
						column: 2
					},
					end: {
						line: 205,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 197,
						column: 2
					},
					end: {
						line: 205,
						column: 3
					}
				}, {
					start: {
						line: 197,
						column: 2
					},
					end: {
						line: 205,
						column: 3
					}
				}],
				line: 197
			},
			'21': {
				loc: {
					start: {
						line: 207,
						column: 2
					},
					end: {
						line: 215,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 207,
						column: 2
					},
					end: {
						line: 215,
						column: 3
					}
				}, {
					start: {
						line: 207,
						column: 2
					},
					end: {
						line: 215,
						column: 3
					}
				}],
				line: 207
			},
			'22': {
				loc: {
					start: {
						line: 217,
						column: 2
					},
					end: {
						line: 225,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 217,
						column: 2
					},
					end: {
						line: 225,
						column: 3
					}
				}, {
					start: {
						line: 217,
						column: 2
					},
					end: {
						line: 225,
						column: 3
					}
				}],
				line: 217
			},
			'23': {
				loc: {
					start: {
						line: 227,
						column: 2
					},
					end: {
						line: 235,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 227,
						column: 2
					},
					end: {
						line: 235,
						column: 3
					}
				}, {
					start: {
						line: 227,
						column: 2
					},
					end: {
						line: 235,
						column: 3
					}
				}],
				line: 227
			},
			'24': {
				loc: {
					start: {
						line: 238,
						column: 3
					},
					end: {
						line: 244,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 238,
						column: 3
					},
					end: {
						line: 244,
						column: 4
					}
				}, {
					start: {
						line: 238,
						column: 3
					},
					end: {
						line: 244,
						column: 4
					}
				}],
				line: 238
			},
			'25': {
				loc: {
					start: {
						line: 240,
						column: 8
					},
					end: {
						line: 240,
						column: 44
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 240,
						column: 21
					},
					end: {
						line: 240,
						column: 37
					}
				}, {
					start: {
						line: 240,
						column: 40
					},
					end: {
						line: 240,
						column: 44
					}
				}],
				line: 240
			},
			'26': {
				loc: {
					start: {
						line: 241,
						column: 4
					},
					end: {
						line: 243,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 241,
						column: 4
					},
					end: {
						line: 243,
						column: 5
					}
				}, {
					start: {
						line: 241,
						column: 4
					},
					end: {
						line: 243,
						column: 5
					}
				}],
				line: 241
			},
			'27': {
				loc: {
					start: {
						line: 241,
						column: 8
					},
					end: {
						line: 241,
						column: 39
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 241,
						column: 8
					},
					end: {
						line: 241,
						column: 10
					}
				}, {
					start: {
						line: 241,
						column: 14
					},
					end: {
						line: 241,
						column: 39
					}
				}],
				line: 241
			},
			'28': {
				loc: {
					start: {
						line: 265,
						column: 5
					},
					end: {
						line: 267,
						column: 29
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 266,
						column: 7
					},
					end: {
						line: 266,
						column: 29
					}
				}, {
					start: {
						line: 267,
						column: 7
					},
					end: {
						line: 267,
						column: 29
					}
				}],
				line: 265
			},
			'29': {
				loc: {
					start: {
						line: 269,
						column: 5
					},
					end: {
						line: 271,
						column: 30
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 270,
						column: 7
					},
					end: {
						line: 270,
						column: 30
					}
				}, {
					start: {
						line: 271,
						column: 7
					},
					end: {
						line: 271,
						column: 30
					}
				}],
				line: 269
			},
			'30': {
				loc: {
					start: {
						line: 279,
						column: 7
					},
					end: {
						line: 279,
						column: 43
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 279,
						column: 20
					},
					end: {
						line: 279,
						column: 36
					}
				}, {
					start: {
						line: 279,
						column: 39
					},
					end: {
						line: 279,
						column: 43
					}
				}],
				line: 279
			},
			'31': {
				loc: {
					start: {
						line: 280,
						column: 3
					},
					end: {
						line: 282,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 280,
						column: 3
					},
					end: {
						line: 282,
						column: 4
					}
				}, {
					start: {
						line: 280,
						column: 3
					},
					end: {
						line: 282,
						column: 4
					}
				}],
				line: 280
			},
			'32': {
				loc: {
					start: {
						line: 280,
						column: 7
					},
					end: {
						line: 280,
						column: 37
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 280,
						column: 7
					},
					end: {
						line: 280,
						column: 8
					}
				}, {
					start: {
						line: 280,
						column: 12
					},
					end: {
						line: 280,
						column: 37
					}
				}],
				line: 280
			},
			'33': {
				loc: {
					start: {
						line: 286,
						column: 2
					},
					end: {
						line: 325,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 286,
						column: 2
					},
					end: {
						line: 325,
						column: 3
					}
				}, {
					start: {
						line: 286,
						column: 2
					},
					end: {
						line: 325,
						column: 3
					}
				}],
				line: 286
			},
			'34': {
				loc: {
					start: {
						line: 286,
						column: 6
					},
					end: {
						line: 288,
						column: 37
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 286,
						column: 6
					},
					end: {
						line: 286,
						column: 31
					}
				}, {
					start: {
						line: 287,
						column: 4
					},
					end: {
						line: 287,
						column: 26
					}
				}, {
					start: {
						line: 288,
						column: 4
					},
					end: {
						line: 288,
						column: 37
					}
				}],
				line: 286
			},
			'35': {
				loc: {
					start: {
						line: 291,
						column: 4
					},
					end: {
						line: 293,
						column: 24
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 292,
						column: 6
					},
					end: {
						line: 292,
						column: 24
					}
				}, {
					start: {
						line: 293,
						column: 6
					},
					end: {
						line: 293,
						column: 24
					}
				}],
				line: 291
			},
			'36': {
				loc: {
					start: {
						line: 295,
						column: 3
					},
					end: {
						line: 297,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 295,
						column: 3
					},
					end: {
						line: 297,
						column: 4
					}
				}, {
					start: {
						line: 295,
						column: 3
					},
					end: {
						line: 297,
						column: 4
					}
				}],
				line: 295
			},
			'37': {
				loc: {
					start: {
						line: 300,
						column: 9
					},
					end: {
						line: 325,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 300,
						column: 9
					},
					end: {
						line: 325,
						column: 3
					}
				}, {
					start: {
						line: 300,
						column: 9
					},
					end: {
						line: 325,
						column: 3
					}
				}],
				line: 300
			},
			'38': {
				loc: {
					start: {
						line: 301,
						column: 5
					},
					end: {
						line: 301,
						column: 46
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 301,
						column: 41
					},
					end: {
						line: 301,
						column: 42
					}
				}, {
					start: {
						line: 301,
						column: 45
					},
					end: {
						line: 301,
						column: 46
					}
				}],
				line: 301
			},
			'39': {
				loc: {
					start: {
						line: 310,
						column: 8
					},
					end: {
						line: 310,
						column: 44
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 310,
						column: 21
					},
					end: {
						line: 310,
						column: 37
					}
				}, {
					start: {
						line: 310,
						column: 40
					},
					end: {
						line: 310,
						column: 44
					}
				}],
				line: 310
			},
			'40': {
				loc: {
					start: {
						line: 311,
						column: 4
					},
					end: {
						line: 323,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 311,
						column: 4
					},
					end: {
						line: 323,
						column: 5
					}
				}, {
					start: {
						line: 311,
						column: 4
					},
					end: {
						line: 323,
						column: 5
					}
				}],
				line: 311
			},
			'41': {
				loc: {
					start: {
						line: 311,
						column: 8
					},
					end: {
						line: 315,
						column: 37
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 311,
						column: 8
					},
					end: {
						line: 311,
						column: 9
					}
				}, {
					start: {
						line: 312,
						column: 6
					},
					end: {
						line: 312,
						column: 31
					}
				}, {
					start: {
						line: 313,
						column: 6
					},
					end: {
						line: 313,
						column: 31
					}
				}, {
					start: {
						line: 314,
						column: 6
					},
					end: {
						line: 314,
						column: 23
					}
				}, {
					start: {
						line: 315,
						column: 6
					},
					end: {
						line: 315,
						column: 37
					}
				}],
				line: 311
			},
			'42': {
				loc: {
					start: {
						line: 320,
						column: 7
					},
					end: {
						line: 322,
						column: 27
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 321,
						column: 9
					},
					end: {
						line: 321,
						column: 27
					}
				}, {
					start: {
						line: 322,
						column: 9
					},
					end: {
						line: 322,
						column: 27
					}
				}],
				line: 320
			}
		},
		s: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0,
			'35': 0,
			'36': 0,
			'37': 0,
			'38': 0,
			'39': 0,
			'40': 0,
			'41': 0,
			'42': 0,
			'43': 0,
			'44': 0,
			'45': 0,
			'46': 0,
			'47': 0,
			'48': 0,
			'49': 0,
			'50': 0,
			'51': 0,
			'52': 0,
			'53': 0,
			'54': 0,
			'55': 0,
			'56': 0,
			'57': 0,
			'58': 0,
			'59': 0,
			'60': 0,
			'61': 0,
			'62': 0,
			'63': 0,
			'64': 0,
			'65': 0,
			'66': 0,
			'67': 0,
			'68': 0,
			'69': 0,
			'70': 0,
			'71': 0,
			'72': 0,
			'73': 0,
			'74': 0,
			'75': 0,
			'76': 0,
			'77': 0,
			'78': 0,
			'79': 0,
			'80': 0,
			'81': 0,
			'82': 0,
			'83': 0,
			'84': 0,
			'85': 0,
			'86': 0,
			'87': 0,
			'88': 0,
			'89': 0,
			'90': 0,
			'91': 0,
			'92': 0,
			'93': 0,
			'94': 0,
			'95': 0,
			'96': 0,
			'97': 0,
			'98': 0,
			'99': 0,
			'100': 0,
			'101': 0,
			'102': 0,
			'103': 0,
			'104': 0,
			'105': 0,
			'106': 0,
			'107': 0,
			'108': 0,
			'109': 0,
			'110': 0,
			'111': 0,
			'112': 0,
			'113': 0,
			'114': 0,
			'115': 0,
			'116': 0,
			'117': 0,
			'118': 0,
			'119': 0,
			'120': 0,
			'121': 0,
			'122': 0,
			'123': 0,
			'124': 0,
			'125': 0,
			'126': 0
		},
		f: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0
		},
		b: {
			'0': [0, 0, 0, 0, 0, 0, 0],
			'1': [0, 0],
			'2': [0, 0],
			'3': [0, 0],
			'4': [0, 0],
			'5': [0, 0, 0],
			'6': [0, 0],
			'7': [0, 0],
			'8': [0, 0],
			'9': [0, 0],
			'10': [0, 0],
			'11': [0, 0],
			'12': [0, 0],
			'13': [0, 0],
			'14': [0, 0],
			'15': [0, 0],
			'16': [0, 0],
			'17': [0, 0],
			'18': [0, 0],
			'19': [0, 0],
			'20': [0, 0],
			'21': [0, 0],
			'22': [0, 0],
			'23': [0, 0],
			'24': [0, 0],
			'25': [0, 0],
			'26': [0, 0],
			'27': [0, 0],
			'28': [0, 0],
			'29': [0, 0],
			'30': [0, 0],
			'31': [0, 0],
			'32': [0, 0],
			'33': [0, 0],
			'34': [0, 0, 0],
			'35': [0, 0],
			'36': [0, 0],
			'37': [0, 0],
			'38': [0, 0],
			'39': [0, 0],
			'40': [0, 0],
			'41': [0, 0, 0, 0, 0],
			'42': [0, 0]
		},
		_coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	},
	    coverage = global[gcv] || (global[gcv] = {});

	if (coverage[path] && coverage[path].hash === hash) {
		return coverage[path];
	}

	coverageData.hash = hash;
	return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.RookValidation = exports.QueenValidation = exports.PawnValidation = exports.KnightValidation = exports.KingValidation = exports.BishopValidation = exports.PieceValidation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	The general idea behind PieceValidation is to examine an individual piece
	and determine (with the information available from about that single piece)
	what move options are available for that piece.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     	The PieceValidation doesn't alter any properties of the piece, the board
	or any squares. Additionally, the PieceValidation is suitable for 1 phase of
	the evaluation of viable move options for a piece... the BoardValidation
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     	component handles the overall evaluation of what moves are possible for the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     	board in its current state.


var _board = require('./board');

var _piece = require('./piece');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PieceValidation = exports.PieceValidation = function () {
	function PieceValidation(board) {
		_classCallCheck(this, PieceValidation);

		cov_pnuidul9s.f[0]++;
		cov_pnuidul9s.s[0]++;

		this.allowBackward = false;
		cov_pnuidul9s.s[1]++;
		this.allowDiagonal = false;
		cov_pnuidul9s.s[2]++;
		this.allowForward = false;
		cov_pnuidul9s.s[3]++;
		this.allowHorizontal = false;
		cov_pnuidul9s.s[4]++;
		this.board = board;
		cov_pnuidul9s.s[5]++;
		this.type = null;
		cov_pnuidul9s.s[6]++;
		this.repeat = 0;
	}

	_createClass(PieceValidation, [{
		key: 'applySpecialValidation',
		value: function applySpecialValidation() {
			// do nothing...
			// overridden in the concrete validation classes
			// where special logic is required

			cov_pnuidul9s.f[1]++;
		}
	}, {
		key: 'start',
		value: function start(src, callback) {
			cov_pnuidul9s.f[3]++;
			cov_pnuidul9s.s[15]++;

			// ensure callback is set
			callback = (cov_pnuidul9s.b[1][0]++, callback) || (cov_pnuidul9s.b[1][1]++, function (err, destinationSquares) {
				cov_pnuidul9s.f[4]++;
				cov_pnuidul9s.s[16]++;
				return new Promise(function (resolve, reject) {
					cov_pnuidul9s.f[5]++;
					cov_pnuidul9s.s[17]++;

					if (err) {
						cov_pnuidul9s.b[2][0]++;
						cov_pnuidul9s.s[18]++;

						return reject(err);
					} else {
						cov_pnuidul9s.b[2][1]++;
					}

					cov_pnuidul9s.s[19]++;
					return resolve(destinationSquares);
				});
			});

			cov_pnuidul9s.s[21]++;
			var opt = (cov_pnuidul9s.s[20]++, {
				destSquares: [],
				piece: src ? (cov_pnuidul9s.b[3][0]++, src.piece) : (cov_pnuidul9s.b[3][1]++, null),
				origin: src
			}),
			    findMoveOptions = function findMoveOptions(b, r, n) {
				cov_pnuidul9s.f[6]++;

				var block = (cov_pnuidul9s.s[22]++, false),
				    capture = (cov_pnuidul9s.s[23]++, false),
				    currentSquare = (cov_pnuidul9s.s[24]++, b.getNeighborSquare(opt.origin, n)),
				    i = (cov_pnuidul9s.s[25]++, 0);

				cov_pnuidul9s.s[26]++;
				while ((cov_pnuidul9s.b[4][0]++, currentSquare) && (cov_pnuidul9s.b[4][1]++, i < r)) {
					cov_pnuidul9s.s[27]++;

					block = (cov_pnuidul9s.b[5][0]++, currentSquare.piece !== null) && ((cov_pnuidul9s.b[5][1]++, opt.piece.type === _piece.PieceType.Pawn) || (cov_pnuidul9s.b[5][2]++, currentSquare.piece.side === opt.piece.side));
					cov_pnuidul9s.s[28]++;
					capture = (cov_pnuidul9s.b[6][0]++, currentSquare.piece) && (cov_pnuidul9s.b[6][1]++, !block);

					cov_pnuidul9s.s[29]++;
					if (!block) {
						cov_pnuidul9s.b[7][0]++;
						cov_pnuidul9s.s[30]++;

						opt.destSquares.push(currentSquare);
					} else {
						cov_pnuidul9s.b[7][1]++;
					}

					cov_pnuidul9s.s[31]++;
					if ((cov_pnuidul9s.b[9][0]++, capture) || (cov_pnuidul9s.b[9][1]++, block)) {
						cov_pnuidul9s.b[8][0]++;
						cov_pnuidul9s.s[32]++;

						currentSquare = null;
					} else {
						cov_pnuidul9s.b[8][1]++;
						cov_pnuidul9s.s[33]++;

						currentSquare = b.getNeighborSquare(currentSquare, n);
						cov_pnuidul9s.s[34]++;
						i++;
					}
				}
			};

			cov_pnuidul9s.s[35]++;
			if ((cov_pnuidul9s.b[11][0]++, !opt.piece) || (cov_pnuidul9s.b[11][1]++, opt.piece.type !== this.type)) {
				cov_pnuidul9s.b[10][0]++;
				cov_pnuidul9s.s[36]++;

				return callback(new Error('piece is invalid'));
			} else {
				cov_pnuidul9s.b[10][1]++;
			}

			cov_pnuidul9s.s[37]++;
			if ((cov_pnuidul9s.b[13][0]++, this.board) && (cov_pnuidul9s.b[13][1]++, opt.origin)) {
				cov_pnuidul9s.b[12][0]++;
				cov_pnuidul9s.s[38]++;

				// forward squares
				if (this.allowForward) {
					cov_pnuidul9s.b[14][0]++;
					cov_pnuidul9s.s[39]++;

					findMoveOptions(this.board, this.repeat, opt.piece.side === _piece.SideType.White ? (cov_pnuidul9s.b[15][0]++, _board.NeighborType.Above) : (cov_pnuidul9s.b[15][1]++, _board.NeighborType.Below));
				} else {
					cov_pnuidul9s.b[14][1]++;
				}

				// backward squares
				cov_pnuidul9s.s[40]++;
				if (this.allowBackward) {
					cov_pnuidul9s.b[16][0]++;
					cov_pnuidul9s.s[41]++;

					findMoveOptions(this.board, this.repeat, opt.piece.side === _piece.SideType.White ? (cov_pnuidul9s.b[17][0]++, _board.NeighborType.Below) : (cov_pnuidul9s.b[17][1]++, _board.NeighborType.Above));
				} else {
					cov_pnuidul9s.b[16][1]++;
				}

				// horizontal squares
				cov_pnuidul9s.s[42]++;
				if (this.allowHorizontal) {
					cov_pnuidul9s.b[18][0]++;
					cov_pnuidul9s.s[43]++;

					findMoveOptions(this.board, this.repeat, _board.NeighborType.Left);
					cov_pnuidul9s.s[44]++;
					findMoveOptions(this.board, this.repeat, _board.NeighborType.Right);
				} else {
					cov_pnuidul9s.b[18][1]++;
				}

				// diagonal squares
				cov_pnuidul9s.s[45]++;
				if (this.allowDiagonal) {
					cov_pnuidul9s.b[19][0]++;
					cov_pnuidul9s.s[46]++;

					findMoveOptions(this.board, this.repeat, _board.NeighborType.AboveLeft);
					cov_pnuidul9s.s[47]++;
					findMoveOptions(this.board, this.repeat, _board.NeighborType.BelowRight);
					cov_pnuidul9s.s[48]++;
					findMoveOptions(this.board, this.repeat, _board.NeighborType.BelowLeft);
					cov_pnuidul9s.s[49]++;
					findMoveOptions(this.board, this.repeat, _board.NeighborType.AboveRight);
				} else {
					cov_pnuidul9s.b[19][1]++;
				}

				// apply additional validation logic
				cov_pnuidul9s.s[50]++;
				this.applySpecialValidation(opt);
			} else {
				cov_pnuidul9s.b[12][1]++;
				cov_pnuidul9s.s[51]++;

				return callback(new Error('board is invalid'));
			}

			// callback
			cov_pnuidul9s.s[52]++;
			return callback(null, opt.destSquares);
		}
	}], [{
		key: 'create',
		value: function create(piece, board) {
			cov_pnuidul9s.f[2]++;
			cov_pnuidul9s.s[7]++;

			switch (piece) {
				case _piece.PieceType.Bishop:
					cov_pnuidul9s.b[0][0]++;
					cov_pnuidul9s.s[8]++;

					return new BishopValidation(board);
				case _piece.PieceType.King:
					cov_pnuidul9s.b[0][1]++;
					cov_pnuidul9s.s[9]++;

					return new KingValidation(board);
				case _piece.PieceType.Knight:
					cov_pnuidul9s.b[0][2]++;
					cov_pnuidul9s.s[10]++;

					return new KnightValidation(board);
				case _piece.PieceType.Pawn:
					cov_pnuidul9s.b[0][3]++;
					cov_pnuidul9s.s[11]++;

					return new PawnValidation(board);
				case _piece.PieceType.Queen:
					cov_pnuidul9s.b[0][4]++;
					cov_pnuidul9s.s[12]++;

					return new QueenValidation(board);
				case _piece.PieceType.Rook:
					cov_pnuidul9s.b[0][5]++;
					cov_pnuidul9s.s[13]++;

					return new RookValidation(board);
				default:
					cov_pnuidul9s.b[0][6]++;
					cov_pnuidul9s.s[14]++;

					return null;
			}
		}
	}]);

	return PieceValidation;
}();

var BishopValidation = exports.BishopValidation = function (_ref) {
	_inherits(BishopValidation, _ref);

	function BishopValidation(board) {
		_classCallCheck(this, BishopValidation);

		cov_pnuidul9s.f[7]++;
		cov_pnuidul9s.s[53]++;

		// base validation properties
		var _this = _possibleConstructorReturn(this, (BishopValidation.__proto__ || Object.getPrototypeOf(BishopValidation)).call(this, board));

		cov_pnuidul9s.s[54]++;
		_this.allowDiagonal = true;
		cov_pnuidul9s.s[55]++;
		_this.type = _piece.PieceType.Bishop;
		cov_pnuidul9s.s[56]++;
		_this.repeat = 8;
		return _this;
	}

	return BishopValidation;
}((PieceValidation));

var KingValidation = exports.KingValidation = function (_ref2) {
	_inherits(KingValidation, _ref2);

	function KingValidation(board) {
		_classCallCheck(this, KingValidation);

		cov_pnuidul9s.f[8]++;
		cov_pnuidul9s.s[57]++;

		// base validation properties
		var _this2 = _possibleConstructorReturn(this, (KingValidation.__proto__ || Object.getPrototypeOf(KingValidation)).call(this, board));

		cov_pnuidul9s.s[58]++;
		_this2.allowBackward = true;
		cov_pnuidul9s.s[59]++;
		_this2.allowDiagonal = true;
		cov_pnuidul9s.s[60]++;
		_this2.allowForward = true;
		cov_pnuidul9s.s[61]++;
		_this2.allowHorizontal = true;
		cov_pnuidul9s.s[62]++;
		_this2.type = _piece.PieceType.King;
		cov_pnuidul9s.s[63]++;
		_this2.repeat = 1;
		return _this2;
	}

	_createClass(KingValidation, [{
		key: 'applySpecialValidation',
		value: function applySpecialValidation() {
			// check for castle?

			cov_pnuidul9s.f[9]++;
		}
	}]);

	return KingValidation;
}((PieceValidation));

var KnightValidation = exports.KnightValidation = function (_ref3) {
	_inherits(KnightValidation, _ref3);

	function KnightValidation(board) {
		_classCallCheck(this, KnightValidation);

		cov_pnuidul9s.f[10]++;
		cov_pnuidul9s.s[64]++;

		// base validation properties
		var _this3 = _possibleConstructorReturn(this, (KnightValidation.__proto__ || Object.getPrototypeOf(KnightValidation)).call(this, board));

		cov_pnuidul9s.s[65]++;
		_this3.type = _piece.PieceType.Knight;
		cov_pnuidul9s.s[66]++;
		_this3.repeat = 1;
		return _this3;
	}

	_createClass(KnightValidation, [{
		key: 'applySpecialValidation',
		value: function applySpecialValidation(opt) {
			cov_pnuidul9s.f[11]++;

			// add knight move options
			var aboveLeft = (cov_pnuidul9s.s[67]++, this.board.getNeighborSquare(opt.origin, _board.NeighborType.AboveLeft)),
			    aboveRight = (cov_pnuidul9s.s[68]++, this.board.getNeighborSquare(opt.origin, _board.NeighborType.AboveRight)),
			    belowLeft = (cov_pnuidul9s.s[69]++, this.board.getNeighborSquare(opt.origin, _board.NeighborType.BelowLeft)),
			    belowRight = (cov_pnuidul9s.s[70]++, this.board.getNeighborSquare(opt.origin, _board.NeighborType.BelowRight)),
			    squares = (cov_pnuidul9s.s[71]++, []),
			    i = (cov_pnuidul9s.s[72]++, 0),
			    p = (cov_pnuidul9s.s[73]++, null);

			cov_pnuidul9s.s[74]++;
			if (aboveLeft) {
				cov_pnuidul9s.b[20][0]++;
				cov_pnuidul9s.s[75]++;

				squares.push(this.board.getNeighborSquare(aboveLeft, _board.NeighborType.Above));

				cov_pnuidul9s.s[76]++;
				squares.push(this.board.getNeighborSquare(aboveLeft, _board.NeighborType.Left));
			} else {
				cov_pnuidul9s.b[20][1]++;
			}

			cov_pnuidul9s.s[77]++;
			if (aboveRight) {
				cov_pnuidul9s.b[21][0]++;
				cov_pnuidul9s.s[78]++;

				squares.push(this.board.getNeighborSquare(aboveRight, _board.NeighborType.Above));

				cov_pnuidul9s.s[79]++;
				squares.push(this.board.getNeighborSquare(aboveRight, _board.NeighborType.Right));
			} else {
				cov_pnuidul9s.b[21][1]++;
			}

			cov_pnuidul9s.s[80]++;
			if (belowLeft) {
				cov_pnuidul9s.b[22][0]++;
				cov_pnuidul9s.s[81]++;

				squares.push(this.board.getNeighborSquare(belowLeft, _board.NeighborType.Below));

				cov_pnuidul9s.s[82]++;
				squares.push(this.board.getNeighborSquare(belowLeft, _board.NeighborType.Left));
			} else {
				cov_pnuidul9s.b[22][1]++;
			}

			cov_pnuidul9s.s[83]++;
			if (belowRight) {
				cov_pnuidul9s.b[23][0]++;
				cov_pnuidul9s.s[84]++;

				squares.push(this.board.getNeighborSquare(belowRight, _board.NeighborType.Below));

				cov_pnuidul9s.s[85]++;
				squares.push(this.board.getNeighborSquare(belowRight, _board.NeighborType.Right));
			} else {
				cov_pnuidul9s.b[23][1]++;
			}

			cov_pnuidul9s.s[86]++;
			for (i = 0; i < squares.length; i++) {
				cov_pnuidul9s.s[87]++;

				if (squares[i]) {
					cov_pnuidul9s.b[24][0]++;
					cov_pnuidul9s.s[88]++;

					// check for enemy piece on square
					p = squares[i] ? (cov_pnuidul9s.b[25][0]++, squares[i].piece) : (cov_pnuidul9s.b[25][1]++, null);
					cov_pnuidul9s.s[89]++;
					if ((cov_pnuidul9s.b[27][0]++, !p) || (cov_pnuidul9s.b[27][1]++, p.side !== opt.piece.side)) {
						cov_pnuidul9s.b[26][0]++;
						cov_pnuidul9s.s[90]++;

						opt.destSquares.push(squares[i]);
					} else {
						cov_pnuidul9s.b[26][1]++;
					}
				} else {
					cov_pnuidul9s.b[24][1]++;
				}
			}
		}
	}]);

	return KnightValidation;
}((PieceValidation));

var PawnValidation = exports.PawnValidation = function (_ref4) {
	_inherits(PawnValidation, _ref4);

	function PawnValidation(board) {
		_classCallCheck(this, PawnValidation);

		cov_pnuidul9s.f[12]++;
		cov_pnuidul9s.s[91]++;

		// base validation properties
		var _this4 = _possibleConstructorReturn(this, (PawnValidation.__proto__ || Object.getPrototypeOf(PawnValidation)).call(this, board));

		cov_pnuidul9s.s[92]++;
		_this4.allowForward = true;
		cov_pnuidul9s.s[93]++;
		_this4.type = _piece.PieceType.Pawn;
		cov_pnuidul9s.s[94]++;
		_this4.repeat = 1;
		return _this4;
	}

	/* eslint no-magic-numbers:0 */


	_createClass(PawnValidation, [{
		key: 'applySpecialValidation',
		value: function applySpecialValidation(opt) {
			cov_pnuidul9s.f[13]++;

			// check for capture
			var squares = (cov_pnuidul9s.s[95]++, [this.board.getNeighborSquare(opt.origin, opt.piece.side === _piece.SideType.White ? (cov_pnuidul9s.b[28][0]++, _board.NeighborType.AboveLeft) : (cov_pnuidul9s.b[28][1]++, _board.NeighborType.BelowLeft)), this.board.getNeighborSquare(opt.origin, opt.piece.side === _piece.SideType.White ? (cov_pnuidul9s.b[29][0]++, _board.NeighborType.AboveRight) : (cov_pnuidul9s.b[29][1]++, _board.NeighborType.BelowRight))]),
			    i = (cov_pnuidul9s.s[96]++, 0),
			    sq = (cov_pnuidul9s.s[97]++, null),
			    p = (cov_pnuidul9s.s[98]++, null);

			// check for capture
			cov_pnuidul9s.s[99]++;
			for (i = 0; i < squares.length; i++) {
				cov_pnuidul9s.s[100]++;

				// check for enemy piece on square
				p = squares[i] ? (cov_pnuidul9s.b[30][0]++, squares[i].piece) : (cov_pnuidul9s.b[30][1]++, null);
				cov_pnuidul9s.s[101]++;
				if ((cov_pnuidul9s.b[32][0]++, p) && (cov_pnuidul9s.b[32][1]++, p.side !== opt.piece.side)) {
					cov_pnuidul9s.b[31][0]++;
					cov_pnuidul9s.s[102]++;

					opt.destSquares.push(squares[i]);
				} else {
					cov_pnuidul9s.b[31][1]++;
				}
			}

			// check for double square first move
			cov_pnuidul9s.s[103]++;
			if ((cov_pnuidul9s.b[34][0]++, opt.piece.moveCount === 0) && (cov_pnuidul9s.b[34][1]++, opt.destSquares.length) && (cov_pnuidul9s.b[34][2]++, // Fix for issue #15 (originally looked for length of 1)
			opt.destSquares[0].piece === null)) {
				cov_pnuidul9s.b[33][0]++;
				cov_pnuidul9s.s[104]++;
				// Fix for issue #1
				sq = this.board.getNeighborSquare(opt.destSquares[0], opt.piece.side === _piece.SideType.White ? (cov_pnuidul9s.b[35][0]++, _board.NeighborType.Above) : (cov_pnuidul9s.b[35][1]++, _board.NeighborType.Below));

				cov_pnuidul9s.s[105]++;
				if (!sq.piece) {
					cov_pnuidul9s.b[36][0]++;
					cov_pnuidul9s.s[106]++;

					opt.destSquares.push(sq);
				} else {
					cov_pnuidul9s.b[36][1]++;
				}

				// check for en passant
			} else {
					cov_pnuidul9s.b[33][1]++;
					cov_pnuidul9s.s[107]++;
					if (opt.origin.rank === (opt.piece.side === _piece.SideType.White ? (cov_pnuidul9s.b[38][0]++, 5) : (cov_pnuidul9s.b[38][1]++, 4))) {
						cov_pnuidul9s.b[37][0]++;
						cov_pnuidul9s.s[108]++;

						// get squares left & right of pawn
						squares = [this.board.getNeighborSquare(opt.origin, _board.NeighborType.Left), this.board.getNeighborSquare(opt.origin, _board.NeighborType.Right)];
						cov_pnuidul9s.s[109]++;
						i = 0;

						cov_pnuidul9s.s[110]++;
						for (i = 0; i < squares.length; i++) {
							cov_pnuidul9s.s[111]++;

							// check for pawn on square
							p = squares[i] ? (cov_pnuidul9s.b[39][0]++, squares[i].piece) : (cov_pnuidul9s.b[39][1]++, null);
							cov_pnuidul9s.s[112]++;
							if ((cov_pnuidul9s.b[41][0]++, p) && (cov_pnuidul9s.b[41][1]++, p.type === _piece.PieceType.Pawn) && (cov_pnuidul9s.b[41][2]++, p.side !== opt.piece.side) && (cov_pnuidul9s.b[41][3]++, p.moveCount === 1) && (cov_pnuidul9s.b[41][4]++, this.board.lastMovedPiece === p)) {
								cov_pnuidul9s.b[40][0]++;
								cov_pnuidul9s.s[113]++;


								opt.destSquares.push(this.board.getNeighborSquare(squares[i], p.side === _piece.SideType.Black ? (cov_pnuidul9s.b[42][0]++, _board.NeighborType.Above) : (cov_pnuidul9s.b[42][1]++, _board.NeighborType.Below)));
							} else {
								cov_pnuidul9s.b[40][1]++;
							}
						}
					} else {
						cov_pnuidul9s.b[37][1]++;
					}
				}
		}
	}]);

	return PawnValidation;
}((PieceValidation));

var QueenValidation = exports.QueenValidation = function (_ref5) {
	_inherits(QueenValidation, _ref5);

	function QueenValidation(board) {
		_classCallCheck(this, QueenValidation);

		cov_pnuidul9s.f[14]++;
		cov_pnuidul9s.s[114]++;

		// base validation properties
		var _this5 = _possibleConstructorReturn(this, (QueenValidation.__proto__ || Object.getPrototypeOf(QueenValidation)).call(this, board));

		cov_pnuidul9s.s[115]++;
		_this5.allowBackward = true;
		cov_pnuidul9s.s[116]++;
		_this5.allowDiagonal = true;
		cov_pnuidul9s.s[117]++;
		_this5.allowForward = true;
		cov_pnuidul9s.s[118]++;
		_this5.allowHorizontal = true;
		cov_pnuidul9s.s[119]++;
		_this5.type = _piece.PieceType.Queen;
		cov_pnuidul9s.s[120]++;
		_this5.repeat = 8;
		return _this5;
	}

	return QueenValidation;
}((PieceValidation));

var RookValidation = exports.RookValidation = function (_ref6) {
	_inherits(RookValidation, _ref6);

	function RookValidation(board) {
		_classCallCheck(this, RookValidation);

		cov_pnuidul9s.f[15]++;
		cov_pnuidul9s.s[121]++;

		// base validation properties
		var _this6 = _possibleConstructorReturn(this, (RookValidation.__proto__ || Object.getPrototypeOf(RookValidation)).call(this, board));

		cov_pnuidul9s.s[122]++;
		_this6.allowBackward = true;
		cov_pnuidul9s.s[123]++;
		_this6.allowForward = true;
		cov_pnuidul9s.s[124]++;
		_this6.allowHorizontal = true;
		cov_pnuidul9s.s[125]++;
		_this6.type = _piece.PieceType.Rook;
		cov_pnuidul9s.s[126]++;
		_this6.repeat = 8;
		return _this6;
	}

	return RookValidation;
}((PieceValidation));

exports.default = { PieceValidation: PieceValidation };
//# sourceMappingURL=pieceValidation.js.map
