{"version":3,"sources":["gameValidation.js"],"names":["GameValidation","game","side","i","squares","board","getSquares","length","piece","type","King","hash","hashCount","moveHistory","hashCode","callback","err","result","Promise","resolve","reject","kingSquare","isCheck","isCheckmate","isFiftyMoveDraw","isStalemate","isRepetition","validMoves","setResult","v","isKingAttacked","create","findKingSquare","getCurrentSide","start","isSquareAttacked","Error"],"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","file":"gameValidation.js","sourcesContent":["/**\n\tGameValidation is the 3rd phase of validation for the game\n\tand is intended to support Game level events. Examples of Game\n\tscope validation include Check, Checkmate, 3-fold position\n\trepetition and pawn promotion.\n*/\n\nimport { BoardValidation } from './boardValidation';\nimport { PieceType } from './piece';\n\nexport class GameValidation {\n\tconstructor (game) {\n\t\tthis.game = game;\n\t}\n\n\tstatic create (game) {\n\t\treturn new GameValidation(game);\n\t}\n\n\tfindKingSquare (side) {\n\t\tlet\n\t\t\ti = 0,\n\t\t\tsquares = this.game.board.getSquares(side);\n\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\tif (squares[i].piece.type === PieceType.King) {\n\t\t\t\treturn squares[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tisRepetition () {\n\t\tlet\n\t\t\thash = '',\n\t\t\thashCount = [],\n\t\t\ti = 0;\n\n\t\t// analyze 3-fold repetition (draw)\n\t\tfor (i = 0; i < this.game.moveHistory.length; i++) {\n\t\t\thash = this.game.moveHistory[i].hashCode;\n\t\t\thashCount[hash] = hashCount[hash] ? hashCount[hash] + 1 : 1;\n\n\t\t\t/* eslint no-magic-numbers: 0 */\n\t\t\tif (hashCount[hash] === 3) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tstart (callback) {\n\t\t// ensure callback is set\n\t\tcallback = callback || ((err, result) => new Promise((resolve, reject) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(result);\n\t\t}));\n\n\t\tlet\n\t\t\tkingSquare = null,\n\t\t\tresult = {\n\t\t\t\tisCheck : false,\n\t\t\t\tisCheckmate : false,\n\t\t\t\tisFiftyMoveDraw : false,\n\t\t\t\tisStalemate : false,\n\t\t\t\tisRepetition : false,\n\t\t\t\tvalidMoves : []\n\t\t\t},\n\t\t\tsetResult = function (v, result, isKingAttacked) {\n\t\t\t\treturn function (err, validMoves) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.isCheck = isKingAttacked && validMoves.length > 0;\n\t\t\t\t\tresult.isCheckmate = isKingAttacked && validMoves.length === 0;\n\t\t\t\t\tresult.isStalemate = !isKingAttacked && validMoves.length === 0;\n\t\t\t\t\tresult.isRepetition = v.isRepetition();\n\t\t\t\t\tresult.validMoves = validMoves;\n\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t};\n\t\t\t},\n\t\t\tv = BoardValidation.create(this.game);\n\n\t\tif (this.game) {\n\t\t\t// find current side king square\n\t\t\tkingSquare = this.findKingSquare(this.game.getCurrentSide());\n\n\t\t\t// find valid moves\n\t\t\treturn v.start(setResult(this, result, v.isSquareAttacked(kingSquare)));\n\t\t} else {\n\t\t\treturn callback(new Error('game is invalid'));\n\t\t}\n\t}\n}\n\nexport default { GameValidation };\n"]}