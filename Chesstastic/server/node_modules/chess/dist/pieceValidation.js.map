{"version":3,"sources":["pieceValidation.js"],"names":["PieceValidation","board","allowBackward","allowDiagonal","allowForward","allowHorizontal","type","repeat","src","callback","err","destinationSquares","Promise","resolve","reject","opt","destSquares","piece","origin","findMoveOptions","b","r","n","block","capture","currentSquare","getNeighborSquare","i","Pawn","side","push","Error","White","Above","Below","Left","Right","AboveLeft","BelowRight","BelowLeft","AboveRight","applySpecialValidation","Bishop","BishopValidation","King","KingValidation","Knight","KnightValidation","PawnValidation","Queen","QueenValidation","Rook","RookValidation","aboveLeft","aboveRight","belowLeft","belowRight","squares","p","length","sq","moveCount","rank","lastMovedPiece","Black"],"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","file":"pieceValidation.js","sourcesContent":["/**\n\tThe general idea behind PieceValidation is to examine an individual piece\n\tand determine (with the information available from about that single piece)\n\twhat move options are available for that piece.\n\n\tThe PieceValidation doesn't alter any properties of the piece, the board\n\tor any squares. Additionally, the PieceValidation is suitable for 1 phase of\n\tthe evaluation of viable move options for a piece... the BoardValidation\n\tcomponent handles the overall evaluation of what moves are possible for the\n\tboard in its current state.\n*/\n\nimport { NeighborType } from './board';\nimport { PieceType, SideType } from './piece';\n\nexport class PieceValidation {\n\tconstructor (board) {\n\t\tthis.allowBackward = false;\n\t\tthis.allowDiagonal = false;\n\t\tthis.allowForward = false;\n\t\tthis.allowHorizontal = false;\n\t\tthis.board = board;\n\t\tthis.type = null;\n\t\tthis.repeat = 0;\n\t}\n\n\tapplySpecialValidation () {\n\t\t// do nothing...\n\t\t// overridden in the concrete validation classes\n\t\t// where special logic is required\n\t}\n\n\tstatic create (piece, board) {\n\t\tswitch (piece) {\n\t\t\tcase PieceType.Bishop:\n\t\t\t\treturn new BishopValidation(board);\n\t\t\tcase PieceType.King:\n\t\t\t\treturn new KingValidation(board);\n\t\t\tcase PieceType.Knight:\n\t\t\t\treturn new KnightValidation(board);\n\t\t\tcase PieceType.Pawn:\n\t\t\t\treturn new PawnValidation(board);\n\t\t\tcase PieceType.Queen:\n\t\t\t\treturn new QueenValidation(board);\n\t\t\tcase PieceType.Rook:\n\t\t\t\treturn new RookValidation(board);\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tstart (src, callback) {\n\t\t// ensure callback is set\n\t\tcallback = callback || ((err, destinationSquares) => new Promise((resolve, reject) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(destinationSquares);\n\t\t}));\n\n\t\tlet\n\t\t\topt = {\n\t\t\t\tdestSquares : [],\n\t\t\t\tpiece : src ? src.piece : null,\n\t\t\t\torigin : src\n\t\t\t},\n\t\t\tfindMoveOptions = function (b, r, n) {\n\t\t\t\tlet\n\t\t\t\t\tblock = false,\n\t\t\t\t\tcapture = false,\n\t\t\t\t\tcurrentSquare = b.getNeighborSquare(opt.origin, n),\n\t\t\t\t\ti = 0;\n\n\t\t\t\twhile (currentSquare && i < r) {\n\t\t\t\t\tblock = currentSquare.piece !== null &&\n\t\t\t\t\t\t(opt.piece.type === PieceType.Pawn ||\n\t\t\t\t\t\t\tcurrentSquare.piece.side === opt.piece.side);\n\t\t\t\t\tcapture = (currentSquare.piece && !block);\n\n\t\t\t\t\tif (!block) {\n\t\t\t\t\t\topt.destSquares.push(currentSquare);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (capture || block) {\n\t\t\t\t\t\tcurrentSquare = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentSquare = b.getNeighborSquare(currentSquare, n);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\tif (!opt.piece || opt.piece.type !== this.type) {\n\t\t\treturn callback(new Error('piece is invalid'));\n\t\t}\n\n\t\tif (this.board && opt.origin) {\n\t\t\t// forward squares\n\t\t\tif (this.allowForward) {\n\t\t\t\tfindMoveOptions(this.board, this.repeat,\n\t\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\t\tNeighborType.Above :\n\t\t\t\t\t\t\tNeighborType.Below);\n\t\t\t}\n\n\t\t\t// backward squares\n\t\t\tif (this.allowBackward) {\n\t\t\t\tfindMoveOptions(this.board, this.repeat,\n\t\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\t\tNeighborType.Below :\n\t\t\t\t\t\t\tNeighborType.Above);\n\t\t\t}\n\n\t\t\t// horizontal squares\n\t\t\tif (this.allowHorizontal) {\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.Left);\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.Right);\n\t\t\t}\n\n\t\t\t// diagonal squares\n\t\t\tif (this.allowDiagonal) {\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.AboveLeft);\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.BelowRight);\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.BelowLeft);\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.AboveRight);\n\t\t\t}\n\n\t\t\t// apply additional validation logic\n\t\t\tthis.applySpecialValidation(opt);\n\t\t} else {\n\t\t\treturn callback(new Error('board is invalid'));\n\t\t}\n\n\t\t// callback\n\t\treturn callback(null, opt.destSquares);\n\t}\n}\n\nexport class BishopValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowDiagonal = true;\n\t\tthis.type = PieceType.Bishop;\n\t\tthis.repeat = 8;\n\t}\n}\n\nexport class KingValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowBackward = true;\n\t\tthis.allowDiagonal = true;\n\t\tthis.allowForward = true;\n\t\tthis.allowHorizontal = true;\n\t\tthis.type = PieceType.King;\n\t\tthis.repeat = 1;\n\t}\n\n\tapplySpecialValidation () {\n\t\t// check for castle?\n\t}\n}\n\nexport class KnightValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.type = PieceType.Knight;\n\t\tthis.repeat = 1;\n\t}\n\n\tapplySpecialValidation (opt) {\n\t\t// add knight move options\n\t\tlet\n\t\t\taboveLeft = this.board.getNeighborSquare(\n\t\t\t\topt.origin,\n\t\t\t\tNeighborType.AboveLeft),\n\t\t\taboveRight = this.board.getNeighborSquare(\n\t\t\t\topt.origin,\n\t\t\t\tNeighborType.AboveRight),\n\t\t\tbelowLeft = this.board.getNeighborSquare(\n\t\t\t\topt.origin,\n\t\t\t\tNeighborType.BelowLeft),\n\t\t\tbelowRight = this.board.getNeighborSquare(\n\t\t\t\topt.origin,\n\t\t\t\tNeighborType.BelowRight),\n\t\t\tsquares = [],\n\t\t\ti = 0,\n\t\t\tp = null;\n\n\t\tif (aboveLeft) {\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\taboveLeft,\n\t\t\t\tNeighborType.Above));\n\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\taboveLeft,\n\t\t\t\tNeighborType.Left));\n\t\t}\n\n\t\tif (aboveRight) {\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\taboveRight,\n\t\t\t\tNeighborType.Above));\n\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\taboveRight,\n\t\t\t\tNeighborType.Right));\n\t\t}\n\n\t\tif (belowLeft) {\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\tbelowLeft,\n\t\t\t\tNeighborType.Below));\n\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\tbelowLeft,\n\t\t\t\tNeighborType.Left));\n\t\t}\n\n\t\tif (belowRight) {\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\tbelowRight,\n\t\t\t\tNeighborType.Below));\n\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\tbelowRight,\n\t\t\t\tNeighborType.Right));\n\t\t}\n\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\tif (squares[i]) {\n\t\t\t\t// check for enemy piece on square\n\t\t\t\tp = squares[i] ? squares[i].piece : null;\n\t\t\t\tif (!p || p.side !== opt.piece.side) {\n\t\t\t\t\topt.destSquares.push(squares[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class PawnValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowForward = true;\n\t\tthis.type = PieceType.Pawn;\n\t\tthis.repeat = 1;\n\t}\n\n\t/* eslint no-magic-numbers:0 */\n\tapplySpecialValidation (opt) {\n\t\t// check for capture\n\t\tlet\n\t\t\tsquares = [\n\t\t\t\tthis.board.getNeighborSquare(opt.origin,\n\t\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\t\tNeighborType.AboveLeft :\n\t\t\t\t\t\t\tNeighborType.BelowLeft),\n\t\t\t\tthis.board.getNeighborSquare(opt.origin,\n\t\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\t\tNeighborType.AboveRight :\n\t\t\t\t\t\t\tNeighborType.BelowRight)],\n\t\t\ti = 0,\n\t\t\tsq = null,\n\t\t\tp = null;\n\n\t\t// check for capture\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\t// check for enemy piece on square\n\t\t\tp = squares[i] ? squares[i].piece : null;\n\t\t\tif (p && p.side !== opt.piece.side) {\n\t\t\t\topt.destSquares.push(squares[i]);\n\t\t\t}\n\t\t}\n\n\t\t// check for double square first move\n\t\tif (opt.piece.moveCount === 0 &&\n\t\t\t\topt.destSquares.length && // Fix for issue #15 (originally looked for length of 1)\n\t\t\t\topt.destSquares[0].piece === null) { // Fix for issue #1\n\t\t\tsq = this.board.getNeighborSquare(\n\t\t\t\topt.destSquares[0],\n\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\tNeighborType.Above :\n\t\t\t\t\t\tNeighborType.Below);\n\n\t\t\tif (!sq.piece) {\n\t\t\t\topt.destSquares.push(sq);\n\t\t\t}\n\n\t\t// check for en passant\n\t\t} else if (opt.origin.rank ===\n\t\t\t\t(opt.piece.side === SideType.White ? 5 : 4)) {\n\t\t\t// get squares left & right of pawn\n\t\t\tsquares = [\n\t\t\t\tthis.board.getNeighborSquare(opt.origin, NeighborType.Left),\n\t\t\t\tthis.board.getNeighborSquare(opt.origin, NeighborType.Right)];\n\t\t\ti = 0;\n\n\t\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\t\t// check for pawn on square\n\t\t\t\tp = squares[i] ? squares[i].piece : null;\n\t\t\t\tif (p &&\n\t\t\t\t\t\tp.type === PieceType.Pawn &&\n\t\t\t\t\t\tp.side !== opt.piece.side &&\n\t\t\t\t\t\tp.moveCount === 1 &&\n\t\t\t\t\t\tthis.board.lastMovedPiece === p) {\n\n\t\t\t\t\topt.destSquares.push(\n\t\t\t\t\t\tthis.board.getNeighborSquare(\n\t\t\t\t\t\t\tsquares[i],\n\t\t\t\t\t\t\tp.side === SideType.Black ?\n\t\t\t\t\t\t\t\t\tNeighborType.Above :\n\t\t\t\t\t\t\t\t\tNeighborType.Below));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class QueenValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowBackward = true;\n\t\tthis.allowDiagonal = true;\n\t\tthis.allowForward = true;\n\t\tthis.allowHorizontal = true;\n\t\tthis.type = PieceType.Queen;\n\t\tthis.repeat = 8;\n\t}\n}\n\nexport class RookValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowBackward = true;\n\t\tthis.allowForward = true;\n\t\tthis.allowHorizontal = true;\n\t\tthis.type = PieceType.Rook;\n\t\tthis.repeat = 8;\n\t}\n}\n\nexport default { PieceValidation };\n"]}