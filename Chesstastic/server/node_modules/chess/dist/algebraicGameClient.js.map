{"version":3,"sources":["algebraicGameClient.js"],"names":["getNotationPrefix","src","dest","movesForPiece","containsDest","squares","n","length","i","file","fileHash","prefix","piece","notation","rank","rankHash","Object","keys","getValidMovesByPieceType","pieceType","validMoves","byPiece","type","push","notate","gameClient","algebraicNotation","isPromotion","p","suffix","sq","Pawn","Bishop","Knight","Queen","Rook","King","PGN","parseNotation","parseDest","substring","charAt","updateGameClient","validation","start","err","result","Error","isCheck","isCheckmate","isRepetition","isStalemate","notatedMoves","AlgebraicGameClient","game","opts","create","on","attackers","emit","forceUpdate","board","isFuzzy","move","notationRegex","promo","side","getCurrentSide","replace","match","createBishop","createKnight","createQueen","createRook","createPawn","promote","postSquare"],"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","file":"algebraicGameClient.js","sourcesContent":["import { EventEmitter } from 'events';\nimport { Game } from './game';\nimport { GameValidation } from './gameValidation';\nimport { Piece, PieceType } from './piece';\n\n// private methods\nfunction getNotationPrefix (src, dest, movesForPiece) {\n\tlet\n\t\tcontainsDest = function (squares) {\n\t\t\tlet n = 0;\n\n\t\t\tfor (n = 0; n < squares.length; n++) {\n\t\t\t\tif (squares[n] === dest) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\t\ti = 0,\n\t\tfile = '',\n\t\tfileHash = {},\n\t\tprefix = src.piece.notation,\n\t\trank = 0,\n\t\trankHash = {};\n\n\tfor (i = 0; i < movesForPiece.length; i++) {\n\t\tif (containsDest(movesForPiece[i].squares)) {\n\t\t\tfile = movesForPiece[i].src.file;\n\t\t\trank = movesForPiece[i].src.rank;\n\n\t\t\tfileHash[file] = (typeof fileHash[file] !== 'undefined' ? fileHash[file] + 1 : 1);\n\t\t\trankHash[rank] = (typeof rankHash[rank] !== 'undefined' ? rankHash[rank] + 1 : 1);\n\t\t}\n\t}\n\n\tif (Object.keys(fileHash).length > 1) {\n\t\tprefix += src.file;\n\t}\n\n\tif (Object.keys(rankHash).length > Object.keys(fileHash).length) {\n\t\tprefix += src.rank;\n\t}\n\n\treturn prefix;\n}\n\nfunction getValidMovesByPieceType (pieceType, validMoves) {\n\tlet\n\t\tbyPiece = [],\n\t\ti = 0;\n\n\tfor (i = 0; i < validMoves.length; i++) {\n\t\tif (validMoves[i].src.piece.type === pieceType) {\n\t\t\tbyPiece.push(validMoves[i]);\n\t\t}\n\t}\n\n\treturn byPiece;\n}\n\nfunction notate (validMoves, gameClient) {\n\tlet\n\t\talgebraicNotation = {},\n\t\ti = 0,\n\t\tisPromotion = false,\n\t\tmovesForPiece = [],\n\t\tn = 0,\n\t\tp = null,\n\t\tprefix = '',\n\t\tsuffix = '',\n\t\tsq = null;\n\n\t// iterate through each starting squares valid moves\n\tfor (i = 0; i < validMoves.length; i++) {\n\t\tp = validMoves[i].src.piece;\n\n\t\t// iterate each potential move and build prefix and suffix for notation\n\t\tfor (n = 0; n < validMoves[i].squares.length; n++) {\n\t\t\tprefix = '';\n\t\t\tsq = validMoves[i].squares[n];\n\n\t\t\t// set suffix for notation\n\t\t\tsuffix = (sq.piece ? 'x' : '') + sq.file + sq.rank;\n\n\t\t\t// check for potential promotion\n\t\t\t/* eslint no-magic-numbers: 0 */\n\t\t\tisPromotion =\n\t\t\t\t(sq.rank === 8 || sq.rank === 1) &&\n\t\t\t\tp.type === PieceType.Pawn;\n\n\t\t\t// squares with pawns\n\t\t\tif (sq.piece && p.type === PieceType.Pawn) {\n\t\t\t\tprefix = validMoves[i].src.file;\n\t\t\t}\n\n\t\t\t// squares with Bishop, Knight, Queen or Rook pieces\n\t\t\tif (p.type === PieceType.Bishop ||\n\t\t\t\tp.type === PieceType.Knight ||\n\t\t\t\tp.type === PieceType.Queen ||\n\t\t\t\tp.type === PieceType.Rook) {\n\t\t\t\t// if there is more than 1 of the specified piece on the board,\n\t\t\t\t// can more than 1 land on the specified square?\n\t\t\t\tmovesForPiece = getValidMovesByPieceType(p.type, validMoves);\n\t\t\t\tif (movesForPiece.length > 1) {\n\t\t\t\t\tprefix = getNotationPrefix(validMoves[i].src, sq, movesForPiece);\n\t\t\t\t} else {\n\t\t\t\t\tprefix = validMoves[i].src.piece.notation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// squares with a King piece\n\t\t\tif (p.type === PieceType.King) {\n\t\t\t\t// look for castle left and castle right\n\t\t\t\tif (validMoves[i].src.file === 'e' && sq.file === 'g') {\n\t\t\t\t\t// fix for issue #13 - if PGN is specified should be letters, not numbers\n\t\t\t\t\tprefix = gameClient.PGN ? 'O-O' : '0-0';\n\t\t\t\t\tsuffix = '';\n\t\t\t\t} else if (validMoves[i].src.file === 'e' && sq.file === 'c') {\n\t\t\t\t\t// fix for issue #13 - if PGN is specified should be letters, not numbers\n\t\t\t\t\tprefix = gameClient.PGN ? 'O-O-O' : '0-0-0';\n\t\t\t\t\tsuffix = '';\n\t\t\t\t} else {\n\t\t\t\t\tprefix = validMoves[i].src.piece.notation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set the notation\n\t\t\tif (isPromotion) {\n\t\t\t\t// Rook promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'R'] = {\n\t\t\t\t\tsrc : validMoves[i].src,\n\t\t\t\t\tdest : sq\n\t\t\t\t};\n\n\t\t\t\t// Knight promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'N'] = {\n\t\t\t\t\tsrc : validMoves[i].src,\n\t\t\t\t\tdest : sq\n\t\t\t\t};\n\n\t\t\t\t// Bishop promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'B'] = {\n\t\t\t\t\tsrc : validMoves[i].src,\n\t\t\t\t\tdest : sq\n\t\t\t\t};\n\n\t\t\t\t// Queen promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'Q'] = {\n\t\t\t\t\tsrc : validMoves[i].src,\n\t\t\t\t\tdest : sq\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\talgebraicNotation[prefix + suffix] = {\n\t\t\t\t\tsrc : validMoves[i].src,\n\t\t\t\t\tdest : sq\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn algebraicNotation;\n}\n\nfunction parseNotation (notation) {\n\tlet parseDest = '';\n\n\t// try and parse the notation\n\tparseDest = notation.substring(notation.length - 2);\n\tif (notation.length > 2) {\n\t\treturn notation.charAt(0) + parseDest;\n\t}\n\n\treturn '';\n}\n\nfunction updateGameClient (gameClient) {\n\tgameClient.validation.start(function (err, result) {\n\t\tif (err) {\n\t\t\tthrow new Error(err);\n\t\t}\n\n\t\tgameClient.isCheck = result.isCheck;\n\t\tgameClient.isCheckmate = result.isCheckmate;\n\t\tgameClient.isRepetition = result.isRepetition;\n\t\tgameClient.isStalemate = result.isStalemate;\n\t\tgameClient.notatedMoves = notate(result.validMoves, gameClient);\n\t\tgameClient.validMoves = result.validMoves;\n\t});\n}\n\nexport class AlgebraicGameClient extends EventEmitter {\n\tconstructor (game, opts) {\n\t\tsuper();\n\n\t\tthis.game = game;\n\t\tthis.isCheck = false;\n\t\tthis.isCheckmate = false;\n\t\tthis.isRepetition = false;\n\t\tthis.isStalemate = false;\n\t\tthis.notatedMoves = {};\n\t\t// for issue #13, adding options allowing consumers to specify\n\t\t// PGN (Portable Game Notation)... essentially, this makes castle moves\n\t\t// appear as capital letter O rather than the number 0\n\t\tthis.PGN = (opts && typeof opts.PGN === 'boolean') ? opts.PGN : false;\n\t\tthis.validMoves = [];\n\t\tthis.validation = GameValidation.create(this.game);\n\n\t\t// bubble the game check event\n\t\tthis.game.on('check', (attackers) => (this.emit('check', attackers)));\n\t}\n\n\tstatic create (opts) {\n\t\tlet\n\t\t\tgame = Game.create(),\n\t\t\tgameClient = new AlgebraicGameClient(game, opts);\n\n\t\tupdateGameClient(gameClient);\n\n\t\treturn gameClient;\n\t}\n\n\tgetStatus (forceUpdate) {\n\t\tif (forceUpdate) {\n\t\t\tupdateGameClient(this);\n\t\t}\n\n\t\treturn {\n\t\t\tboard : this.game.board,\n\t\t\tisCheck : this.isCheck,\n\t\t\tisCheckmate : this.isCheckmate,\n\t\t\tisRepetition : this.isRepetition,\n\t\t\tisStalemate : this.isStalemate,\n\t\t\tnotatedMoves : this.notatedMoves\n\t\t};\n\t}\n\n\tmove (notation, isFuzzy) {\n\t\tlet\n\t\t\tmove = null,\n\t\t\tnotationRegex = /^[BKQNR]?[a-h]?[1-8]?[x-]?[a-h][1-8][+#]?$/,\n\t\t\tp = null,\n\t\t\tpromo = '',\n\t\t\tside = this.game.getCurrentSide();\n\n\t\tif (notation && typeof notation === 'string') {\n\t\t\t// clean notation of extra or alternate chars\n\t\t\tnotation = notation\n\t\t\t\t.replace(/\\!/g, '')\n\t\t\t\t.replace(/\\+/g, '')\n\t\t\t\t.replace(/\\#/g, '')\n\t\t\t\t.replace(/\\=/g, '')\n\t\t\t\t.replace(/\\\\/g, '');\n\n\t\t\t\t// fix for issue #13 - if PGN is specified, should be letters not numbers\n\t\t\t\tif (this.PGN) {\n\t\t\t\t\tnotation = notation.replace(/0/g, 'O');\n\t\t\t\t} else {\n\t\t\t\t\tnotation = notation.replace(/O/g, '0');\n\t\t\t\t}\n\n\t\t\t// check for pawn promotion\n\t\t\tif (notation.charAt(notation.length - 1).match(/[BNQR]/)) {\n\t\t\t\tpromo = notation.charAt(notation.length - 1);\n\t\t\t}\n\n\t\t\t// use it directly or attempt to parse it if not found\n\t\t\tif (this.notatedMoves[notation]) {\n\t\t\t\tmove = this.game.board.move(\n\t\t\t\t\tthis.notatedMoves[notation].src,\n\t\t\t\t\tthis.notatedMoves[notation].dest,\n\t\t\t\t\tnotation);\n\t\t\t} else if (notation.match(notationRegex) && notation.length > 1 && !isFuzzy) {\n\t\t\t\treturn this.move(parseNotation(notation), true);\n\t\t\t} else if (isFuzzy) {\n\t\t\t\tthrow new Error(`Invalid move (${notation})`);\n\t\t\t}\n\n\t\t\tif (move) {\n\t\t\t\t// apply pawn promotion\n\t\t\t\tif (promo) {\n\t\t\t\t\tswitch (promo) {\n\t\t\t\t\t\tcase 'B':\n\t\t\t\t\t\t\tp = Piece.createBishop(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'N':\n\t\t\t\t\t\t\tp = Piece.createKnight(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Q':\n\t\t\t\t\t\t\tp = Piece.createQueen(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'R':\n\t\t\t\t\t\t\tp = Piece.createRook(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tp = Piece.createPawn(side);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (p) {\n\t\t\t\t\t\tthis.game.board.promote(move.move.postSquare, p);\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tp.moveCount = move.move.postSquare.piece.moveCount;\n\t\t\t\t\t\tmove.move.postSquare.piece = p;\n\t\t\t\t\t\t//*/\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tupdateGameClient(this);\n\n\t\t\t\treturn move;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Notation is invalid (${notation})`);\n\t}\n}\n\nexport default { AlgebraicGameClient };"]}