'use strict';

var cov_swsp6i9te = function () {
	var path = '/Volumes/Data/Projects/brozeph/node-chess/src/gameValidation.js',
	    hash = 'aff242b3e143002a0efb69d9bd89e7ffbc2adf8c',
	    Function = function () {}.constructor,
	    global = new Function('return this')(),
	    gcv = '__coverage__',
	    coverageData = {
		path: '/Volumes/Data/Projects/brozeph/node-chess/src/gameValidation.js',
		statementMap: {
			'0': {
				start: {
					line: 13,
					column: 2
				},
				end: {
					line: 13,
					column: 19
				}
			},
			'1': {
				start: {
					line: 17,
					column: 2
				},
				end: {
					line: 17,
					column: 34
				}
			},
			'2': {
				start: {
					line: 22,
					column: 7
				},
				end: {
					line: 22,
					column: 8
				}
			},
			'3': {
				start: {
					line: 23,
					column: 13
				},
				end: {
					line: 23,
					column: 45
				}
			},
			'4': {
				start: {
					line: 25,
					column: 2
				},
				end: {
					line: 29,
					column: 3
				}
			},
			'5': {
				start: {
					line: 26,
					column: 3
				},
				end: {
					line: 28,
					column: 4
				}
			},
			'6': {
				start: {
					line: 27,
					column: 4
				},
				end: {
					line: 27,
					column: 22
				}
			},
			'7': {
				start: {
					line: 34,
					column: 10
				},
				end: {
					line: 34,
					column: 12
				}
			},
			'8': {
				start: {
					line: 35,
					column: 15
				},
				end: {
					line: 35,
					column: 17
				}
			},
			'9': {
				start: {
					line: 36,
					column: 7
				},
				end: {
					line: 36,
					column: 8
				}
			},
			'10': {
				start: {
					line: 39,
					column: 2
				},
				end: {
					line: 47,
					column: 3
				}
			},
			'11': {
				start: {
					line: 40,
					column: 3
				},
				end: {
					line: 40,
					column: 44
				}
			},
			'12': {
				start: {
					line: 41,
					column: 3
				},
				end: {
					line: 41,
					column: 63
				}
			},
			'13': {
				start: {
					line: 44,
					column: 3
				},
				end: {
					line: 46,
					column: 4
				}
			},
			'14': {
				start: {
					line: 45,
					column: 4
				},
				end: {
					line: 45,
					column: 16
				}
			},
			'15': {
				start: {
					line: 49,
					column: 2
				},
				end: {
					line: 49,
					column: 15
				}
			},
			'16': {
				start: {
					line: 54,
					column: 2
				},
				end: {
					line: 60,
					column: 6
				}
			},
			'17': {
				start: {
					line: 54,
					column: 43
				},
				end: {
					line: 60,
					column: 4
				}
			},
			'18': {
				start: {
					line: 55,
					column: 3
				},
				end: {
					line: 57,
					column: 4
				}
			},
			'19': {
				start: {
					line: 56,
					column: 4
				},
				end: {
					line: 56,
					column: 23
				}
			},
			'20': {
				start: {
					line: 59,
					column: 3
				},
				end: {
					line: 59,
					column: 26
				}
			},
			'21': {
				start: {
					line: 63,
					column: 16
				},
				end: {
					line: 63,
					column: 20
				}
			},
			'22': {
				start: {
					line: 64,
					column: 12
				},
				end: {
					line: 71,
					column: 4
				}
			},
			'23': {
				start: {
					line: 72,
					column: 15
				},
				end: {
					line: 86,
					column: 4
				}
			},
			'24': {
				start: {
					line: 73,
					column: 4
				},
				end: {
					line: 85,
					column: 6
				}
			},
			'25': {
				start: {
					line: 74,
					column: 5
				},
				end: {
					line: 76,
					column: 6
				}
			},
			'26': {
				start: {
					line: 75,
					column: 6
				},
				end: {
					line: 75,
					column: 27
				}
			},
			'27': {
				start: {
					line: 78,
					column: 5
				},
				end: {
					line: 78,
					column: 62
				}
			},
			'28': {
				start: {
					line: 79,
					column: 5
				},
				end: {
					line: 79,
					column: 68
				}
			},
			'29': {
				start: {
					line: 80,
					column: 5
				},
				end: {
					line: 80,
					column: 69
				}
			},
			'30': {
				start: {
					line: 81,
					column: 5
				},
				end: {
					line: 81,
					column: 44
				}
			},
			'31': {
				start: {
					line: 82,
					column: 5
				},
				end: {
					line: 82,
					column: 36
				}
			},
			'32': {
				start: {
					line: 84,
					column: 5
				},
				end: {
					line: 84,
					column: 35
				}
			},
			'33': {
				start: {
					line: 87,
					column: 7
				},
				end: {
					line: 87,
					column: 40
				}
			},
			'34': {
				start: {
					line: 89,
					column: 2
				},
				end: {
					line: 97,
					column: 3
				}
			},
			'35': {
				start: {
					line: 91,
					column: 3
				},
				end: {
					line: 91,
					column: 64
				}
			},
			'36': {
				start: {
					line: 94,
					column: 3
				},
				end: {
					line: 94,
					column: 75
				}
			},
			'37': {
				start: {
					line: 96,
					column: 3
				},
				end: {
					line: 96,
					column: 49
				}
			}
		},
		fnMap: {
			'0': {
				name: '(anonymous_0)',
				decl: {
					start: {
						line: 12,
						column: 1
					},
					end: {
						line: 12,
						column: 2
					}
				},
				loc: {
					start: {
						line: 12,
						column: 20
					},
					end: {
						line: 14,
						column: 2
					}
				},
				line: 12
			},
			'1': {
				name: '(anonymous_1)',
				decl: {
					start: {
						line: 16,
						column: 1
					},
					end: {
						line: 16,
						column: 2
					}
				},
				loc: {
					start: {
						line: 16,
						column: 22
					},
					end: {
						line: 18,
						column: 2
					}
				},
				line: 16
			},
			'2': {
				name: '(anonymous_2)',
				decl: {
					start: {
						line: 20,
						column: 1
					},
					end: {
						line: 20,
						column: 2
					}
				},
				loc: {
					start: {
						line: 20,
						column: 23
					},
					end: {
						line: 30,
						column: 2
					}
				},
				line: 20
			},
			'3': {
				name: '(anonymous_3)',
				decl: {
					start: {
						line: 32,
						column: 1
					},
					end: {
						line: 32,
						column: 2
					}
				},
				loc: {
					start: {
						line: 32,
						column: 17
					},
					end: {
						line: 50,
						column: 2
					}
				},
				line: 32
			},
			'4': {
				name: '(anonymous_4)',
				decl: {
					start: {
						line: 52,
						column: 1
					},
					end: {
						line: 52,
						column: 2
					}
				},
				loc: {
					start: {
						line: 52,
						column: 18
					},
					end: {
						line: 98,
						column: 2
					}
				},
				line: 52
			},
			'5': {
				name: '(anonymous_5)',
				decl: {
					start: {
						line: 54,
						column: 26
					},
					end: {
						line: 54,
						column: 27
					}
				},
				loc: {
					start: {
						line: 54,
						column: 43
					},
					end: {
						line: 60,
						column: 4
					}
				},
				line: 54
			},
			'6': {
				name: '(anonymous_6)',
				decl: {
					start: {
						line: 54,
						column: 55
					},
					end: {
						line: 54,
						column: 56
					}
				},
				loc: {
					start: {
						line: 54,
						column: 76
					},
					end: {
						line: 60,
						column: 3
					}
				},
				line: 54
			},
			'7': {
				name: '(anonymous_7)',
				decl: {
					start: {
						line: 72,
						column: 15
					},
					end: {
						line: 72,
						column: 16
					}
				},
				loc: {
					start: {
						line: 72,
						column: 52
					},
					end: {
						line: 86,
						column: 4
					}
				},
				line: 72
			},
			'8': {
				name: '(anonymous_8)',
				decl: {
					start: {
						line: 73,
						column: 11
					},
					end: {
						line: 73,
						column: 12
					}
				},
				loc: {
					start: {
						line: 73,
						column: 38
					},
					end: {
						line: 85,
						column: 5
					}
				},
				line: 73
			}
		},
		branchMap: {
			'0': {
				loc: {
					start: {
						line: 26,
						column: 3
					},
					end: {
						line: 28,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 26,
						column: 3
					},
					end: {
						line: 28,
						column: 4
					}
				}, {
					start: {
						line: 26,
						column: 3
					},
					end: {
						line: 28,
						column: 4
					}
				}],
				line: 26
			},
			'1': {
				loc: {
					start: {
						line: 41,
						column: 21
					},
					end: {
						line: 41,
						column: 62
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 41,
						column: 39
					},
					end: {
						line: 41,
						column: 58
					}
				}, {
					start: {
						line: 41,
						column: 61
					},
					end: {
						line: 41,
						column: 62
					}
				}],
				line: 41
			},
			'2': {
				loc: {
					start: {
						line: 44,
						column: 3
					},
					end: {
						line: 46,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 44,
						column: 3
					},
					end: {
						line: 46,
						column: 4
					}
				}, {
					start: {
						line: 44,
						column: 3
					},
					end: {
						line: 46,
						column: 4
					}
				}],
				line: 44
			},
			'3': {
				loc: {
					start: {
						line: 54,
						column: 13
					},
					end: {
						line: 60,
						column: 5
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 54,
						column: 13
					},
					end: {
						line: 54,
						column: 21
					}
				}, {
					start: {
						line: 54,
						column: 26
					},
					end: {
						line: 60,
						column: 4
					}
				}],
				line: 54
			},
			'4': {
				loc: {
					start: {
						line: 55,
						column: 3
					},
					end: {
						line: 57,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 55,
						column: 3
					},
					end: {
						line: 57,
						column: 4
					}
				}, {
					start: {
						line: 55,
						column: 3
					},
					end: {
						line: 57,
						column: 4
					}
				}],
				line: 55
			},
			'5': {
				loc: {
					start: {
						line: 74,
						column: 5
					},
					end: {
						line: 76,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 74,
						column: 5
					},
					end: {
						line: 76,
						column: 6
					}
				}, {
					start: {
						line: 74,
						column: 5
					},
					end: {
						line: 76,
						column: 6
					}
				}],
				line: 74
			},
			'6': {
				loc: {
					start: {
						line: 78,
						column: 22
					},
					end: {
						line: 78,
						column: 61
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 78,
						column: 22
					},
					end: {
						line: 78,
						column: 36
					}
				}, {
					start: {
						line: 78,
						column: 40
					},
					end: {
						line: 78,
						column: 61
					}
				}],
				line: 78
			},
			'7': {
				loc: {
					start: {
						line: 79,
						column: 26
					},
					end: {
						line: 79,
						column: 67
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 79,
						column: 26
					},
					end: {
						line: 79,
						column: 40
					}
				}, {
					start: {
						line: 79,
						column: 44
					},
					end: {
						line: 79,
						column: 67
					}
				}],
				line: 79
			},
			'8': {
				loc: {
					start: {
						line: 80,
						column: 26
					},
					end: {
						line: 80,
						column: 68
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 80,
						column: 26
					},
					end: {
						line: 80,
						column: 41
					}
				}, {
					start: {
						line: 80,
						column: 45
					},
					end: {
						line: 80,
						column: 68
					}
				}],
				line: 80
			},
			'9': {
				loc: {
					start: {
						line: 89,
						column: 2
					},
					end: {
						line: 97,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 89,
						column: 2
					},
					end: {
						line: 97,
						column: 3
					}
				}, {
					start: {
						line: 89,
						column: 2
					},
					end: {
						line: 97,
						column: 3
					}
				}],
				line: 89
			}
		},
		s: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0,
			'35': 0,
			'36': 0,
			'37': 0
		},
		f: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0
		},
		b: {
			'0': [0, 0],
			'1': [0, 0],
			'2': [0, 0],
			'3': [0, 0],
			'4': [0, 0],
			'5': [0, 0],
			'6': [0, 0],
			'7': [0, 0],
			'8': [0, 0],
			'9': [0, 0]
		},
		_coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	},
	    coverage = global[gcv] || (global[gcv] = {});

	if (coverage[path] && coverage[path].hash === hash) {
		return coverage[path];
	}

	coverageData.hash = hash;
	return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.GameValidation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	GameValidation is the 3rd phase of validation for the game
	and is intended to support Game level events. Examples of Game
	scope validation include Check, Checkmate, 3-fold position
	repetition and pawn promotion.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     */

var _boardValidation = require('./boardValidation');

var _piece = require('./piece');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameValidation = exports.GameValidation = function () {
	function GameValidation(game) {
		_classCallCheck(this, GameValidation);

		cov_swsp6i9te.f[0]++;
		cov_swsp6i9te.s[0]++;

		this.game = game;
	}

	_createClass(GameValidation, [{
		key: 'findKingSquare',
		value: function findKingSquare(side) {
			cov_swsp6i9te.f[2]++;

			var i = (cov_swsp6i9te.s[2]++, 0),
			    squares = (cov_swsp6i9te.s[3]++, this.game.board.getSquares(side));

			cov_swsp6i9te.s[4]++;
			for (i = 0; i < squares.length; i++) {
				cov_swsp6i9te.s[5]++;

				if (squares[i].piece.type === _piece.PieceType.King) {
					cov_swsp6i9te.b[0][0]++;
					cov_swsp6i9te.s[6]++;

					return squares[i];
				} else {
					cov_swsp6i9te.b[0][1]++;
				}
			}
		}
	}, {
		key: 'isRepetition',
		value: function isRepetition() {
			cov_swsp6i9te.f[3]++;

			var hash = (cov_swsp6i9te.s[7]++, ''),
			    hashCount = (cov_swsp6i9te.s[8]++, []),
			    i = (cov_swsp6i9te.s[9]++, 0);

			// analyze 3-fold repetition (draw)
			cov_swsp6i9te.s[10]++;
			for (i = 0; i < this.game.moveHistory.length; i++) {
				cov_swsp6i9te.s[11]++;

				hash = this.game.moveHistory[i].hashCode;
				cov_swsp6i9te.s[12]++;
				hashCount[hash] = hashCount[hash] ? (cov_swsp6i9te.b[1][0]++, hashCount[hash] + 1) : (cov_swsp6i9te.b[1][1]++, 1);

				/* eslint no-magic-numbers: 0 */
				cov_swsp6i9te.s[13]++;
				if (hashCount[hash] === 3) {
					cov_swsp6i9te.b[2][0]++;
					cov_swsp6i9te.s[14]++;

					return true;
				} else {
					cov_swsp6i9te.b[2][1]++;
				}
			}

			cov_swsp6i9te.s[15]++;
			return false;
		}
	}, {
		key: 'start',
		value: function start(callback) {
			cov_swsp6i9te.f[4]++;
			cov_swsp6i9te.s[16]++;

			// ensure callback is set
			callback = (cov_swsp6i9te.b[3][0]++, callback) || (cov_swsp6i9te.b[3][1]++, function (err, result) {
				cov_swsp6i9te.f[5]++;
				cov_swsp6i9te.s[17]++;
				return new Promise(function (resolve, reject) {
					cov_swsp6i9te.f[6]++;
					cov_swsp6i9te.s[18]++;

					if (err) {
						cov_swsp6i9te.b[4][0]++;
						cov_swsp6i9te.s[19]++;

						return reject(err);
					} else {
						cov_swsp6i9te.b[4][1]++;
					}

					cov_swsp6i9te.s[20]++;
					return resolve(result);
				});
			});

			cov_swsp6i9te.s[23]++;
			var kingSquare = (cov_swsp6i9te.s[21]++, null),
			    result = (cov_swsp6i9te.s[22]++, {
				isCheck: false,
				isCheckmate: false,
				isFiftyMoveDraw: false,
				isStalemate: false,
				isRepetition: false,
				validMoves: []
			}),
			    setResult = function setResult(v, result, isKingAttacked) {
				cov_swsp6i9te.f[7]++;
				cov_swsp6i9te.s[24]++;

				return function (err, validMoves) {
					cov_swsp6i9te.f[8]++;
					cov_swsp6i9te.s[25]++;

					if (err) {
						cov_swsp6i9te.b[5][0]++;
						cov_swsp6i9te.s[26]++;

						return callback(err);
					} else {
						cov_swsp6i9te.b[5][1]++;
					}

					cov_swsp6i9te.s[27]++;
					result.isCheck = (cov_swsp6i9te.b[6][0]++, isKingAttacked) && (cov_swsp6i9te.b[6][1]++, validMoves.length > 0);
					cov_swsp6i9te.s[28]++;
					result.isCheckmate = (cov_swsp6i9te.b[7][0]++, isKingAttacked) && (cov_swsp6i9te.b[7][1]++, validMoves.length === 0);
					cov_swsp6i9te.s[29]++;
					result.isStalemate = (cov_swsp6i9te.b[8][0]++, !isKingAttacked) && (cov_swsp6i9te.b[8][1]++, validMoves.length === 0);
					cov_swsp6i9te.s[30]++;
					result.isRepetition = v.isRepetition();
					cov_swsp6i9te.s[31]++;
					result.validMoves = validMoves;

					cov_swsp6i9te.s[32]++;
					return callback(null, result);
				};
			},
			    v = (cov_swsp6i9te.s[33]++, _boardValidation.BoardValidation.create(this.game));

			cov_swsp6i9te.s[34]++;
			if (this.game) {
				cov_swsp6i9te.b[9][0]++;
				cov_swsp6i9te.s[35]++;

				// find current side king square
				kingSquare = this.findKingSquare(this.game.getCurrentSide());

				// find valid moves
				cov_swsp6i9te.s[36]++;
				return v.start(setResult(this, result, v.isSquareAttacked(kingSquare)));
			} else {
				cov_swsp6i9te.b[9][1]++;
				cov_swsp6i9te.s[37]++;

				return callback(new Error('game is invalid'));
			}
		}
	}], [{
		key: 'create',
		value: function create(game) {
			cov_swsp6i9te.f[1]++;
			cov_swsp6i9te.s[1]++;

			return new GameValidation(game);
		}
	}]);

	return GameValidation;
}();

exports.default = { GameValidation: GameValidation };
//# sourceMappingURL=gameValidation.js.map
