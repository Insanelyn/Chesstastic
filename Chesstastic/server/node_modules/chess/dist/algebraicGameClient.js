'use strict';

var cov_1htdbc7jct = function () {
	var path = '/Volumes/Data/Projects/brozeph/node-chess/src/algebraicGameClient.js',
	    hash = 'ddb16a2ffa162b255dc71912c942db28ce9384d3',
	    Function = function () {}.constructor,
	    global = new Function('return this')(),
	    gcv = '__coverage__',
	    coverageData = {
		path: '/Volumes/Data/Projects/brozeph/node-chess/src/algebraicGameClient.js',
		statementMap: {
			'0': {
				start: {
					line: 9,
					column: 17
				},
				end: {
					line: 19,
					column: 3
				}
			},
			'1': {
				start: {
					line: 10,
					column: 11
				},
				end: {
					line: 10,
					column: 12
				}
			},
			'2': {
				start: {
					line: 12,
					column: 3
				},
				end: {
					line: 16,
					column: 4
				}
			},
			'3': {
				start: {
					line: 13,
					column: 4
				},
				end: {
					line: 15,
					column: 5
				}
			},
			'4': {
				start: {
					line: 14,
					column: 5
				},
				end: {
					line: 14,
					column: 17
				}
			},
			'5': {
				start: {
					line: 18,
					column: 3
				},
				end: {
					line: 18,
					column: 16
				}
			},
			'6': {
				start: {
					line: 20,
					column: 6
				},
				end: {
					line: 20,
					column: 7
				}
			},
			'7': {
				start: {
					line: 21,
					column: 9
				},
				end: {
					line: 21,
					column: 11
				}
			},
			'8': {
				start: {
					line: 22,
					column: 13
				},
				end: {
					line: 22,
					column: 15
				}
			},
			'9': {
				start: {
					line: 23,
					column: 11
				},
				end: {
					line: 23,
					column: 29
				}
			},
			'10': {
				start: {
					line: 24,
					column: 9
				},
				end: {
					line: 24,
					column: 10
				}
			},
			'11': {
				start: {
					line: 25,
					column: 13
				},
				end: {
					line: 25,
					column: 15
				}
			},
			'12': {
				start: {
					line: 27,
					column: 1
				},
				end: {
					line: 35,
					column: 2
				}
			},
			'13': {
				start: {
					line: 28,
					column: 2
				},
				end: {
					line: 34,
					column: 3
				}
			},
			'14': {
				start: {
					line: 29,
					column: 3
				},
				end: {
					line: 29,
					column: 36
				}
			},
			'15': {
				start: {
					line: 30,
					column: 3
				},
				end: {
					line: 30,
					column: 36
				}
			},
			'16': {
				start: {
					line: 32,
					column: 3
				},
				end: {
					line: 32,
					column: 85
				}
			},
			'17': {
				start: {
					line: 33,
					column: 3
				},
				end: {
					line: 33,
					column: 85
				}
			},
			'18': {
				start: {
					line: 37,
					column: 1
				},
				end: {
					line: 39,
					column: 2
				}
			},
			'19': {
				start: {
					line: 38,
					column: 2
				},
				end: {
					line: 38,
					column: 21
				}
			},
			'20': {
				start: {
					line: 41,
					column: 1
				},
				end: {
					line: 43,
					column: 2
				}
			},
			'21': {
				start: {
					line: 42,
					column: 2
				},
				end: {
					line: 42,
					column: 21
				}
			},
			'22': {
				start: {
					line: 45,
					column: 1
				},
				end: {
					line: 45,
					column: 15
				}
			},
			'23': {
				start: {
					line: 50,
					column: 12
				},
				end: {
					line: 50,
					column: 14
				}
			},
			'24': {
				start: {
					line: 51,
					column: 6
				},
				end: {
					line: 51,
					column: 7
				}
			},
			'25': {
				start: {
					line: 53,
					column: 1
				},
				end: {
					line: 57,
					column: 2
				}
			},
			'26': {
				start: {
					line: 54,
					column: 2
				},
				end: {
					line: 56,
					column: 3
				}
			},
			'27': {
				start: {
					line: 55,
					column: 3
				},
				end: {
					line: 55,
					column: 31
				}
			},
			'28': {
				start: {
					line: 59,
					column: 1
				},
				end: {
					line: 59,
					column: 16
				}
			},
			'29': {
				start: {
					line: 64,
					column: 22
				},
				end: {
					line: 64,
					column: 24
				}
			},
			'30': {
				start: {
					line: 65,
					column: 6
				},
				end: {
					line: 65,
					column: 7
				}
			},
			'31': {
				start: {
					line: 66,
					column: 16
				},
				end: {
					line: 66,
					column: 21
				}
			},
			'32': {
				start: {
					line: 67,
					column: 18
				},
				end: {
					line: 67,
					column: 20
				}
			},
			'33': {
				start: {
					line: 68,
					column: 6
				},
				end: {
					line: 68,
					column: 7
				}
			},
			'34': {
				start: {
					line: 69,
					column: 6
				},
				end: {
					line: 69,
					column: 10
				}
			},
			'35': {
				start: {
					line: 70,
					column: 11
				},
				end: {
					line: 70,
					column: 13
				}
			},
			'36': {
				start: {
					line: 71,
					column: 11
				},
				end: {
					line: 71,
					column: 13
				}
			},
			'37': {
				start: {
					line: 72,
					column: 7
				},
				end: {
					line: 72,
					column: 11
				}
			},
			'38': {
				start: {
					line: 75,
					column: 1
				},
				end: {
					line: 160,
					column: 2
				}
			},
			'39': {
				start: {
					line: 76,
					column: 2
				},
				end: {
					line: 76,
					column: 30
				}
			},
			'40': {
				start: {
					line: 79,
					column: 2
				},
				end: {
					line: 159,
					column: 3
				}
			},
			'41': {
				start: {
					line: 80,
					column: 3
				},
				end: {
					line: 80,
					column: 15
				}
			},
			'42': {
				start: {
					line: 81,
					column: 3
				},
				end: {
					line: 81,
					column: 33
				}
			},
			'43': {
				start: {
					line: 84,
					column: 3
				},
				end: {
					line: 84,
					column: 54
				}
			},
			'44': {
				start: {
					line: 88,
					column: 3
				},
				end: {
					line: 90,
					column: 30
				}
			},
			'45': {
				start: {
					line: 93,
					column: 3
				},
				end: {
					line: 95,
					column: 4
				}
			},
			'46': {
				start: {
					line: 94,
					column: 4
				},
				end: {
					line: 94,
					column: 36
				}
			},
			'47': {
				start: {
					line: 98,
					column: 3
				},
				end: {
					line: 110,
					column: 4
				}
			},
			'48': {
				start: {
					line: 104,
					column: 4
				},
				end: {
					line: 104,
					column: 65
				}
			},
			'49': {
				start: {
					line: 105,
					column: 4
				},
				end: {
					line: 109,
					column: 5
				}
			},
			'50': {
				start: {
					line: 106,
					column: 5
				},
				end: {
					line: 106,
					column: 70
				}
			},
			'51': {
				start: {
					line: 108,
					column: 5
				},
				end: {
					line: 108,
					column: 47
				}
			},
			'52': {
				start: {
					line: 113,
					column: 3
				},
				end: {
					line: 126,
					column: 4
				}
			},
			'53': {
				start: {
					line: 115,
					column: 4
				},
				end: {
					line: 125,
					column: 5
				}
			},
			'54': {
				start: {
					line: 117,
					column: 5
				},
				end: {
					line: 117,
					column: 45
				}
			},
			'55': {
				start: {
					line: 118,
					column: 5
				},
				end: {
					line: 118,
					column: 17
				}
			},
			'56': {
				start: {
					line: 119,
					column: 11
				},
				end: {
					line: 125,
					column: 5
				}
			},
			'57': {
				start: {
					line: 121,
					column: 5
				},
				end: {
					line: 121,
					column: 49
				}
			},
			'58': {
				start: {
					line: 122,
					column: 5
				},
				end: {
					line: 122,
					column: 17
				}
			},
			'59': {
				start: {
					line: 124,
					column: 5
				},
				end: {
					line: 124,
					column: 47
				}
			},
			'60': {
				start: {
					line: 129,
					column: 3
				},
				end: {
					line: 158,
					column: 4
				}
			},
			'61': {
				start: {
					line: 131,
					column: 4
				},
				end: {
					line: 134,
					column: 6
				}
			},
			'62': {
				start: {
					line: 137,
					column: 4
				},
				end: {
					line: 140,
					column: 6
				}
			},
			'63': {
				start: {
					line: 143,
					column: 4
				},
				end: {
					line: 146,
					column: 6
				}
			},
			'64': {
				start: {
					line: 149,
					column: 4
				},
				end: {
					line: 152,
					column: 6
				}
			},
			'65': {
				start: {
					line: 154,
					column: 4
				},
				end: {
					line: 157,
					column: 6
				}
			},
			'66': {
				start: {
					line: 162,
					column: 1
				},
				end: {
					line: 162,
					column: 26
				}
			},
			'67': {
				start: {
					line: 166,
					column: 17
				},
				end: {
					line: 166,
					column: 19
				}
			},
			'68': {
				start: {
					line: 169,
					column: 1
				},
				end: {
					line: 169,
					column: 53
				}
			},
			'69': {
				start: {
					line: 170,
					column: 1
				},
				end: {
					line: 172,
					column: 2
				}
			},
			'70': {
				start: {
					line: 171,
					column: 2
				},
				end: {
					line: 171,
					column: 40
				}
			},
			'71': {
				start: {
					line: 174,
					column: 1
				},
				end: {
					line: 174,
					column: 11
				}
			},
			'72': {
				start: {
					line: 178,
					column: 1
				},
				end: {
					line: 189,
					column: 4
				}
			},
			'73': {
				start: {
					line: 179,
					column: 2
				},
				end: {
					line: 181,
					column: 3
				}
			},
			'74': {
				start: {
					line: 180,
					column: 3
				},
				end: {
					line: 180,
					column: 24
				}
			},
			'75': {
				start: {
					line: 183,
					column: 2
				},
				end: {
					line: 183,
					column: 38
				}
			},
			'76': {
				start: {
					line: 184,
					column: 2
				},
				end: {
					line: 184,
					column: 46
				}
			},
			'77': {
				start: {
					line: 185,
					column: 2
				},
				end: {
					line: 185,
					column: 48
				}
			},
			'78': {
				start: {
					line: 186,
					column: 2
				},
				end: {
					line: 186,
					column: 46
				}
			},
			'79': {
				start: {
					line: 187,
					column: 2
				},
				end: {
					line: 187,
					column: 66
				}
			},
			'80': {
				start: {
					line: 188,
					column: 2
				},
				end: {
					line: 188,
					column: 44
				}
			},
			'81': {
				start: {
					line: 194,
					column: 2
				},
				end: {
					line: 194,
					column: 10
				}
			},
			'82': {
				start: {
					line: 196,
					column: 2
				},
				end: {
					line: 196,
					column: 19
				}
			},
			'83': {
				start: {
					line: 197,
					column: 2
				},
				end: {
					line: 197,
					column: 23
				}
			},
			'84': {
				start: {
					line: 198,
					column: 2
				},
				end: {
					line: 198,
					column: 27
				}
			},
			'85': {
				start: {
					line: 199,
					column: 2
				},
				end: {
					line: 199,
					column: 28
				}
			},
			'86': {
				start: {
					line: 200,
					column: 2
				},
				end: {
					line: 200,
					column: 27
				}
			},
			'87': {
				start: {
					line: 201,
					column: 2
				},
				end: {
					line: 201,
					column: 25
				}
			},
			'88': {
				start: {
					line: 205,
					column: 2
				},
				end: {
					line: 205,
					column: 72
				}
			},
			'89': {
				start: {
					line: 206,
					column: 2
				},
				end: {
					line: 206,
					column: 23
				}
			},
			'90': {
				start: {
					line: 207,
					column: 2
				},
				end: {
					line: 207,
					column: 53
				}
			},
			'91': {
				start: {
					line: 210,
					column: 2
				},
				end: {
					line: 210,
					column: 72
				}
			},
			'92': {
				start: {
					line: 210,
					column: 40
				},
				end: {
					line: 210,
					column: 69
				}
			},
			'93': {
				start: {
					line: 215,
					column: 10
				},
				end: {
					line: 215,
					column: 23
				}
			},
			'94': {
				start: {
					line: 216,
					column: 16
				},
				end: {
					line: 216,
					column: 51
				}
			},
			'95': {
				start: {
					line: 218,
					column: 2
				},
				end: {
					line: 218,
					column: 31
				}
			},
			'96': {
				start: {
					line: 220,
					column: 2
				},
				end: {
					line: 220,
					column: 20
				}
			},
			'97': {
				start: {
					line: 224,
					column: 2
				},
				end: {
					line: 226,
					column: 3
				}
			},
			'98': {
				start: {
					line: 225,
					column: 3
				},
				end: {
					line: 225,
					column: 26
				}
			},
			'99': {
				start: {
					line: 228,
					column: 2
				},
				end: {
					line: 235,
					column: 4
				}
			},
			'100': {
				start: {
					line: 240,
					column: 10
				},
				end: {
					line: 240,
					column: 14
				}
			},
			'101': {
				start: {
					line: 241,
					column: 19
				},
				end: {
					line: 241,
					column: 63
				}
			},
			'102': {
				start: {
					line: 242,
					column: 7
				},
				end: {
					line: 242,
					column: 11
				}
			},
			'103': {
				start: {
					line: 243,
					column: 11
				},
				end: {
					line: 243,
					column: 13
				}
			},
			'104': {
				start: {
					line: 244,
					column: 10
				},
				end: {
					line: 244,
					column: 36
				}
			},
			'105': {
				start: {
					line: 246,
					column: 2
				},
				end: {
					line: 312,
					column: 3
				}
			},
			'106': {
				start: {
					line: 248,
					column: 3
				},
				end: {
					line: 253,
					column: 24
				}
			},
			'107': {
				start: {
					line: 256,
					column: 4
				},
				end: {
					line: 260,
					column: 5
				}
			},
			'108': {
				start: {
					line: 257,
					column: 5
				},
				end: {
					line: 257,
					column: 44
				}
			},
			'109': {
				start: {
					line: 259,
					column: 5
				},
				end: {
					line: 259,
					column: 44
				}
			},
			'110': {
				start: {
					line: 263,
					column: 3
				},
				end: {
					line: 265,
					column: 4
				}
			},
			'111': {
				start: {
					line: 264,
					column: 4
				},
				end: {
					line: 264,
					column: 49
				}
			},
			'112': {
				start: {
					line: 268,
					column: 3
				},
				end: {
					line: 277,
					column: 4
				}
			},
			'113': {
				start: {
					line: 269,
					column: 4
				},
				end: {
					line: 272,
					column: 15
				}
			},
			'114': {
				start: {
					line: 273,
					column: 10
				},
				end: {
					line: 277,
					column: 4
				}
			},
			'115': {
				start: {
					line: 274,
					column: 4
				},
				end: {
					line: 274,
					column: 52
				}
			},
			'116': {
				start: {
					line: 275,
					column: 10
				},
				end: {
					line: 277,
					column: 4
				}
			},
			'117': {
				start: {
					line: 276,
					column: 4
				},
				end: {
					line: 276,
					column: 50
				}
			},
			'118': {
				start: {
					line: 279,
					column: 3
				},
				end: {
					line: 311,
					column: 4
				}
			},
			'119': {
				start: {
					line: 281,
					column: 4
				},
				end: {
					line: 306,
					column: 5
				}
			},
			'120': {
				start: {
					line: 282,
					column: 5
				},
				end: {
					line: 297,
					column: 6
				}
			},
			'121': {
				start: {
					line: 284,
					column: 7
				},
				end: {
					line: 284,
					column: 36
				}
			},
			'122': {
				start: {
					line: 285,
					column: 7
				},
				end: {
					line: 285,
					column: 13
				}
			},
			'123': {
				start: {
					line: 287,
					column: 7
				},
				end: {
					line: 287,
					column: 36
				}
			},
			'124': {
				start: {
					line: 288,
					column: 7
				},
				end: {
					line: 288,
					column: 13
				}
			},
			'125': {
				start: {
					line: 290,
					column: 7
				},
				end: {
					line: 290,
					column: 35
				}
			},
			'126': {
				start: {
					line: 291,
					column: 7
				},
				end: {
					line: 291,
					column: 13
				}
			},
			'127': {
				start: {
					line: 293,
					column: 7
				},
				end: {
					line: 293,
					column: 34
				}
			},
			'128': {
				start: {
					line: 294,
					column: 7
				},
				end: {
					line: 294,
					column: 13
				}
			},
			'129': {
				start: {
					line: 296,
					column: 7
				},
				end: {
					line: 296,
					column: 34
				}
			},
			'130': {
				start: {
					line: 299,
					column: 5
				},
				end: {
					line: 305,
					column: 6
				}
			},
			'131': {
				start: {
					line: 300,
					column: 6
				},
				end: {
					line: 300,
					column: 55
				}
			},
			'132': {
				start: {
					line: 308,
					column: 4
				},
				end: {
					line: 308,
					column: 27
				}
			},
			'133': {
				start: {
					line: 310,
					column: 4
				},
				end: {
					line: 310,
					column: 16
				}
			},
			'134': {
				start: {
					line: 314,
					column: 2
				},
				end: {
					line: 314,
					column: 55
				}
			}
		},
		fnMap: {
			'0': {
				name: 'getNotationPrefix',
				decl: {
					start: {
						line: 7,
						column: 9
					},
					end: {
						line: 7,
						column: 26
					}
				},
				loc: {
					start: {
						line: 7,
						column: 54
					},
					end: {
						line: 46,
						column: 1
					}
				},
				line: 7
			},
			'1': {
				name: '(anonymous_1)',
				decl: {
					start: {
						line: 9,
						column: 17
					},
					end: {
						line: 9,
						column: 18
					}
				},
				loc: {
					start: {
						line: 9,
						column: 36
					},
					end: {
						line: 19,
						column: 3
					}
				},
				line: 9
			},
			'2': {
				name: 'getValidMovesByPieceType',
				decl: {
					start: {
						line: 48,
						column: 9
					},
					end: {
						line: 48,
						column: 33
					}
				},
				loc: {
					start: {
						line: 48,
						column: 58
					},
					end: {
						line: 60,
						column: 1
					}
				},
				line: 48
			},
			'3': {
				name: 'notate',
				decl: {
					start: {
						line: 62,
						column: 9
					},
					end: {
						line: 62,
						column: 15
					}
				},
				loc: {
					start: {
						line: 62,
						column: 41
					},
					end: {
						line: 163,
						column: 1
					}
				},
				line: 62
			},
			'4': {
				name: 'parseNotation',
				decl: {
					start: {
						line: 165,
						column: 9
					},
					end: {
						line: 165,
						column: 22
					}
				},
				loc: {
					start: {
						line: 165,
						column: 34
					},
					end: {
						line: 175,
						column: 1
					}
				},
				line: 165
			},
			'5': {
				name: 'updateGameClient',
				decl: {
					start: {
						line: 177,
						column: 9
					},
					end: {
						line: 177,
						column: 25
					}
				},
				loc: {
					start: {
						line: 177,
						column: 39
					},
					end: {
						line: 190,
						column: 1
					}
				},
				line: 177
			},
			'6': {
				name: '(anonymous_6)',
				decl: {
					start: {
						line: 178,
						column: 29
					},
					end: {
						line: 178,
						column: 30
					}
				},
				loc: {
					start: {
						line: 178,
						column: 52
					},
					end: {
						line: 189,
						column: 2
					}
				},
				line: 178
			},
			'7': {
				name: '(anonymous_7)',
				decl: {
					start: {
						line: 193,
						column: 1
					},
					end: {
						line: 193,
						column: 2
					}
				},
				loc: {
					start: {
						line: 193,
						column: 26
					},
					end: {
						line: 211,
						column: 2
					}
				},
				line: 193
			},
			'8': {
				name: '(anonymous_8)',
				decl: {
					start: {
						line: 210,
						column: 24
					},
					end: {
						line: 210,
						column: 25
					}
				},
				loc: {
					start: {
						line: 210,
						column: 40
					},
					end: {
						line: 210,
						column: 69
					}
				},
				line: 210
			},
			'9': {
				name: '(anonymous_9)',
				decl: {
					start: {
						line: 213,
						column: 1
					},
					end: {
						line: 213,
						column: 2
					}
				},
				loc: {
					start: {
						line: 213,
						column: 22
					},
					end: {
						line: 221,
						column: 2
					}
				},
				line: 213
			},
			'10': {
				name: '(anonymous_10)',
				decl: {
					start: {
						line: 223,
						column: 1
					},
					end: {
						line: 223,
						column: 2
					}
				},
				loc: {
					start: {
						line: 223,
						column: 25
					},
					end: {
						line: 236,
						column: 2
					}
				},
				line: 223
			},
			'11': {
				name: '(anonymous_11)',
				decl: {
					start: {
						line: 238,
						column: 1
					},
					end: {
						line: 238,
						column: 2
					}
				},
				loc: {
					start: {
						line: 238,
						column: 26
					},
					end: {
						line: 315,
						column: 2
					}
				},
				line: 238
			}
		},
		branchMap: {
			'0': {
				loc: {
					start: {
						line: 13,
						column: 4
					},
					end: {
						line: 15,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 13,
						column: 4
					},
					end: {
						line: 15,
						column: 5
					}
				}, {
					start: {
						line: 13,
						column: 4
					},
					end: {
						line: 15,
						column: 5
					}
				}],
				line: 13
			},
			'1': {
				loc: {
					start: {
						line: 28,
						column: 2
					},
					end: {
						line: 34,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 28,
						column: 2
					},
					end: {
						line: 34,
						column: 3
					}
				}, {
					start: {
						line: 28,
						column: 2
					},
					end: {
						line: 34,
						column: 3
					}
				}],
				line: 28
			},
			'2': {
				loc: {
					start: {
						line: 32,
						column: 21
					},
					end: {
						line: 32,
						column: 83
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 32,
						column: 61
					},
					end: {
						line: 32,
						column: 79
					}
				}, {
					start: {
						line: 32,
						column: 82
					},
					end: {
						line: 32,
						column: 83
					}
				}],
				line: 32
			},
			'3': {
				loc: {
					start: {
						line: 33,
						column: 21
					},
					end: {
						line: 33,
						column: 83
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 33,
						column: 61
					},
					end: {
						line: 33,
						column: 79
					}
				}, {
					start: {
						line: 33,
						column: 82
					},
					end: {
						line: 33,
						column: 83
					}
				}],
				line: 33
			},
			'4': {
				loc: {
					start: {
						line: 37,
						column: 1
					},
					end: {
						line: 39,
						column: 2
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 37,
						column: 1
					},
					end: {
						line: 39,
						column: 2
					}
				}, {
					start: {
						line: 37,
						column: 1
					},
					end: {
						line: 39,
						column: 2
					}
				}],
				line: 37
			},
			'5': {
				loc: {
					start: {
						line: 41,
						column: 1
					},
					end: {
						line: 43,
						column: 2
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 41,
						column: 1
					},
					end: {
						line: 43,
						column: 2
					}
				}, {
					start: {
						line: 41,
						column: 1
					},
					end: {
						line: 43,
						column: 2
					}
				}],
				line: 41
			},
			'6': {
				loc: {
					start: {
						line: 54,
						column: 2
					},
					end: {
						line: 56,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 54,
						column: 2
					},
					end: {
						line: 56,
						column: 3
					}
				}, {
					start: {
						line: 54,
						column: 2
					},
					end: {
						line: 56,
						column: 3
					}
				}],
				line: 54
			},
			'7': {
				loc: {
					start: {
						line: 84,
						column: 13
					},
					end: {
						line: 84,
						column: 32
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 84,
						column: 24
					},
					end: {
						line: 84,
						column: 27
					}
				}, {
					start: {
						line: 84,
						column: 30
					},
					end: {
						line: 84,
						column: 32
					}
				}],
				line: 84
			},
			'8': {
				loc: {
					start: {
						line: 89,
						column: 4
					},
					end: {
						line: 90,
						column: 29
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 89,
						column: 5
					},
					end: {
						line: 89,
						column: 18
					}
				}, {
					start: {
						line: 89,
						column: 22
					},
					end: {
						line: 89,
						column: 35
					}
				}, {
					start: {
						line: 90,
						column: 4
					},
					end: {
						line: 90,
						column: 29
					}
				}],
				line: 89
			},
			'9': {
				loc: {
					start: {
						line: 93,
						column: 3
					},
					end: {
						line: 95,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 93,
						column: 3
					},
					end: {
						line: 95,
						column: 4
					}
				}, {
					start: {
						line: 93,
						column: 3
					},
					end: {
						line: 95,
						column: 4
					}
				}],
				line: 93
			},
			'10': {
				loc: {
					start: {
						line: 93,
						column: 7
					},
					end: {
						line: 93,
						column: 44
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 93,
						column: 7
					},
					end: {
						line: 93,
						column: 15
					}
				}, {
					start: {
						line: 93,
						column: 19
					},
					end: {
						line: 93,
						column: 44
					}
				}],
				line: 93
			},
			'11': {
				loc: {
					start: {
						line: 98,
						column: 3
					},
					end: {
						line: 110,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 98,
						column: 3
					},
					end: {
						line: 110,
						column: 4
					}
				}, {
					start: {
						line: 98,
						column: 3
					},
					end: {
						line: 110,
						column: 4
					}
				}],
				line: 98
			},
			'12': {
				loc: {
					start: {
						line: 98,
						column: 7
					},
					end: {
						line: 101,
						column: 29
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 98,
						column: 7
					},
					end: {
						line: 98,
						column: 34
					}
				}, {
					start: {
						line: 99,
						column: 4
					},
					end: {
						line: 99,
						column: 31
					}
				}, {
					start: {
						line: 100,
						column: 4
					},
					end: {
						line: 100,
						column: 30
					}
				}, {
					start: {
						line: 101,
						column: 4
					},
					end: {
						line: 101,
						column: 29
					}
				}],
				line: 98
			},
			'13': {
				loc: {
					start: {
						line: 105,
						column: 4
					},
					end: {
						line: 109,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 105,
						column: 4
					},
					end: {
						line: 109,
						column: 5
					}
				}, {
					start: {
						line: 105,
						column: 4
					},
					end: {
						line: 109,
						column: 5
					}
				}],
				line: 105
			},
			'14': {
				loc: {
					start: {
						line: 113,
						column: 3
					},
					end: {
						line: 126,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 113,
						column: 3
					},
					end: {
						line: 126,
						column: 4
					}
				}, {
					start: {
						line: 113,
						column: 3
					},
					end: {
						line: 126,
						column: 4
					}
				}],
				line: 113
			},
			'15': {
				loc: {
					start: {
						line: 115,
						column: 4
					},
					end: {
						line: 125,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 115,
						column: 4
					},
					end: {
						line: 125,
						column: 5
					}
				}, {
					start: {
						line: 115,
						column: 4
					},
					end: {
						line: 125,
						column: 5
					}
				}],
				line: 115
			},
			'16': {
				loc: {
					start: {
						line: 115,
						column: 8
					},
					end: {
						line: 115,
						column: 57
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 115,
						column: 8
					},
					end: {
						line: 115,
						column: 38
					}
				}, {
					start: {
						line: 115,
						column: 42
					},
					end: {
						line: 115,
						column: 57
					}
				}],
				line: 115
			},
			'17': {
				loc: {
					start: {
						line: 117,
						column: 14
					},
					end: {
						line: 117,
						column: 44
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 117,
						column: 31
					},
					end: {
						line: 117,
						column: 36
					}
				}, {
					start: {
						line: 117,
						column: 39
					},
					end: {
						line: 117,
						column: 44
					}
				}],
				line: 117
			},
			'18': {
				loc: {
					start: {
						line: 119,
						column: 11
					},
					end: {
						line: 125,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 119,
						column: 11
					},
					end: {
						line: 125,
						column: 5
					}
				}, {
					start: {
						line: 119,
						column: 11
					},
					end: {
						line: 125,
						column: 5
					}
				}],
				line: 119
			},
			'19': {
				loc: {
					start: {
						line: 119,
						column: 15
					},
					end: {
						line: 119,
						column: 64
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 119,
						column: 15
					},
					end: {
						line: 119,
						column: 45
					}
				}, {
					start: {
						line: 119,
						column: 49
					},
					end: {
						line: 119,
						column: 64
					}
				}],
				line: 119
			},
			'20': {
				loc: {
					start: {
						line: 121,
						column: 14
					},
					end: {
						line: 121,
						column: 48
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 121,
						column: 31
					},
					end: {
						line: 121,
						column: 38
					}
				}, {
					start: {
						line: 121,
						column: 41
					},
					end: {
						line: 121,
						column: 48
					}
				}],
				line: 121
			},
			'21': {
				loc: {
					start: {
						line: 129,
						column: 3
					},
					end: {
						line: 158,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 129,
						column: 3
					},
					end: {
						line: 158,
						column: 4
					}
				}, {
					start: {
						line: 129,
						column: 3
					},
					end: {
						line: 158,
						column: 4
					}
				}],
				line: 129
			},
			'22': {
				loc: {
					start: {
						line: 170,
						column: 1
					},
					end: {
						line: 172,
						column: 2
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 170,
						column: 1
					},
					end: {
						line: 172,
						column: 2
					}
				}, {
					start: {
						line: 170,
						column: 1
					},
					end: {
						line: 172,
						column: 2
					}
				}],
				line: 170
			},
			'23': {
				loc: {
					start: {
						line: 179,
						column: 2
					},
					end: {
						line: 181,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 179,
						column: 2
					},
					end: {
						line: 181,
						column: 3
					}
				}, {
					start: {
						line: 179,
						column: 2
					},
					end: {
						line: 181,
						column: 3
					}
				}],
				line: 179
			},
			'24': {
				loc: {
					start: {
						line: 205,
						column: 13
					},
					end: {
						line: 205,
						column: 71
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 205,
						column: 55
					},
					end: {
						line: 205,
						column: 63
					}
				}, {
					start: {
						line: 205,
						column: 66
					},
					end: {
						line: 205,
						column: 71
					}
				}],
				line: 205
			},
			'25': {
				loc: {
					start: {
						line: 205,
						column: 14
					},
					end: {
						line: 205,
						column: 51
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 205,
						column: 14
					},
					end: {
						line: 205,
						column: 18
					}
				}, {
					start: {
						line: 205,
						column: 22
					},
					end: {
						line: 205,
						column: 51
					}
				}],
				line: 205
			},
			'26': {
				loc: {
					start: {
						line: 224,
						column: 2
					},
					end: {
						line: 226,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 224,
						column: 2
					},
					end: {
						line: 226,
						column: 3
					}
				}, {
					start: {
						line: 224,
						column: 2
					},
					end: {
						line: 226,
						column: 3
					}
				}],
				line: 224
			},
			'27': {
				loc: {
					start: {
						line: 246,
						column: 2
					},
					end: {
						line: 312,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 246,
						column: 2
					},
					end: {
						line: 312,
						column: 3
					}
				}, {
					start: {
						line: 246,
						column: 2
					},
					end: {
						line: 312,
						column: 3
					}
				}],
				line: 246
			},
			'28': {
				loc: {
					start: {
						line: 246,
						column: 6
					},
					end: {
						line: 246,
						column: 46
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 246,
						column: 6
					},
					end: {
						line: 246,
						column: 14
					}
				}, {
					start: {
						line: 246,
						column: 18
					},
					end: {
						line: 246,
						column: 46
					}
				}],
				line: 246
			},
			'29': {
				loc: {
					start: {
						line: 256,
						column: 4
					},
					end: {
						line: 260,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 256,
						column: 4
					},
					end: {
						line: 260,
						column: 5
					}
				}, {
					start: {
						line: 256,
						column: 4
					},
					end: {
						line: 260,
						column: 5
					}
				}],
				line: 256
			},
			'30': {
				loc: {
					start: {
						line: 263,
						column: 3
					},
					end: {
						line: 265,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 263,
						column: 3
					},
					end: {
						line: 265,
						column: 4
					}
				}, {
					start: {
						line: 263,
						column: 3
					},
					end: {
						line: 265,
						column: 4
					}
				}],
				line: 263
			},
			'31': {
				loc: {
					start: {
						line: 268,
						column: 3
					},
					end: {
						line: 277,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 268,
						column: 3
					},
					end: {
						line: 277,
						column: 4
					}
				}, {
					start: {
						line: 268,
						column: 3
					},
					end: {
						line: 277,
						column: 4
					}
				}],
				line: 268
			},
			'32': {
				loc: {
					start: {
						line: 273,
						column: 10
					},
					end: {
						line: 277,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 273,
						column: 10
					},
					end: {
						line: 277,
						column: 4
					}
				}, {
					start: {
						line: 273,
						column: 10
					},
					end: {
						line: 277,
						column: 4
					}
				}],
				line: 273
			},
			'33': {
				loc: {
					start: {
						line: 273,
						column: 14
					},
					end: {
						line: 273,
						column: 78
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 273,
						column: 14
					},
					end: {
						line: 273,
						column: 43
					}
				}, {
					start: {
						line: 273,
						column: 47
					},
					end: {
						line: 273,
						column: 66
					}
				}, {
					start: {
						line: 273,
						column: 70
					},
					end: {
						line: 273,
						column: 78
					}
				}],
				line: 273
			},
			'34': {
				loc: {
					start: {
						line: 275,
						column: 10
					},
					end: {
						line: 277,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 275,
						column: 10
					},
					end: {
						line: 277,
						column: 4
					}
				}, {
					start: {
						line: 275,
						column: 10
					},
					end: {
						line: 277,
						column: 4
					}
				}],
				line: 275
			},
			'35': {
				loc: {
					start: {
						line: 279,
						column: 3
					},
					end: {
						line: 311,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 279,
						column: 3
					},
					end: {
						line: 311,
						column: 4
					}
				}, {
					start: {
						line: 279,
						column: 3
					},
					end: {
						line: 311,
						column: 4
					}
				}],
				line: 279
			},
			'36': {
				loc: {
					start: {
						line: 281,
						column: 4
					},
					end: {
						line: 306,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 281,
						column: 4
					},
					end: {
						line: 306,
						column: 5
					}
				}, {
					start: {
						line: 281,
						column: 4
					},
					end: {
						line: 306,
						column: 5
					}
				}],
				line: 281
			},
			'37': {
				loc: {
					start: {
						line: 282,
						column: 5
					},
					end: {
						line: 297,
						column: 6
					}
				},
				type: 'switch',
				locations: [{
					start: {
						line: 283,
						column: 6
					},
					end: {
						line: 285,
						column: 13
					}
				}, {
					start: {
						line: 286,
						column: 6
					},
					end: {
						line: 288,
						column: 13
					}
				}, {
					start: {
						line: 289,
						column: 6
					},
					end: {
						line: 291,
						column: 13
					}
				}, {
					start: {
						line: 292,
						column: 6
					},
					end: {
						line: 294,
						column: 13
					}
				}, {
					start: {
						line: 295,
						column: 6
					},
					end: {
						line: 296,
						column: 34
					}
				}],
				line: 282
			},
			'38': {
				loc: {
					start: {
						line: 299,
						column: 5
					},
					end: {
						line: 305,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 299,
						column: 5
					},
					end: {
						line: 305,
						column: 6
					}
				}, {
					start: {
						line: 299,
						column: 5
					},
					end: {
						line: 305,
						column: 6
					}
				}],
				line: 299
			}
		},
		s: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0,
			'35': 0,
			'36': 0,
			'37': 0,
			'38': 0,
			'39': 0,
			'40': 0,
			'41': 0,
			'42': 0,
			'43': 0,
			'44': 0,
			'45': 0,
			'46': 0,
			'47': 0,
			'48': 0,
			'49': 0,
			'50': 0,
			'51': 0,
			'52': 0,
			'53': 0,
			'54': 0,
			'55': 0,
			'56': 0,
			'57': 0,
			'58': 0,
			'59': 0,
			'60': 0,
			'61': 0,
			'62': 0,
			'63': 0,
			'64': 0,
			'65': 0,
			'66': 0,
			'67': 0,
			'68': 0,
			'69': 0,
			'70': 0,
			'71': 0,
			'72': 0,
			'73': 0,
			'74': 0,
			'75': 0,
			'76': 0,
			'77': 0,
			'78': 0,
			'79': 0,
			'80': 0,
			'81': 0,
			'82': 0,
			'83': 0,
			'84': 0,
			'85': 0,
			'86': 0,
			'87': 0,
			'88': 0,
			'89': 0,
			'90': 0,
			'91': 0,
			'92': 0,
			'93': 0,
			'94': 0,
			'95': 0,
			'96': 0,
			'97': 0,
			'98': 0,
			'99': 0,
			'100': 0,
			'101': 0,
			'102': 0,
			'103': 0,
			'104': 0,
			'105': 0,
			'106': 0,
			'107': 0,
			'108': 0,
			'109': 0,
			'110': 0,
			'111': 0,
			'112': 0,
			'113': 0,
			'114': 0,
			'115': 0,
			'116': 0,
			'117': 0,
			'118': 0,
			'119': 0,
			'120': 0,
			'121': 0,
			'122': 0,
			'123': 0,
			'124': 0,
			'125': 0,
			'126': 0,
			'127': 0,
			'128': 0,
			'129': 0,
			'130': 0,
			'131': 0,
			'132': 0,
			'133': 0,
			'134': 0
		},
		f: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0
		},
		b: {
			'0': [0, 0],
			'1': [0, 0],
			'2': [0, 0],
			'3': [0, 0],
			'4': [0, 0],
			'5': [0, 0],
			'6': [0, 0],
			'7': [0, 0],
			'8': [0, 0, 0],
			'9': [0, 0],
			'10': [0, 0],
			'11': [0, 0],
			'12': [0, 0, 0, 0],
			'13': [0, 0],
			'14': [0, 0],
			'15': [0, 0],
			'16': [0, 0],
			'17': [0, 0],
			'18': [0, 0],
			'19': [0, 0],
			'20': [0, 0],
			'21': [0, 0],
			'22': [0, 0],
			'23': [0, 0],
			'24': [0, 0],
			'25': [0, 0],
			'26': [0, 0],
			'27': [0, 0],
			'28': [0, 0],
			'29': [0, 0],
			'30': [0, 0],
			'31': [0, 0],
			'32': [0, 0],
			'33': [0, 0, 0],
			'34': [0, 0],
			'35': [0, 0],
			'36': [0, 0],
			'37': [0, 0, 0, 0, 0],
			'38': [0, 0]
		},
		_coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	},
	    coverage = global[gcv] || (global[gcv] = {});

	if (coverage[path] && coverage[path].hash === hash) {
		return coverage[path];
	}

	coverageData.hash = hash;
	return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.AlgebraicGameClient = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _game = require('./game');

var _gameValidation = require('./gameValidation');

var _piece = require('./piece');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// private methods
function getNotationPrefix(src, dest, movesForPiece) {
	cov_1htdbc7jct.f[0]++;
	cov_1htdbc7jct.s[0]++;

	var containsDest = function containsDest(squares) {
		cov_1htdbc7jct.f[1]++;

		var n = (cov_1htdbc7jct.s[1]++, 0);

		cov_1htdbc7jct.s[2]++;
		for (n = 0; n < squares.length; n++) {
			cov_1htdbc7jct.s[3]++;

			if (squares[n] === dest) {
				cov_1htdbc7jct.b[0][0]++;
				cov_1htdbc7jct.s[4]++;

				return true;
			} else {
				cov_1htdbc7jct.b[0][1]++;
			}
		}

		cov_1htdbc7jct.s[5]++;
		return false;
	},
	    i = (cov_1htdbc7jct.s[6]++, 0),
	    file = (cov_1htdbc7jct.s[7]++, ''),
	    fileHash = (cov_1htdbc7jct.s[8]++, {}),
	    prefix = (cov_1htdbc7jct.s[9]++, src.piece.notation),
	    rank = (cov_1htdbc7jct.s[10]++, 0),
	    rankHash = (cov_1htdbc7jct.s[11]++, {});

	cov_1htdbc7jct.s[12]++;
	for (i = 0; i < movesForPiece.length; i++) {
		cov_1htdbc7jct.s[13]++;

		if (containsDest(movesForPiece[i].squares)) {
			cov_1htdbc7jct.b[1][0]++;
			cov_1htdbc7jct.s[14]++;

			file = movesForPiece[i].src.file;
			cov_1htdbc7jct.s[15]++;
			rank = movesForPiece[i].src.rank;

			cov_1htdbc7jct.s[16]++;
			fileHash[file] = typeof fileHash[file] !== 'undefined' ? (cov_1htdbc7jct.b[2][0]++, fileHash[file] + 1) : (cov_1htdbc7jct.b[2][1]++, 1);
			cov_1htdbc7jct.s[17]++;
			rankHash[rank] = typeof rankHash[rank] !== 'undefined' ? (cov_1htdbc7jct.b[3][0]++, rankHash[rank] + 1) : (cov_1htdbc7jct.b[3][1]++, 1);
		} else {
			cov_1htdbc7jct.b[1][1]++;
		}
	}

	cov_1htdbc7jct.s[18]++;
	if (Object.keys(fileHash).length > 1) {
		cov_1htdbc7jct.b[4][0]++;
		cov_1htdbc7jct.s[19]++;

		prefix += src.file;
	} else {
		cov_1htdbc7jct.b[4][1]++;
	}

	cov_1htdbc7jct.s[20]++;
	if (Object.keys(rankHash).length > Object.keys(fileHash).length) {
		cov_1htdbc7jct.b[5][0]++;
		cov_1htdbc7jct.s[21]++;

		prefix += src.rank;
	} else {
		cov_1htdbc7jct.b[5][1]++;
	}

	cov_1htdbc7jct.s[22]++;
	return prefix;
}

function getValidMovesByPieceType(pieceType, validMoves) {
	cov_1htdbc7jct.f[2]++;

	var byPiece = (cov_1htdbc7jct.s[23]++, []),
	    i = (cov_1htdbc7jct.s[24]++, 0);

	cov_1htdbc7jct.s[25]++;
	for (i = 0; i < validMoves.length; i++) {
		cov_1htdbc7jct.s[26]++;

		if (validMoves[i].src.piece.type === pieceType) {
			cov_1htdbc7jct.b[6][0]++;
			cov_1htdbc7jct.s[27]++;

			byPiece.push(validMoves[i]);
		} else {
			cov_1htdbc7jct.b[6][1]++;
		}
	}

	cov_1htdbc7jct.s[28]++;
	return byPiece;
}

function notate(validMoves, gameClient) {
	cov_1htdbc7jct.f[3]++;

	var algebraicNotation = (cov_1htdbc7jct.s[29]++, {}),
	    i = (cov_1htdbc7jct.s[30]++, 0),
	    isPromotion = (cov_1htdbc7jct.s[31]++, false),
	    movesForPiece = (cov_1htdbc7jct.s[32]++, []),
	    n = (cov_1htdbc7jct.s[33]++, 0),
	    p = (cov_1htdbc7jct.s[34]++, null),
	    prefix = (cov_1htdbc7jct.s[35]++, ''),
	    suffix = (cov_1htdbc7jct.s[36]++, ''),
	    sq = (cov_1htdbc7jct.s[37]++, null);

	// iterate through each starting squares valid moves
	cov_1htdbc7jct.s[38]++;
	for (i = 0; i < validMoves.length; i++) {
		cov_1htdbc7jct.s[39]++;

		p = validMoves[i].src.piece;

		// iterate each potential move and build prefix and suffix for notation
		cov_1htdbc7jct.s[40]++;
		for (n = 0; n < validMoves[i].squares.length; n++) {
			cov_1htdbc7jct.s[41]++;

			prefix = '';
			cov_1htdbc7jct.s[42]++;
			sq = validMoves[i].squares[n];

			// set suffix for notation
			cov_1htdbc7jct.s[43]++;
			suffix = (sq.piece ? (cov_1htdbc7jct.b[7][0]++, 'x') : (cov_1htdbc7jct.b[7][1]++, '')) + sq.file + sq.rank;

			// check for potential promotion
			/* eslint no-magic-numbers: 0 */
			cov_1htdbc7jct.s[44]++;
			isPromotion = ((cov_1htdbc7jct.b[8][0]++, sq.rank === 8) || (cov_1htdbc7jct.b[8][1]++, sq.rank === 1)) && (cov_1htdbc7jct.b[8][2]++, p.type === _piece.PieceType.Pawn);

			// squares with pawns
			cov_1htdbc7jct.s[45]++;
			if ((cov_1htdbc7jct.b[10][0]++, sq.piece) && (cov_1htdbc7jct.b[10][1]++, p.type === _piece.PieceType.Pawn)) {
				cov_1htdbc7jct.b[9][0]++;
				cov_1htdbc7jct.s[46]++;

				prefix = validMoves[i].src.file;
			} else {
				cov_1htdbc7jct.b[9][1]++;
			}

			// squares with Bishop, Knight, Queen or Rook pieces
			cov_1htdbc7jct.s[47]++;
			if ((cov_1htdbc7jct.b[12][0]++, p.type === _piece.PieceType.Bishop) || (cov_1htdbc7jct.b[12][1]++, p.type === _piece.PieceType.Knight) || (cov_1htdbc7jct.b[12][2]++, p.type === _piece.PieceType.Queen) || (cov_1htdbc7jct.b[12][3]++, p.type === _piece.PieceType.Rook)) {
				cov_1htdbc7jct.b[11][0]++;
				cov_1htdbc7jct.s[48]++;

				// if there is more than 1 of the specified piece on the board,
				// can more than 1 land on the specified square?
				movesForPiece = getValidMovesByPieceType(p.type, validMoves);
				cov_1htdbc7jct.s[49]++;
				if (movesForPiece.length > 1) {
					cov_1htdbc7jct.b[13][0]++;
					cov_1htdbc7jct.s[50]++;

					prefix = getNotationPrefix(validMoves[i].src, sq, movesForPiece);
				} else {
					cov_1htdbc7jct.b[13][1]++;
					cov_1htdbc7jct.s[51]++;

					prefix = validMoves[i].src.piece.notation;
				}
			} else {
				cov_1htdbc7jct.b[11][1]++;
			}

			// squares with a King piece
			cov_1htdbc7jct.s[52]++;
			if (p.type === _piece.PieceType.King) {
				cov_1htdbc7jct.b[14][0]++;
				cov_1htdbc7jct.s[53]++;

				// look for castle left and castle right
				if ((cov_1htdbc7jct.b[16][0]++, validMoves[i].src.file === 'e') && (cov_1htdbc7jct.b[16][1]++, sq.file === 'g')) {
					cov_1htdbc7jct.b[15][0]++;
					cov_1htdbc7jct.s[54]++;

					// fix for issue #13 - if PGN is specified should be letters, not numbers
					prefix = gameClient.PGN ? (cov_1htdbc7jct.b[17][0]++, 'O-O') : (cov_1htdbc7jct.b[17][1]++, '0-0');
					cov_1htdbc7jct.s[55]++;
					suffix = '';
				} else {
						cov_1htdbc7jct.b[15][1]++;
						cov_1htdbc7jct.s[56]++;
						if ((cov_1htdbc7jct.b[19][0]++, validMoves[i].src.file === 'e') && (cov_1htdbc7jct.b[19][1]++, sq.file === 'c')) {
							cov_1htdbc7jct.b[18][0]++;
							cov_1htdbc7jct.s[57]++;

							// fix for issue #13 - if PGN is specified should be letters, not numbers
							prefix = gameClient.PGN ? (cov_1htdbc7jct.b[20][0]++, 'O-O-O') : (cov_1htdbc7jct.b[20][1]++, '0-0-0');
							cov_1htdbc7jct.s[58]++;
							suffix = '';
						} else {
							cov_1htdbc7jct.b[18][1]++;
							cov_1htdbc7jct.s[59]++;

							prefix = validMoves[i].src.piece.notation;
						}
					}
			} else {
				cov_1htdbc7jct.b[14][1]++;
			}

			// set the notation
			cov_1htdbc7jct.s[60]++;
			if (isPromotion) {
				cov_1htdbc7jct.b[21][0]++;
				cov_1htdbc7jct.s[61]++;

				// Rook promotion
				algebraicNotation[prefix + suffix + 'R'] = {
					src: validMoves[i].src,
					dest: sq
				};

				// Knight promotion
				cov_1htdbc7jct.s[62]++;
				algebraicNotation[prefix + suffix + 'N'] = {
					src: validMoves[i].src,
					dest: sq
				};

				// Bishop promotion
				cov_1htdbc7jct.s[63]++;
				algebraicNotation[prefix + suffix + 'B'] = {
					src: validMoves[i].src,
					dest: sq
				};

				// Queen promotion
				cov_1htdbc7jct.s[64]++;
				algebraicNotation[prefix + suffix + 'Q'] = {
					src: validMoves[i].src,
					dest: sq
				};
			} else {
				cov_1htdbc7jct.b[21][1]++;
				cov_1htdbc7jct.s[65]++;

				algebraicNotation[prefix + suffix] = {
					src: validMoves[i].src,
					dest: sq
				};
			}
		}
	}

	cov_1htdbc7jct.s[66]++;
	return algebraicNotation;
}

function parseNotation(notation) {
	cov_1htdbc7jct.f[4]++;

	var parseDest = (cov_1htdbc7jct.s[67]++, '');

	// try and parse the notation
	cov_1htdbc7jct.s[68]++;
	parseDest = notation.substring(notation.length - 2);
	cov_1htdbc7jct.s[69]++;
	if (notation.length > 2) {
		cov_1htdbc7jct.b[22][0]++;
		cov_1htdbc7jct.s[70]++;

		return notation.charAt(0) + parseDest;
	} else {
		cov_1htdbc7jct.b[22][1]++;
	}

	cov_1htdbc7jct.s[71]++;
	return '';
}

function updateGameClient(gameClient) {
	cov_1htdbc7jct.f[5]++;
	cov_1htdbc7jct.s[72]++;

	gameClient.validation.start(function (err, result) {
		cov_1htdbc7jct.f[6]++;
		cov_1htdbc7jct.s[73]++;

		if (err) {
			cov_1htdbc7jct.b[23][0]++;
			cov_1htdbc7jct.s[74]++;

			throw new Error(err);
		} else {
			cov_1htdbc7jct.b[23][1]++;
		}

		cov_1htdbc7jct.s[75]++;
		gameClient.isCheck = result.isCheck;
		cov_1htdbc7jct.s[76]++;
		gameClient.isCheckmate = result.isCheckmate;
		cov_1htdbc7jct.s[77]++;
		gameClient.isRepetition = result.isRepetition;
		cov_1htdbc7jct.s[78]++;
		gameClient.isStalemate = result.isStalemate;
		cov_1htdbc7jct.s[79]++;
		gameClient.notatedMoves = notate(result.validMoves, gameClient);
		cov_1htdbc7jct.s[80]++;
		gameClient.validMoves = result.validMoves;
	});
}

var AlgebraicGameClient = exports.AlgebraicGameClient = function (_ref) {
	_inherits(AlgebraicGameClient, _ref);

	function AlgebraicGameClient(game, opts) {
		_classCallCheck(this, AlgebraicGameClient);

		cov_1htdbc7jct.f[7]++;
		cov_1htdbc7jct.s[81]++;

		var _this = _possibleConstructorReturn(this, (AlgebraicGameClient.__proto__ || Object.getPrototypeOf(AlgebraicGameClient)).call(this));

		cov_1htdbc7jct.s[82]++;


		_this.game = game;
		cov_1htdbc7jct.s[83]++;
		_this.isCheck = false;
		cov_1htdbc7jct.s[84]++;
		_this.isCheckmate = false;
		cov_1htdbc7jct.s[85]++;
		_this.isRepetition = false;
		cov_1htdbc7jct.s[86]++;
		_this.isStalemate = false;
		cov_1htdbc7jct.s[87]++;
		_this.notatedMoves = {};
		// for issue #13, adding options allowing consumers to specify
		// PGN (Portable Game Notation)... essentially, this makes castle moves
		// appear as capital letter O rather than the number 0
		cov_1htdbc7jct.s[88]++;
		_this.PGN = (cov_1htdbc7jct.b[25][0]++, opts) && (cov_1htdbc7jct.b[25][1]++, typeof opts.PGN === 'boolean') ? (cov_1htdbc7jct.b[24][0]++, opts.PGN) : (cov_1htdbc7jct.b[24][1]++, false);
		cov_1htdbc7jct.s[89]++;
		_this.validMoves = [];
		cov_1htdbc7jct.s[90]++;
		_this.validation = _gameValidation.GameValidation.create(_this.game);

		// bubble the game check event
		cov_1htdbc7jct.s[91]++;
		_this.game.on('check', function (attackers) {
			cov_1htdbc7jct.f[8]++;
			cov_1htdbc7jct.s[92]++;
			return _this.emit('check', attackers);
		});
		return _this;
	}

	_createClass(AlgebraicGameClient, [{
		key: 'getStatus',
		value: function getStatus(forceUpdate) {
			cov_1htdbc7jct.f[10]++;
			cov_1htdbc7jct.s[97]++;

			if (forceUpdate) {
				cov_1htdbc7jct.b[26][0]++;
				cov_1htdbc7jct.s[98]++;

				updateGameClient(this);
			} else {
				cov_1htdbc7jct.b[26][1]++;
			}

			cov_1htdbc7jct.s[99]++;
			return {
				board: this.game.board,
				isCheck: this.isCheck,
				isCheckmate: this.isCheckmate,
				isRepetition: this.isRepetition,
				isStalemate: this.isStalemate,
				notatedMoves: this.notatedMoves
			};
		}
	}, {
		key: 'move',
		value: function move(notation, isFuzzy) {
			cov_1htdbc7jct.f[11]++;

			var move = (cov_1htdbc7jct.s[100]++, null),
			    notationRegex = (cov_1htdbc7jct.s[101]++, /^[BKQNR]?[a-h]?[1-8]?[x-]?[a-h][1-8][+#]?$/),
			    p = (cov_1htdbc7jct.s[102]++, null),
			    promo = (cov_1htdbc7jct.s[103]++, ''),
			    side = (cov_1htdbc7jct.s[104]++, this.game.getCurrentSide());

			cov_1htdbc7jct.s[105]++;
			if ((cov_1htdbc7jct.b[28][0]++, notation) && (cov_1htdbc7jct.b[28][1]++, typeof notation === 'string')) {
				cov_1htdbc7jct.b[27][0]++;
				cov_1htdbc7jct.s[106]++;

				// clean notation of extra or alternate chars
				notation = notation.replace(/\!/g, '').replace(/\+/g, '').replace(/\#/g, '').replace(/\=/g, '').replace(/\\/g, '');

				// fix for issue #13 - if PGN is specified, should be letters not numbers
				cov_1htdbc7jct.s[107]++;
				if (this.PGN) {
					cov_1htdbc7jct.b[29][0]++;
					cov_1htdbc7jct.s[108]++;

					notation = notation.replace(/0/g, 'O');
				} else {
					cov_1htdbc7jct.b[29][1]++;
					cov_1htdbc7jct.s[109]++;

					notation = notation.replace(/O/g, '0');
				}

				// check for pawn promotion
				cov_1htdbc7jct.s[110]++;
				if (notation.charAt(notation.length - 1).match(/[BNQR]/)) {
					cov_1htdbc7jct.b[30][0]++;
					cov_1htdbc7jct.s[111]++;

					promo = notation.charAt(notation.length - 1);
				} else {
					cov_1htdbc7jct.b[30][1]++;
				}

				// use it directly or attempt to parse it if not found
				cov_1htdbc7jct.s[112]++;
				if (this.notatedMoves[notation]) {
					cov_1htdbc7jct.b[31][0]++;
					cov_1htdbc7jct.s[113]++;

					move = this.game.board.move(this.notatedMoves[notation].src, this.notatedMoves[notation].dest, notation);
				} else {
						cov_1htdbc7jct.b[31][1]++;
						cov_1htdbc7jct.s[114]++;
						if ((cov_1htdbc7jct.b[33][0]++, notation.match(notationRegex)) && (cov_1htdbc7jct.b[33][1]++, notation.length > 1) && (cov_1htdbc7jct.b[33][2]++, !isFuzzy)) {
							cov_1htdbc7jct.b[32][0]++;
							cov_1htdbc7jct.s[115]++;

							return this.move(parseNotation(notation), true);
						} else {
								cov_1htdbc7jct.b[32][1]++;
								cov_1htdbc7jct.s[116]++;
								if (isFuzzy) {
									cov_1htdbc7jct.b[34][0]++;
									cov_1htdbc7jct.s[117]++;

									throw new Error('Invalid move (' + notation + ')');
								} else {
									cov_1htdbc7jct.b[34][1]++;
								}
							}
					}cov_1htdbc7jct.s[118]++;
				if (move) {
					cov_1htdbc7jct.b[35][0]++;
					cov_1htdbc7jct.s[119]++;

					// apply pawn promotion
					if (promo) {
						cov_1htdbc7jct.b[36][0]++;
						cov_1htdbc7jct.s[120]++;

						switch (promo) {
							case 'B':
								cov_1htdbc7jct.b[37][0]++;
								cov_1htdbc7jct.s[121]++;

								p = _piece.Piece.createBishop(side);
								cov_1htdbc7jct.s[122]++;
								break;
							case 'N':
								cov_1htdbc7jct.b[37][1]++;
								cov_1htdbc7jct.s[123]++;

								p = _piece.Piece.createKnight(side);
								cov_1htdbc7jct.s[124]++;
								break;
							case 'Q':
								cov_1htdbc7jct.b[37][2]++;
								cov_1htdbc7jct.s[125]++;

								p = _piece.Piece.createQueen(side);
								cov_1htdbc7jct.s[126]++;
								break;
							case 'R':
								cov_1htdbc7jct.b[37][3]++;
								cov_1htdbc7jct.s[127]++;

								p = _piece.Piece.createRook(side);
								cov_1htdbc7jct.s[128]++;
								break;
							default:
								cov_1htdbc7jct.b[37][4]++;
								cov_1htdbc7jct.s[129]++;

								p = _piece.Piece.createPawn(side);
						}

						cov_1htdbc7jct.s[130]++;
						if (p) {
							cov_1htdbc7jct.b[38][0]++;
							cov_1htdbc7jct.s[131]++;

							this.game.board.promote(move.move.postSquare, p);
							/*
       p.moveCount = move.move.postSquare.piece.moveCount;
       move.move.postSquare.piece = p;
       //*/
						} else {
							cov_1htdbc7jct.b[38][1]++;
						}
					} else {
						cov_1htdbc7jct.b[36][1]++;
					}

					cov_1htdbc7jct.s[132]++;
					updateGameClient(this);

					cov_1htdbc7jct.s[133]++;
					return move;
				} else {
					cov_1htdbc7jct.b[35][1]++;
				}
			} else {
				cov_1htdbc7jct.b[27][1]++;
			}

			cov_1htdbc7jct.s[134]++;
			throw new Error('Notation is invalid (' + notation + ')');
		}
	}], [{
		key: 'create',
		value: function create(opts) {
			cov_1htdbc7jct.f[9]++;

			var game = (cov_1htdbc7jct.s[93]++, _game.Game.create()),
			    gameClient = (cov_1htdbc7jct.s[94]++, new AlgebraicGameClient(game, opts));

			cov_1htdbc7jct.s[95]++;
			updateGameClient(gameClient);

			cov_1htdbc7jct.s[96]++;
			return gameClient;
		}
	}]);

	return AlgebraicGameClient;
}((_events.EventEmitter));

exports.default = { AlgebraicGameClient: AlgebraicGameClient };
//# sourceMappingURL=algebraicGameClient.js.map
