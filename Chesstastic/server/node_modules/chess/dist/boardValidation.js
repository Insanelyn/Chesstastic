'use strict';

var cov_blp7q604p = function () {
	var path = '/Volumes/Data/Projects/brozeph/node-chess/src/boardValidation.js',
	    hash = '9ba22a6a949648cf6446aa7c248dd9a806591ce5',
	    Function = function () {}.constructor,
	    global = new Function('return this')(),
	    gcv = '__coverage__',
	    coverageData = {
		path: '/Volumes/Data/Projects/brozeph/node-chess/src/boardValidation.js',
		statementMap: {
			'0': {
				start: {
					line: 33,
					column: 2
				},
				end: {
					line: 33,
					column: 40
				}
			},
			'1': {
				start: {
					line: 34,
					column: 2
				},
				end: {
					line: 34,
					column: 19
				}
			},
			'2': {
				start: {
					line: 38,
					column: 2
				},
				end: {
					line: 38,
					column: 35
				}
			},
			'3': {
				start: {
					line: 43,
					column: 21
				},
				end: {
					line: 51,
					column: 4
				}
			},
			'4': {
				start: {
					line: 44,
					column: 12
				},
				end: {
					line: 44,
					column: 13
				}
			},
			'5': {
				start: {
					line: 46,
					column: 4
				},
				end: {
					line: 50,
					column: 5
				}
			},
			'6': {
				start: {
					line: 47,
					column: 5
				},
				end: {
					line: 49,
					column: 6
				}
			},
			'7': {
				start: {
					line: 48,
					column: 6
				},
				end: {
					line: 48,
					column: 35
				}
			},
			'8': {
				start: {
					line: 52,
					column: 17
				},
				end: {
					line: 52,
					column: 21
				}
			},
			'9': {
				start: {
					line: 54,
					column: 10
				},
				end: {
					line: 54,
					column: 63
				}
			},
			'10': {
				start: {
					line: 55,
					column: 13
				},
				end: {
					line: 64,
					column: 4
				}
			},
			'11': {
				start: {
					line: 67,
					column: 2
				},
				end: {
					line: 116,
					column: 3
				}
			},
			'12': {
				start: {
					line: 73,
					column: 3
				},
				end: {
					line: 94,
					column: 4
				}
			},
			'13': {
				start: {
					line: 78,
					column: 4
				},
				end: {
					line: 93,
					column: 5
				}
			},
			'14': {
				start: {
					line: 83,
					column: 5
				},
				end: {
					line: 83,
					column: 63
				}
			},
			'15': {
				start: {
					line: 84,
					column: 5
				},
				end: {
					line: 91,
					column: 6
				}
			},
			'16': {
				start: {
					line: 85,
					column: 6
				},
				end: {
					line: 85,
					column: 25
				}
			},
			'17': {
				start: {
					line: 86,
					column: 6
				},
				end: {
					line: 86,
					column: 64
				}
			},
			'18': {
				start: {
					line: 88,
					column: 6
				},
				end: {
					line: 90,
					column: 7
				}
			},
			'19': {
				start: {
					line: 89,
					column: 7
				},
				end: {
					line: 89,
					column: 50
				}
			},
			'20': {
				start: {
					line: 92,
					column: 5
				},
				end: {
					line: 92,
					column: 24
				}
			},
			'21': {
				start: {
					line: 97,
					column: 3
				},
				end: {
					line: 115,
					column: 4
				}
			},
			'22': {
				start: {
					line: 102,
					column: 4
				},
				end: {
					line: 114,
					column: 5
				}
			},
			'23': {
				start: {
					line: 104,
					column: 5
				},
				end: {
					line: 104,
					column: 63
				}
			},
			'24': {
				start: {
					line: 105,
					column: 5
				},
				end: {
					line: 112,
					column: 6
				}
			},
			'25': {
				start: {
					line: 106,
					column: 6
				},
				end: {
					line: 106,
					column: 25
				}
			},
			'26': {
				start: {
					line: 107,
					column: 6
				},
				end: {
					line: 107,
					column: 64
				}
			},
			'27': {
				start: {
					line: 109,
					column: 6
				},
				end: {
					line: 111,
					column: 7
				}
			},
			'28': {
				start: {
					line: 110,
					column: 7
				},
				end: {
					line: 110,
					column: 50
				}
			},
			'29': {
				start: {
					line: 113,
					column: 5
				},
				end: {
					line: 113,
					column: 24
				}
			},
			'30': {
				start: {
					line: 121,
					column: 7
				},
				end: {
					line: 121,
					column: 8
				}
			},
			'31': {
				start: {
					line: 122,
					column: 13
				},
				end: {
					line: 122,
					column: 18
				}
			},
			'32': {
				start: {
					line: 123,
					column: 7
				},
				end: {
					line: 123,
					column: 8
				}
			},
			'33': {
				start: {
					line: 124,
					column: 7
				},
				end: {
					line: 124,
					column: 11
				}
			},
			'34': {
				start: {
					line: 125,
					column: 13
				},
				end: {
					line: 125,
					column: 15
				}
			},
			'35': {
				start: {
					line: 126,
					column: 19
				},
				end: {
					line: 126,
					column: 21
				}
			},
			'36': {
				start: {
					line: 128,
					column: 2
				},
				end: {
					line: 156,
					column: 3
				}
			},
			'37': {
				start: {
					line: 129,
					column: 3
				},
				end: {
					line: 129,
					column: 16
				}
			},
			'38': {
				start: {
					line: 131,
					column: 3
				},
				end: {
					line: 148,
					column: 4
				}
			},
			'39': {
				start: {
					line: 133,
					column: 4
				},
				end: {
					line: 133,
					column: 65
				}
			},
			'40': {
				start: {
					line: 136,
					column: 4
				},
				end: {
					line: 140,
					column: 5
				}
			},
			'41': {
				start: {
					line: 137,
					column: 5
				},
				end: {
					line: 137,
					column: 49
				}
			},
			'42': {
				start: {
					line: 139,
					column: 5
				},
				end: {
					line: 139,
					column: 58
				}
			},
			'43': {
				start: {
					line: 143,
					column: 4
				},
				end: {
					line: 143,
					column: 13
				}
			},
			'44': {
				start: {
					line: 145,
					column: 4
				},
				end: {
					line: 147,
					column: 5
				}
			},
			'45': {
				start: {
					line: 146,
					column: 5
				},
				end: {
					line: 146,
					column: 39
				}
			},
			'46': {
				start: {
					line: 150,
					column: 3
				},
				end: {
					line: 155,
					column: 4
				}
			},
			'47': {
				start: {
					line: 151,
					column: 4
				},
				end: {
					line: 154,
					column: 7
				}
			},
			'48': {
				start: {
					line: 158,
					column: 2
				},
				end: {
					line: 158,
					column: 23
				}
			},
			'49': {
				start: {
					line: 162,
					column: 2
				},
				end: {
					line: 167,
					column: 3
				}
			},
			'50': {
				start: {
					line: 163,
					column: 3
				},
				end: {
					line: 166,
					column: 5
				}
			},
			'51': {
				start: {
					line: 170,
					column: 17
				},
				end: {
					line: 184,
					column: 4
				}
			},
			'52': {
				start: {
					line: 171,
					column: 4
				},
				end: {
					line: 183,
					column: 6
				}
			},
			'53': {
				start: {
					line: 172,
					column: 5
				},
				end: {
					line: 180,
					column: 6
				}
			},
			'54': {
				start: {
					line: 173,
					column: 14
				},
				end: {
					line: 173,
					column: 15
				}
			},
			'55': {
				start: {
					line: 174,
					column: 6
				},
				end: {
					line: 179,
					column: 7
				}
			},
			'56': {
				start: {
					line: 175,
					column: 7
				},
				end: {
					line: 178,
					column: 8
				}
			},
			'57': {
				start: {
					line: 176,
					column: 8
				},
				end: {
					line: 176,
					column: 26
				}
			},
			'58': {
				start: {
					line: 177,
					column: 8
				},
				end: {
					line: 177,
					column: 15
				}
			},
			'59': {
				start: {
					line: 182,
					column: 5
				},
				end: {
					line: 182,
					column: 24
				}
			},
			'60': {
				start: {
					line: 186,
					column: 10
				},
				end: {
					line: 186,
					column: 14
				}
			},
			'61': {
				start: {
					line: 187,
					column: 16
				},
				end: {
					line: 214,
					column: 4
				}
			},
			'62': {
				start: {
					line: 189,
					column: 21
				},
				end: {
					line: 189,
					column: 47
				}
			},
			'63': {
				start: {
					line: 190,
					column: 15
				},
				end: {
					line: 190,
					column: 17
				}
			},
			'64': {
				start: {
					line: 192,
					column: 4
				},
				end: {
					line: 211,
					column: 5
				}
			},
			'65': {
				start: {
					line: 193,
					column: 5
				},
				end: {
					line: 198,
					column: 7
				}
			},
			'66': {
				start: {
					line: 200,
					column: 5
				},
				end: {
					line: 210,
					column: 6
				}
			},
			'67': {
				start: {
					line: 202,
					column: 6
				},
				end: {
					line: 204,
					column: 51
				}
			},
			'68': {
				start: {
					line: 205,
					column: 6
				},
				end: {
					line: 205,
					column: 27
				}
			},
			'69': {
				start: {
					line: 206,
					column: 12
				},
				end: {
					line: 210,
					column: 6
				}
			},
			'70': {
				start: {
					line: 207,
					column: 6
				},
				end: {
					line: 207,
					column: 27
				}
			},
			'71': {
				start: {
					line: 209,
					column: 6
				},
				end: {
					line: 209,
					column: 60
				}
			},
			'72': {
				start: {
					line: 213,
					column: 4
				},
				end: {
					line: 213,
					column: 19
				}
			},
			'73': {
				start: {
					line: 215,
					column: 24
				},
				end: {
					line: 234,
					column: 4
				}
			},
			'74': {
				start: {
					line: 217,
					column: 21
				},
				end: {
					line: 217,
					column: 47
				}
			},
			'75': {
				start: {
					line: 218,
					column: 15
				},
				end: {
					line: 223,
					column: 6
				}
			},
			'76': {
				start: {
					line: 225,
					column: 4
				},
				end: {
					line: 231,
					column: 5
				}
			},
			'77': {
				start: {
					line: 228,
					column: 5
				},
				end: {
					line: 230,
					column: 50
				}
			},
			'78': {
				start: {
					line: 233,
					column: 4
				},
				end: {
					line: 233,
					column: 19
				}
			},
			'79': {
				start: {
					line: 235,
					column: 12
				},
				end: {
					line: 253,
					column: 40
				}
			},
			'80': {
				start: {
					line: 253,
					column: 24
				},
				end: {
					line: 253,
					column: 39
				}
			},
			'81': {
				start: {
					line: 257,
					column: 2
				},
				end: {
					line: 257,
					column: 16
				}
			},
			'82': {
				start: {
					line: 261,
					column: 2
				},
				end: {
					line: 261,
					column: 45
				}
			},
			'83': {
				start: {
					line: 266,
					column: 2
				},
				end: {
					line: 272,
					column: 6
				}
			},
			'84': {
				start: {
					line: 266,
					column: 47
				},
				end: {
					line: 272,
					column: 4
				}
			},
			'85': {
				start: {
					line: 267,
					column: 3
				},
				end: {
					line: 269,
					column: 4
				}
			},
			'86': {
				start: {
					line: 268,
					column: 4
				},
				end: {
					line: 268,
					column: 23
				}
			},
			'87': {
				start: {
					line: 271,
					column: 3
				},
				end: {
					line: 271,
					column: 30
				}
			},
			'88': {
				start: {
					line: 275,
					column: 7
				},
				end: {
					line: 275,
					column: 8
				}
			},
			'89': {
				start: {
					line: 276,
					column: 16
				},
				end: {
					line: 276,
					column: 20
				}
			},
			'90': {
				start: {
					line: 277,
					column: 19
				},
				end: {
					line: 290,
					column: 4
				}
			},
			'91': {
				start: {
					line: 278,
					column: 4
				},
				end: {
					line: 289,
					column: 6
				}
			},
			'92': {
				start: {
					line: 279,
					column: 5
				},
				end: {
					line: 281,
					column: 6
				}
			},
			'93': {
				start: {
					line: 280,
					column: 6
				},
				end: {
					line: 280,
					column: 27
				}
			},
			'94': {
				start: {
					line: 283,
					column: 5
				},
				end: {
					line: 288,
					column: 6
				}
			},
			'95': {
				start: {
					line: 284,
					column: 6
				},
				end: {
					line: 287,
					column: 9
				}
			},
			'96': {
				start: {
					line: 291,
					column: 13
				},
				end: {
					line: 291,
					column: 15
				}
			},
			'97': {
				start: {
					line: 292,
					column: 16
				},
				end: {
					line: 292,
					column: 18
				}
			},
			'98': {
				start: {
					line: 294,
					column: 2
				},
				end: {
					line: 327,
					column: 3
				}
			},
			'99': {
				start: {
					line: 296,
					column: 3
				},
				end: {
					line: 296,
					column: 63
				}
			},
			'100': {
				start: {
					line: 298,
					column: 3
				},
				end: {
					line: 309,
					column: 4
				}
			},
			'101': {
				start: {
					line: 300,
					column: 4
				},
				end: {
					line: 302,
					column: 5
				}
			},
			'102': {
				start: {
					line: 301,
					column: 5
				},
				end: {
					line: 301,
					column: 29
				}
			},
			'103': {
				start: {
					line: 304,
					column: 4
				},
				end: {
					line: 308,
					column: 5
				}
			},
			'104': {
				start: {
					line: 305,
					column: 5
				},
				end: {
					line: 307,
					column: 64
				}
			},
			'105': {
				start: {
					line: 312,
					column: 3
				},
				end: {
					line: 312,
					column: 35
				}
			},
			'106': {
				start: {
					line: 315,
					column: 3
				},
				end: {
					line: 315,
					column: 62
				}
			},
			'107': {
				start: {
					line: 318,
					column: 3
				},
				end: {
					line: 324,
					column: 6
				}
			},
			'108': {
				start: {
					line: 319,
					column: 4
				},
				end: {
					line: 323,
					column: 8
				}
			},
			'109': {
				start: {
					line: 326,
					column: 3
				},
				end: {
					line: 326,
					column: 50
				}
			},
			'110': {
				start: {
					line: 329,
					column: 2
				},
				end: {
					line: 329,
					column: 36
				}
			}
		},
		fnMap: {
			'0': {
				name: '(anonymous_0)',
				decl: {
					start: {
						line: 32,
						column: 1
					},
					end: {
						line: 32,
						column: 2
					}
				},
				loc: {
					start: {
						line: 32,
						column: 20
					},
					end: {
						line: 35,
						column: 2
					}
				},
				line: 32
			},
			'1': {
				name: '(anonymous_1)',
				decl: {
					start: {
						line: 37,
						column: 1
					},
					end: {
						line: 37,
						column: 2
					}
				},
				loc: {
					start: {
						line: 37,
						column: 22
					},
					end: {
						line: 39,
						column: 2
					}
				},
				line: 37
			},
			'2': {
				name: '(anonymous_2)',
				decl: {
					start: {
						line: 41,
						column: 1
					},
					end: {
						line: 41,
						column: 2
					}
				},
				loc: {
					start: {
						line: 41,
						column: 29
					},
					end: {
						line: 117,
						column: 2
					}
				},
				line: 41
			},
			'3': {
				name: '(anonymous_3)',
				decl: {
					start: {
						line: 43,
						column: 21
					},
					end: {
						line: 43,
						column: 22
					}
				},
				loc: {
					start: {
						line: 43,
						column: 29
					},
					end: {
						line: 51,
						column: 4
					}
				},
				line: 43
			},
			'4': {
				name: '(anonymous_4)',
				decl: {
					start: {
						line: 119,
						column: 1
					},
					end: {
						line: 119,
						column: 2
					}
				},
				loc: {
					start: {
						line: 119,
						column: 38
					},
					end: {
						line: 159,
						column: 2
					}
				},
				line: 119
			},
			'5': {
				name: '(anonymous_5)',
				decl: {
					start: {
						line: 161,
						column: 1
					},
					end: {
						line: 161,
						column: 2
					}
				},
				loc: {
					start: {
						line: 161,
						column: 20
					},
					end: {
						line: 258,
						column: 2
					}
				},
				line: 161
			},
			'6': {
				name: '(anonymous_6)',
				decl: {
					start: {
						line: 170,
						column: 17
					},
					end: {
						line: 170,
						column: 18
					}
				},
				loc: {
					start: {
						line: 170,
						column: 30
					},
					end: {
						line: 184,
						column: 4
					}
				},
				line: 170
			},
			'7': {
				name: '(anonymous_7)',
				decl: {
					start: {
						line: 171,
						column: 11
					},
					end: {
						line: 171,
						column: 12
					}
				},
				loc: {
					start: {
						line: 171,
						column: 35
					},
					end: {
						line: 183,
						column: 5
					}
				},
				line: 171
			},
			'8': {
				name: '(anonymous_8)',
				decl: {
					start: {
						line: 187,
						column: 16
					},
					end: {
						line: 187,
						column: 17
					}
				},
				loc: {
					start: {
						line: 187,
						column: 32
					},
					end: {
						line: 214,
						column: 4
					}
				},
				line: 187
			},
			'9': {
				name: '(anonymous_9)',
				decl: {
					start: {
						line: 215,
						column: 24
					},
					end: {
						line: 215,
						column: 25
					}
				},
				loc: {
					start: {
						line: 215,
						column: 40
					},
					end: {
						line: 234,
						column: 4
					}
				},
				line: 215
			},
			'10': {
				name: '(anonymous_10)',
				decl: {
					start: {
						line: 253,
						column: 12
					},
					end: {
						line: 253,
						column: 13
					}
				},
				loc: {
					start: {
						line: 253,
						column: 24
					},
					end: {
						line: 253,
						column: 39
					}
				},
				line: 253
			},
			'11': {
				name: '(anonymous_11)',
				decl: {
					start: {
						line: 260,
						column: 20
					},
					end: {
						line: 260,
						column: 21
					}
				},
				loc: {
					start: {
						line: 260,
						column: 34
					},
					end: {
						line: 262,
						column: 2
					}
				},
				line: 260
			},
			'12': {
				name: '(anonymous_12)',
				decl: {
					start: {
						line: 264,
						column: 1
					},
					end: {
						line: 264,
						column: 2
					}
				},
				loc: {
					start: {
						line: 264,
						column: 18
					},
					end: {
						line: 330,
						column: 2
					}
				},
				line: 264
			},
			'13': {
				name: '(anonymous_13)',
				decl: {
					start: {
						line: 266,
						column: 26
					},
					end: {
						line: 266,
						column: 27
					}
				},
				loc: {
					start: {
						line: 266,
						column: 47
					},
					end: {
						line: 272,
						column: 4
					}
				},
				line: 266
			},
			'14': {
				name: '(anonymous_14)',
				decl: {
					start: {
						line: 266,
						column: 59
					},
					end: {
						line: 266,
						column: 60
					}
				},
				loc: {
					start: {
						line: 266,
						column: 80
					},
					end: {
						line: 272,
						column: 3
					}
				},
				line: 266
			},
			'15': {
				name: '(anonymous_15)',
				decl: {
					start: {
						line: 277,
						column: 19
					},
					end: {
						line: 277,
						column: 20
					}
				},
				loc: {
					start: {
						line: 277,
						column: 36
					},
					end: {
						line: 290,
						column: 4
					}
				},
				line: 277
			},
			'16': {
				name: '(anonymous_16)',
				decl: {
					start: {
						line: 278,
						column: 11
					},
					end: {
						line: 278,
						column: 12
					}
				},
				loc: {
					start: {
						line: 278,
						column: 35
					},
					end: {
						line: 289,
						column: 5
					}
				},
				line: 278
			},
			'17': {
				name: '(anonymous_17)',
				decl: {
					start: {
						line: 318,
						column: 42
					},
					end: {
						line: 318,
						column: 43
					}
				},
				loc: {
					start: {
						line: 318,
						column: 56
					},
					end: {
						line: 324,
						column: 4
					}
				},
				line: 318
			}
		},
		branchMap: {
			'0': {
				loc: {
					start: {
						line: 33,
						column: 15
					},
					end: {
						line: 33,
						column: 39
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 33,
						column: 22
					},
					end: {
						line: 33,
						column: 32
					}
				}, {
					start: {
						line: 33,
						column: 35
					},
					end: {
						line: 33,
						column: 39
					}
				}],
				line: 33
			},
			'1': {
				loc: {
					start: {
						line: 47,
						column: 5
					},
					end: {
						line: 49,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 47,
						column: 5
					},
					end: {
						line: 49,
						column: 6
					}
				}, {
					start: {
						line: 47,
						column: 5
					},
					end: {
						line: 49,
						column: 6
					}
				}],
				line: 47
			},
			'2': {
				loc: {
					start: {
						line: 54,
						column: 10
					},
					end: {
						line: 54,
						column: 63
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 54,
						column: 58
					},
					end: {
						line: 54,
						column: 59
					}
				}, {
					start: {
						line: 54,
						column: 62
					},
					end: {
						line: 54,
						column: 63
					}
				}],
				line: 54
			},
			'3': {
				loc: {
					start: {
						line: 67,
						column: 2
					},
					end: {
						line: 116,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 67,
						column: 2
					},
					end: {
						line: 116,
						column: 3
					}
				}, {
					start: {
						line: 67,
						column: 2
					},
					end: {
						line: 116,
						column: 3
					}
				}],
				line: 67
			},
			'4': {
				loc: {
					start: {
						line: 67,
						column: 6
					},
					end: {
						line: 70,
						column: 37
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 67,
						column: 6
					},
					end: {
						line: 67,
						column: 21
					}
				}, {
					start: {
						line: 68,
						column: 4
					},
					end: {
						line: 68,
						column: 43
					}
				}, {
					start: {
						line: 69,
						column: 4
					},
					end: {
						line: 69,
						column: 35
					}
				}, {
					start: {
						line: 70,
						column: 4
					},
					end: {
						line: 70,
						column: 37
					}
				}],
				line: 67
			},
			'5': {
				loc: {
					start: {
						line: 73,
						column: 3
					},
					end: {
						line: 94,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 73,
						column: 3
					},
					end: {
						line: 94,
						column: 4
					}
				}, {
					start: {
						line: 73,
						column: 3
					},
					end: {
						line: 94,
						column: 4
					}
				}],
				line: 73
			},
			'6': {
				loc: {
					start: {
						line: 73,
						column: 7
					},
					end: {
						line: 75,
						column: 36
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 73,
						column: 7
					},
					end: {
						line: 73,
						column: 22
					}
				}, {
					start: {
						line: 74,
						column: 5
					},
					end: {
						line: 74,
						column: 44
					}
				}, {
					start: {
						line: 75,
						column: 5
					},
					end: {
						line: 75,
						column: 36
					}
				}],
				line: 73
			},
			'7': {
				loc: {
					start: {
						line: 78,
						column: 4
					},
					end: {
						line: 93,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 78,
						column: 4
					},
					end: {
						line: 93,
						column: 5
					}
				}, {
					start: {
						line: 78,
						column: 4
					},
					end: {
						line: 93,
						column: 5
					}
				}],
				line: 78
			},
			'8': {
				loc: {
					start: {
						line: 78,
						column: 8
					},
					end: {
						line: 80,
						column: 22
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 78,
						column: 8
					},
					end: {
						line: 78,
						column: 24
					}
				}, {
					start: {
						line: 79,
						column: 6
					},
					end: {
						line: 79,
						column: 22
					}
				}, {
					start: {
						line: 80,
						column: 6
					},
					end: {
						line: 80,
						column: 22
					}
				}],
				line: 78
			},
			'9': {
				loc: {
					start: {
						line: 84,
						column: 5
					},
					end: {
						line: 91,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 84,
						column: 5
					},
					end: {
						line: 91,
						column: 6
					}
				}, {
					start: {
						line: 84,
						column: 5
					},
					end: {
						line: 91,
						column: 6
					}
				}],
				line: 84
			},
			'10': {
				loc: {
					start: {
						line: 88,
						column: 6
					},
					end: {
						line: 90,
						column: 7
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 88,
						column: 6
					},
					end: {
						line: 90,
						column: 7
					}
				}, {
					start: {
						line: 88,
						column: 6
					},
					end: {
						line: 90,
						column: 7
					}
				}],
				line: 88
			},
			'11': {
				loc: {
					start: {
						line: 97,
						column: 3
					},
					end: {
						line: 115,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 97,
						column: 3
					},
					end: {
						line: 115,
						column: 4
					}
				}, {
					start: {
						line: 97,
						column: 3
					},
					end: {
						line: 115,
						column: 4
					}
				}],
				line: 97
			},
			'12': {
				loc: {
					start: {
						line: 97,
						column: 7
					},
					end: {
						line: 99,
						column: 36
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 97,
						column: 7
					},
					end: {
						line: 97,
						column: 22
					}
				}, {
					start: {
						line: 98,
						column: 5
					},
					end: {
						line: 98,
						column: 44
					}
				}, {
					start: {
						line: 99,
						column: 5
					},
					end: {
						line: 99,
						column: 36
					}
				}],
				line: 97
			},
			'13': {
				loc: {
					start: {
						line: 102,
						column: 4
					},
					end: {
						line: 114,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 102,
						column: 4
					},
					end: {
						line: 114,
						column: 5
					}
				}, {
					start: {
						line: 102,
						column: 4
					},
					end: {
						line: 114,
						column: 5
					}
				}],
				line: 102
			},
			'14': {
				loc: {
					start: {
						line: 102,
						column: 8
					},
					end: {
						line: 102,
						column: 44
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 102,
						column: 8
					},
					end: {
						line: 102,
						column: 24
					}
				}, {
					start: {
						line: 102,
						column: 28
					},
					end: {
						line: 102,
						column: 44
					}
				}],
				line: 102
			},
			'15': {
				loc: {
					start: {
						line: 105,
						column: 5
					},
					end: {
						line: 112,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 105,
						column: 5
					},
					end: {
						line: 112,
						column: 6
					}
				}, {
					start: {
						line: 105,
						column: 5
					},
					end: {
						line: 112,
						column: 6
					}
				}],
				line: 105
			},
			'16': {
				loc: {
					start: {
						line: 109,
						column: 6
					},
					end: {
						line: 111,
						column: 7
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 109,
						column: 6
					},
					end: {
						line: 111,
						column: 7
					}
				}, {
					start: {
						line: 109,
						column: 6
					},
					end: {
						line: 111,
						column: 7
					}
				}],
				line: 109
			},
			'17': {
				loc: {
					start: {
						line: 136,
						column: 4
					},
					end: {
						line: 140,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 136,
						column: 4
					},
					end: {
						line: 140,
						column: 5
					}
				}, {
					start: {
						line: 136,
						column: 4
					},
					end: {
						line: 140,
						column: 5
					}
				}],
				line: 136
			},
			'18': {
				loc: {
					start: {
						line: 145,
						column: 4
					},
					end: {
						line: 147,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 145,
						column: 4
					},
					end: {
						line: 147,
						column: 5
					}
				}, {
					start: {
						line: 145,
						column: 4
					},
					end: {
						line: 147,
						column: 5
					}
				}],
				line: 145
			},
			'19': {
				loc: {
					start: {
						line: 150,
						column: 3
					},
					end: {
						line: 155,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 150,
						column: 3
					},
					end: {
						line: 155,
						column: 4
					}
				}, {
					start: {
						line: 150,
						column: 3
					},
					end: {
						line: 155,
						column: 4
					}
				}],
				line: 150
			},
			'20': {
				loc: {
					start: {
						line: 150,
						column: 7
					},
					end: {
						line: 150,
						column: 36
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 150,
						column: 7
					},
					end: {
						line: 150,
						column: 14
					}
				}, {
					start: {
						line: 150,
						column: 18
					},
					end: {
						line: 150,
						column: 36
					}
				}],
				line: 150
			},
			'21': {
				loc: {
					start: {
						line: 162,
						column: 2
					},
					end: {
						line: 167,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 162,
						column: 2
					},
					end: {
						line: 167,
						column: 3
					}
				}, {
					start: {
						line: 162,
						column: 2
					},
					end: {
						line: 167,
						column: 3
					}
				}],
				line: 162
			},
			'22': {
				loc: {
					start: {
						line: 162,
						column: 6
					},
					end: {
						line: 162,
						column: 22
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 162,
						column: 6
					},
					end: {
						line: 162,
						column: 9
					}
				}, {
					start: {
						line: 162,
						column: 13
					},
					end: {
						line: 162,
						column: 22
					}
				}],
				line: 162
			},
			'23': {
				loc: {
					start: {
						line: 172,
						column: 5
					},
					end: {
						line: 180,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 172,
						column: 5
					},
					end: {
						line: 180,
						column: 6
					}
				}, {
					start: {
						line: 172,
						column: 5
					},
					end: {
						line: 180,
						column: 6
					}
				}],
				line: 172
			},
			'24': {
				loc: {
					start: {
						line: 175,
						column: 7
					},
					end: {
						line: 178,
						column: 8
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 175,
						column: 7
					},
					end: {
						line: 178,
						column: 8
					}
				}, {
					start: {
						line: 175,
						column: 7
					},
					end: {
						line: 178,
						column: 8
					}
				}],
				line: 175
			},
			'25': {
				loc: {
					start: {
						line: 194,
						column: 17
					},
					end: {
						line: 194,
						column: 82
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 194,
						column: 17
					},
					end: {
						line: 194,
						column: 36
					}
				}, {
					start: {
						line: 194,
						column: 40
					},
					end: {
						line: 194,
						column: 82
					}
				}],
				line: 194
			},
			'26': {
				loc: {
					start: {
						line: 195,
						column: 16
					},
					end: {
						line: 195,
						column: 81
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 195,
						column: 16
					},
					end: {
						line: 195,
						column: 35
					}
				}, {
					start: {
						line: 195,
						column: 39
					},
					end: {
						line: 195,
						column: 81
					}
				}],
				line: 195
			},
			'27': {
				loc: {
					start: {
						line: 200,
						column: 5
					},
					end: {
						line: 210,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 200,
						column: 5
					},
					end: {
						line: 210,
						column: 6
					}
				}, {
					start: {
						line: 200,
						column: 5
					},
					end: {
						line: 210,
						column: 6
					}
				}],
				line: 200
			},
			'28': {
				loc: {
					start: {
						line: 206,
						column: 12
					},
					end: {
						line: 210,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 206,
						column: 12
					},
					end: {
						line: 210,
						column: 6
					}
				}, {
					start: {
						line: 206,
						column: 12
					},
					end: {
						line: 210,
						column: 6
					}
				}],
				line: 206
			},
			'29': {
				loc: {
					start: {
						line: 221,
						column: 14
					},
					end: {
						line: 221,
						column: 65
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 221,
						column: 30
					},
					end: {
						line: 221,
						column: 49
					}
				}, {
					start: {
						line: 221,
						column: 52
					},
					end: {
						line: 221,
						column: 65
					}
				}],
				line: 221
			},
			'30': {
				loc: {
					start: {
						line: 225,
						column: 4
					},
					end: {
						line: 231,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 225,
						column: 4
					},
					end: {
						line: 231,
						column: 5
					}
				}, {
					start: {
						line: 225,
						column: 4
					},
					end: {
						line: 231,
						column: 5
					}
				}],
				line: 225
			},
			'31': {
				loc: {
					start: {
						line: 225,
						column: 8
					},
					end: {
						line: 227,
						column: 50
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 225,
						column: 8
					},
					end: {
						line: 225,
						column: 21
					}
				}, {
					start: {
						line: 226,
						column: 5
					},
					end: {
						line: 226,
						column: 24
					}
				}, {
					start: {
						line: 227,
						column: 5
					},
					end: {
						line: 227,
						column: 50
					}
				}],
				line: 225
			},
			'32': {
				loc: {
					start: {
						line: 266,
						column: 13
					},
					end: {
						line: 272,
						column: 5
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 266,
						column: 13
					},
					end: {
						line: 266,
						column: 21
					}
				}, {
					start: {
						line: 266,
						column: 26
					},
					end: {
						line: 272,
						column: 4
					}
				}],
				line: 266
			},
			'33': {
				loc: {
					start: {
						line: 267,
						column: 3
					},
					end: {
						line: 269,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 267,
						column: 3
					},
					end: {
						line: 269,
						column: 4
					}
				}, {
					start: {
						line: 267,
						column: 3
					},
					end: {
						line: 269,
						column: 4
					}
				}],
				line: 267
			},
			'34': {
				loc: {
					start: {
						line: 279,
						column: 5
					},
					end: {
						line: 281,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 279,
						column: 5
					},
					end: {
						line: 281,
						column: 6
					}
				}, {
					start: {
						line: 279,
						column: 5
					},
					end: {
						line: 281,
						column: 6
					}
				}],
				line: 279
			},
			'35': {
				loc: {
					start: {
						line: 283,
						column: 5
					},
					end: {
						line: 288,
						column: 6
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 283,
						column: 5
					},
					end: {
						line: 288,
						column: 6
					}
				}, {
					start: {
						line: 283,
						column: 5
					},
					end: {
						line: 288,
						column: 6
					}
				}],
				line: 283
			},
			'36': {
				loc: {
					start: {
						line: 283,
						column: 9
					},
					end: {
						line: 283,
						column: 38
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 283,
						column: 9
					},
					end: {
						line: 283,
						column: 16
					}
				}, {
					start: {
						line: 283,
						column: 20
					},
					end: {
						line: 283,
						column: 38
					}
				}],
				line: 283
			},
			'37': {
				loc: {
					start: {
						line: 294,
						column: 2
					},
					end: {
						line: 327,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 294,
						column: 2
					},
					end: {
						line: 327,
						column: 3
					}
				}, {
					start: {
						line: 294,
						column: 2
					},
					end: {
						line: 327,
						column: 3
					}
				}],
				line: 294
			},
			'38': {
				loc: {
					start: {
						line: 300,
						column: 4
					},
					end: {
						line: 302,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 300,
						column: 4
					},
					end: {
						line: 302,
						column: 5
					}
				}, {
					start: {
						line: 300,
						column: 4
					},
					end: {
						line: 302,
						column: 5
					}
				}],
				line: 300
			},
			'39': {
				loc: {
					start: {
						line: 304,
						column: 4
					},
					end: {
						line: 308,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 304,
						column: 4
					},
					end: {
						line: 308,
						column: 5
					}
				}, {
					start: {
						line: 304,
						column: 4
					},
					end: {
						line: 308,
						column: 5
					}
				}],
				line: 304
			},
			'40': {
				loc: {
					start: {
						line: 304,
						column: 8
					},
					end: {
						line: 304,
						column: 38
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 304,
						column: 8
					},
					end: {
						line: 304,
						column: 18
					}
				}, {
					start: {
						line: 304,
						column: 22
					},
					end: {
						line: 304,
						column: 38
					}
				}],
				line: 304
			}
		},
		s: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0,
			'35': 0,
			'36': 0,
			'37': 0,
			'38': 0,
			'39': 0,
			'40': 0,
			'41': 0,
			'42': 0,
			'43': 0,
			'44': 0,
			'45': 0,
			'46': 0,
			'47': 0,
			'48': 0,
			'49': 0,
			'50': 0,
			'51': 0,
			'52': 0,
			'53': 0,
			'54': 0,
			'55': 0,
			'56': 0,
			'57': 0,
			'58': 0,
			'59': 0,
			'60': 0,
			'61': 0,
			'62': 0,
			'63': 0,
			'64': 0,
			'65': 0,
			'66': 0,
			'67': 0,
			'68': 0,
			'69': 0,
			'70': 0,
			'71': 0,
			'72': 0,
			'73': 0,
			'74': 0,
			'75': 0,
			'76': 0,
			'77': 0,
			'78': 0,
			'79': 0,
			'80': 0,
			'81': 0,
			'82': 0,
			'83': 0,
			'84': 0,
			'85': 0,
			'86': 0,
			'87': 0,
			'88': 0,
			'89': 0,
			'90': 0,
			'91': 0,
			'92': 0,
			'93': 0,
			'94': 0,
			'95': 0,
			'96': 0,
			'97': 0,
			'98': 0,
			'99': 0,
			'100': 0,
			'101': 0,
			'102': 0,
			'103': 0,
			'104': 0,
			'105': 0,
			'106': 0,
			'107': 0,
			'108': 0,
			'109': 0,
			'110': 0
		},
		f: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0
		},
		b: {
			'0': [0, 0],
			'1': [0, 0],
			'2': [0, 0],
			'3': [0, 0],
			'4': [0, 0, 0, 0],
			'5': [0, 0],
			'6': [0, 0, 0],
			'7': [0, 0],
			'8': [0, 0, 0],
			'9': [0, 0],
			'10': [0, 0],
			'11': [0, 0],
			'12': [0, 0, 0],
			'13': [0, 0],
			'14': [0, 0],
			'15': [0, 0],
			'16': [0, 0],
			'17': [0, 0],
			'18': [0, 0],
			'19': [0, 0],
			'20': [0, 0],
			'21': [0, 0],
			'22': [0, 0],
			'23': [0, 0],
			'24': [0, 0],
			'25': [0, 0],
			'26': [0, 0],
			'27': [0, 0],
			'28': [0, 0],
			'29': [0, 0],
			'30': [0, 0],
			'31': [0, 0, 0],
			'32': [0, 0],
			'33': [0, 0],
			'34': [0, 0],
			'35': [0, 0],
			'36': [0, 0],
			'37': [0, 0],
			'38': [0, 0],
			'39': [0, 0],
			'40': [0, 0]
		},
		_coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	},
	    coverage = global[gcv] || (global[gcv] = {});

	if (coverage[path] && coverage[path].hash === hash) {
		return coverage[path];
	}

	coverageData.hash = hash;
	return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.BoardValidation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	BoardValidation determines viable move options for all pieces
	given the current state of the board. If it's the White sides turn
	to attack, only White piece move options are evaluated (and visa versa).

	BoardValidation is intended to be the 2nd phase of move
	validation that is capable of taking into account factors across pieces
	on the board (and not just the pieces themselves). For example, King
	castle eligibility is determined based on whether or not both the candidate
	King and Rook pieces have not moved and whether or not the path of travel
	for the King would result in the King being placed in check at any
	point during the travel. Individual Piece validation wouldn't be sufficient
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     	to determine whether or not this move is possible.

	Additionally, isSquareAttacked exists on the BoardValidation object. While
	this method could have easily existed within the PieceValidation object
	I've kept it in BoardValidation so that PieceValidation remains truly
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     	agnostic of the other pieces on the same board.

	Due to how BoardValidation actually functions, the client only needs to
	instantiate a BoardValidation for the Game and call the start method
	in order to evaluate every Piece's valid move options. There is no need
	to call PieceValidation (and doing so wouldn't give an accurate picture
	of what is possible anyway).
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     */

var _board = require('./board');

var _piece = require('./piece');

var _pieceValidation = require('./pieceValidation');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BoardValidation = exports.BoardValidation = function () {
	function BoardValidation(game) {
		_classCallCheck(this, BoardValidation);

		this.isSquareAttacked = function (sq) {
			cov_blp7q604p.f[11]++;
			cov_blp7q604p.s[82]++;

			return this.findAttackers(sq).length !== 0;
		};

		cov_blp7q604p.f[0]++;
		cov_blp7q604p.s[0]++;

		this.board = game ? (cov_blp7q604p.b[0][0]++, game.board) : (cov_blp7q604p.b[0][1]++, null);
		cov_blp7q604p.s[1]++;
		this.game = game;
	}

	_createClass(BoardValidation, [{
		key: 'evaluateCastle',
		value: function evaluateCastle(validMoves) {
			cov_blp7q604p.f[2]++;
			cov_blp7q604p.s[3]++;

			var getValidSquares = function getValidSquares(sq) {
				cov_blp7q604p.f[3]++;

				var i = (cov_blp7q604p.s[4]++, 0);

				cov_blp7q604p.s[5]++;
				for (i = 0; i < validMoves.length; i++) {
					cov_blp7q604p.s[6]++;

					if (validMoves[i].src === sq) {
						cov_blp7q604p.b[1][0]++;
						cov_blp7q604p.s[7]++;

						return validMoves[i].squares;
					} else {
						cov_blp7q604p.b[1][1]++;
					}
				}
			},
			    interimMove = (cov_blp7q604p.s[8]++, null),

			/* eslint no-magic-numbers: 0 */
			rank = (cov_blp7q604p.s[9]++, this.game.getCurrentSide() === _piece.SideType.White ? (cov_blp7q604p.b[2][0]++, 1) : (cov_blp7q604p.b[2][1]++, 8)),
			    squares = (cov_blp7q604p.s[10]++, {
				'a': this.board.getSquare('a', rank),
				'b': this.board.getSquare('b', rank),
				'c': this.board.getSquare('c', rank),
				'd': this.board.getSquare('d', rank),
				'e': this.board.getSquare('e', rank),
				'f': this.board.getSquare('f', rank),
				'g': this.board.getSquare('g', rank),
				'h': this.board.getSquare('h', rank)
			});

			// is king eligible
			cov_blp7q604p.s[11]++;
			if ((cov_blp7q604p.b[4][0]++, squares.e.piece) && (cov_blp7q604p.b[4][1]++, squares.e.piece.type === _piece.PieceType.King) && (cov_blp7q604p.b[4][2]++, squares.e.piece.moveCount === 0) && (cov_blp7q604p.b[4][3]++, !this.isSquareAttacked(squares.e))) {
				cov_blp7q604p.b[3][0]++;
				cov_blp7q604p.s[12]++;


				// is left rook eligible
				if ((cov_blp7q604p.b[6][0]++, squares.a.piece) && (cov_blp7q604p.b[6][1]++, squares.a.piece.type === _piece.PieceType.Rook) && (cov_blp7q604p.b[6][2]++, squares.a.piece.moveCount === 0)) {
					cov_blp7q604p.b[5][0]++;
					cov_blp7q604p.s[13]++;


					// are the squares between king and rook clear
					if ((cov_blp7q604p.b[8][0]++, !squares.b.piece) && (cov_blp7q604p.b[8][1]++, !squares.c.piece) && (cov_blp7q604p.b[8][2]++, !squares.d.piece)) {
						cov_blp7q604p.b[7][0]++;
						cov_blp7q604p.s[14]++;


						// when king moves through squares between, is it in check
						interimMove = this.board.move(squares.e, squares.d, true);
						cov_blp7q604p.s[15]++;
						if (!this.isSquareAttacked(squares.d)) {
							cov_blp7q604p.b[9][0]++;
							cov_blp7q604p.s[16]++;

							interimMove.undo();
							cov_blp7q604p.s[17]++;
							interimMove = this.board.move(squares.e, squares.c, true);

							cov_blp7q604p.s[18]++;
							if (!this.isSquareAttacked(squares.c)) {
								cov_blp7q604p.b[10][0]++;
								cov_blp7q604p.s[19]++;

								getValidSquares(squares.e).push(squares.c);
							} else {
								cov_blp7q604p.b[10][1]++;
							}
						} else {
							cov_blp7q604p.b[9][1]++;
						}
						cov_blp7q604p.s[20]++;
						interimMove.undo();
					} else {
						cov_blp7q604p.b[7][1]++;
					}
				} else {
					cov_blp7q604p.b[5][1]++;
				}

				// is right rook eligible
				cov_blp7q604p.s[21]++;
				if ((cov_blp7q604p.b[12][0]++, squares.h.piece) && (cov_blp7q604p.b[12][1]++, squares.h.piece.type === _piece.PieceType.Rook) && (cov_blp7q604p.b[12][2]++, squares.h.piece.moveCount === 0)) {
					cov_blp7q604p.b[11][0]++;
					cov_blp7q604p.s[22]++;


					// are the squares between king and rook clear
					if ((cov_blp7q604p.b[14][0]++, !squares.g.piece) && (cov_blp7q604p.b[14][1]++, !squares.f.piece)) {
						cov_blp7q604p.b[13][0]++;
						cov_blp7q604p.s[23]++;

						// when king moves through squares between, is it in check
						interimMove = this.board.move(squares.e, squares.f, true);
						cov_blp7q604p.s[24]++;
						if (!this.isSquareAttacked(squares.f)) {
							cov_blp7q604p.b[15][0]++;
							cov_blp7q604p.s[25]++;

							interimMove.undo();
							cov_blp7q604p.s[26]++;
							interimMove = this.board.move(squares.e, squares.g, true);

							cov_blp7q604p.s[27]++;
							if (!this.isSquareAttacked(squares.g)) {
								cov_blp7q604p.b[16][0]++;
								cov_blp7q604p.s[28]++;

								getValidSquares(squares.e).push(squares.g);
							} else {
								cov_blp7q604p.b[16][1]++;
							}
						} else {
							cov_blp7q604p.b[15][1]++;
						}
						cov_blp7q604p.s[29]++;
						interimMove.undo();
					} else {
						cov_blp7q604p.b[13][1]++;
					}
				} else {
					cov_blp7q604p.b[11][1]++;
				}
			} else {
				cov_blp7q604p.b[3][1]++;
			}
		}
	}, {
		key: 'filterKingAttack',
		value: function filterKingAttack(kingSquare, moves) {
			cov_blp7q604p.f[4]++;

			var i = (cov_blp7q604p.s[30]++, 0),
			    isCheck = (cov_blp7q604p.s[31]++, false),
			    n = (cov_blp7q604p.s[32]++, 0),
			    r = (cov_blp7q604p.s[33]++, null),
			    squares = (cov_blp7q604p.s[34]++, []),
			    filteredMoves = (cov_blp7q604p.s[35]++, []);

			cov_blp7q604p.s[36]++;
			for (i = 0; i < moves.length; i++) {
				cov_blp7q604p.s[37]++;

				squares = [];

				cov_blp7q604p.s[38]++;
				for (n = 0; n < moves[i].squares.length; n++) {
					cov_blp7q604p.s[39]++;

					// simulate move on the board
					r = this.board.move(moves[i].src, moves[i].squares[n], true);

					// check if king is attacked
					cov_blp7q604p.s[40]++;
					if (moves[i].squares[n].piece.type !== _piece.PieceType.King) {
						cov_blp7q604p.b[17][0]++;
						cov_blp7q604p.s[41]++;

						isCheck = this.isSquareAttacked(kingSquare);
					} else {
						cov_blp7q604p.b[17][1]++;
						cov_blp7q604p.s[42]++;

						isCheck = this.isSquareAttacked(moves[i].squares[n]);
					}

					// reverse the move
					cov_blp7q604p.s[43]++;
					r.undo();

					cov_blp7q604p.s[44]++;
					if (!isCheck) {
						cov_blp7q604p.b[18][0]++;
						cov_blp7q604p.s[45]++;

						squares.push(moves[i].squares[n]);
					} else {
						cov_blp7q604p.b[18][1]++;
					}
				}

				cov_blp7q604p.s[46]++;
				if ((cov_blp7q604p.b[20][0]++, squares) && (cov_blp7q604p.b[20][1]++, squares.length > 0)) {
					cov_blp7q604p.b[19][0]++;
					cov_blp7q604p.s[47]++;

					filteredMoves.push({
						src: moves[i].src,
						squares: squares
					});
				} else {
					cov_blp7q604p.b[19][1]++;
				}
			}

			cov_blp7q604p.s[48]++;
			return filteredMoves;
		}
	}, {
		key: 'findAttackers',
		value: function findAttackers(sq) {
			cov_blp7q604p.f[5]++;
			cov_blp7q604p.s[49]++;

			if ((cov_blp7q604p.b[22][0]++, !sq) || (cov_blp7q604p.b[22][1]++, !sq.piece)) {
				cov_blp7q604p.b[21][0]++;
				cov_blp7q604p.s[50]++;

				return {
					attacked: false,
					blocked: false
				};
			} else {
				cov_blp7q604p.b[21][1]++;
			}

			cov_blp7q604p.s[51]++;
			cov_blp7q604p.s[61]++;
			cov_blp7q604p.s[73]++;
			var setAttacked = function setAttacked(c) {
				cov_blp7q604p.f[6]++;
				cov_blp7q604p.s[52]++;

				return function (err, squares) {
					cov_blp7q604p.f[7]++;
					cov_blp7q604p.s[53]++;

					if (!err) {
						cov_blp7q604p.b[23][0]++;

						var i = (cov_blp7q604p.s[54]++, 0);
						cov_blp7q604p.s[55]++;
						for (i = 0; i < squares.length; i++) {
							cov_blp7q604p.s[56]++;

							if (squares[i] === sq) {
								cov_blp7q604p.b[24][0]++;
								cov_blp7q604p.s[57]++;

								c.attacked = true;
								cov_blp7q604p.s[58]++;
								return;
							} else {
								cov_blp7q604p.b[24][1]++;
							}
						}
					} else {
						cov_blp7q604p.b[23][1]++;
					}

					cov_blp7q604p.s[59]++;
					c.attacked = false;
				};
			},

			/* eslint no-invalid-this: 0 */
			self = (cov_blp7q604p.s[60]++, this),
			    isAttacked = function isAttacked(b, n) {
				cov_blp7q604p.f[8]++;

				var currentSquare = (cov_blp7q604p.s[62]++, b.getNeighborSquare(sq, n)),
				    context = (cov_blp7q604p.s[63]++, {});

				cov_blp7q604p.s[64]++;
				while (currentSquare) {
					cov_blp7q604p.s[65]++;

					context = {
						attacked: (cov_blp7q604p.b[25][0]++, currentSquare.piece) && (cov_blp7q604p.b[25][1]++, currentSquare.piece.side !== sq.piece.side),
						blocked: (cov_blp7q604p.b[26][0]++, currentSquare.piece) && (cov_blp7q604p.b[26][1]++, currentSquare.piece.side === sq.piece.side),
						piece: currentSquare.piece,
						square: currentSquare
					};

					cov_blp7q604p.s[66]++;
					if (context.attacked) {
						cov_blp7q604p.b[27][0]++;
						cov_blp7q604p.s[67]++;

						// verify that the square is actually attacked
						_pieceValidation.PieceValidation.create(context.piece.type, b).start(currentSquare, setAttacked(context));
						cov_blp7q604p.s[68]++;
						currentSquare = null;
					} else {
							cov_blp7q604p.b[27][1]++;
							cov_blp7q604p.s[69]++;
							if (context.blocked) {
								cov_blp7q604p.b[28][0]++;
								cov_blp7q604p.s[70]++;

								currentSquare = null;
							} else {
								cov_blp7q604p.b[28][1]++;
								cov_blp7q604p.s[71]++;

								currentSquare = b.getNeighborSquare(currentSquare, n);
							}
						}
				}

				cov_blp7q604p.s[72]++;
				return context;
			},
			    isAttackedByKnight = function isAttackedByKnight(b, n) {
				cov_blp7q604p.f[9]++;

				var currentSquare = (cov_blp7q604p.s[74]++, b.getNeighborSquare(sq, n)),
				    context = (cov_blp7q604p.s[75]++, {
					attacked: false,
					blocked: false,
					piece: currentSquare ? (cov_blp7q604p.b[29][0]++, currentSquare.piece) : (cov_blp7q604p.b[29][1]++, currentSquare),
					square: currentSquare
				});

				cov_blp7q604p.s[76]++;
				if ((cov_blp7q604p.b[31][0]++, currentSquare) && (cov_blp7q604p.b[31][1]++, currentSquare.piece) && (cov_blp7q604p.b[31][2]++, currentSquare.piece.type === _piece.PieceType.Knight)) {
					cov_blp7q604p.b[30][0]++;
					cov_blp7q604p.s[77]++;

					_pieceValidation.PieceValidation.create(_piece.PieceType.Knight, b).start(currentSquare, setAttacked(context));
				} else {
					cov_blp7q604p.b[30][1]++;
				}

				cov_blp7q604p.s[78]++;
				return context;
			},
			    result = (cov_blp7q604p.s[79]++, [isAttacked(self.board, _board.NeighborType.Above), isAttacked(self.board, _board.NeighborType.AboveRight), isAttacked(self.board, _board.NeighborType.Right), isAttacked(self.board, _board.NeighborType.BelowRight), isAttacked(self.board, _board.NeighborType.Below), isAttacked(self.board, _board.NeighborType.BelowLeft), isAttacked(self.board, _board.NeighborType.Left), isAttacked(self.board, _board.NeighborType.AboveLeft),
			// fix for issue #4
			isAttackedByKnight(self.board, _board.NeighborType.KnightAboveRight), isAttackedByKnight(self.board, _board.NeighborType.KnightRightAbove), isAttackedByKnight(self.board, _board.NeighborType.KnightBelowRight), isAttackedByKnight(self.board, _board.NeighborType.KnightRightBelow), isAttackedByKnight(self.board, _board.NeighborType.KnightBelowLeft), isAttackedByKnight(self.board, _board.NeighborType.KnightLeftBelow), isAttackedByKnight(self.board, _board.NeighborType.KnightAboveLeft), isAttackedByKnight(self.board, _board.NeighborType.KnightLeftAbove)].filter(function (result) {
				cov_blp7q604p.f[10]++;
				cov_blp7q604p.s[80]++;
				return result.attacked;
			}));

			// console.log('findAttackers result', result);

			cov_blp7q604p.s[81]++;
			return result;
		}
	}, {
		key: 'start',
		value: function start(callback) {
			var _this = this;

			cov_blp7q604p.f[12]++;
			cov_blp7q604p.s[83]++;

			// ensure callback is set
			callback = (cov_blp7q604p.b[32][0]++, callback) || (cov_blp7q604p.b[32][1]++, function (err, validMoves) {
				cov_blp7q604p.f[13]++;
				cov_blp7q604p.s[84]++;
				return new Promise(function (resolve, reject) {
					cov_blp7q604p.f[14]++;
					cov_blp7q604p.s[85]++;

					if (err) {
						cov_blp7q604p.b[33][0]++;
						cov_blp7q604p.s[86]++;

						return reject(err);
					} else {
						cov_blp7q604p.b[33][1]++;
					}

					cov_blp7q604p.s[87]++;
					return resolve(validMoves);
				});
			});

			cov_blp7q604p.s[90]++;
			var i = (cov_blp7q604p.s[88]++, 0),
			    kingSquare = (cov_blp7q604p.s[89]++, null),
			    setValidMoves = function setValidMoves(v, sq) {
				cov_blp7q604p.f[15]++;
				cov_blp7q604p.s[91]++;

				return function (err, squares) {
					cov_blp7q604p.f[16]++;
					cov_blp7q604p.s[92]++;

					if (err) {
						cov_blp7q604p.b[34][0]++;
						cov_blp7q604p.s[93]++;

						return callback(err);
					} else {
						cov_blp7q604p.b[34][1]++;
					}

					cov_blp7q604p.s[94]++;
					if ((cov_blp7q604p.b[36][0]++, squares) && (cov_blp7q604p.b[36][1]++, squares.length > 0)) {
						cov_blp7q604p.b[35][0]++;
						cov_blp7q604p.s[95]++;

						v.push({
							squares: squares,
							src: sq
						});
					} else {
						cov_blp7q604p.b[35][1]++;
					}
				};
			},
			    squares = (cov_blp7q604p.s[96]++, []),
			    validMoves = (cov_blp7q604p.s[97]++, []);

			cov_blp7q604p.s[98]++;
			if (this.board) {
				cov_blp7q604p.b[37][0]++;
				cov_blp7q604p.s[99]++;

				// get squares with pieces for which to evaluate move options
				squares = this.board.getSquares(this.game.getCurrentSide());

				cov_blp7q604p.s[100]++;
				for (i = 0; i < squares.length; i++) {
					cov_blp7q604p.s[101]++;

					// set king to refer to later
					if (squares[i].piece.type === _piece.PieceType.King) {
						cov_blp7q604p.b[38][0]++;
						cov_blp7q604p.s[102]++;

						kingSquare = squares[i];
					} else {
						cov_blp7q604p.b[38][1]++;
					}

					cov_blp7q604p.s[103]++;
					if ((cov_blp7q604p.b[40][0]++, squares[i]) && (cov_blp7q604p.b[40][1]++, squares[i].piece)) {
						cov_blp7q604p.b[39][0]++;
						cov_blp7q604p.s[104]++;

						_pieceValidation.PieceValidation.create(squares[i].piece.type, this.board).start(squares[i], setValidMoves(validMoves, squares[i]));
					} else {
						cov_blp7q604p.b[39][1]++;
					}
				}

				// perform king castle validation
				cov_blp7q604p.s[105]++;
				this.evaluateCastle(validMoves);

				// make sure moves only contain escape & non-check options
				cov_blp7q604p.s[106]++;
				validMoves = this.filterKingAttack(kingSquare, validMoves);

				// find any pieces attacking the king
				cov_blp7q604p.s[107]++;
				this.findAttackers(kingSquare).forEach(function (attacker) {
					cov_blp7q604p.f[17]++;
					cov_blp7q604p.s[108]++;

					_this.game.emit('check', {
						attackingSquare: attacker.square,
						kingSquare: kingSquare
					});
				});
			} else {
				cov_blp7q604p.b[37][1]++;
				cov_blp7q604p.s[109]++;

				return callback(new Error('board is invalid'));
			}

			cov_blp7q604p.s[110]++;
			return callback(null, validMoves);
		}
	}], [{
		key: 'create',
		value: function create(game) {
			cov_blp7q604p.f[1]++;
			cov_blp7q604p.s[2]++;

			return new BoardValidation(game);
		}
	}]);

	return BoardValidation;
}();

exports.default = { BoardValidation: BoardValidation };
//# sourceMappingURL=boardValidation.js.map
