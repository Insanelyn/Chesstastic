{"version":3,"sources":["boardValidation.js"],"names":["BoardValidation","game","isSquareAttacked","sq","findAttackers","length","board","validMoves","getValidSquares","i","src","squares","interimMove","rank","getCurrentSide","White","getSquare","e","piece","type","King","moveCount","a","Rook","b","c","d","move","undo","push","h","g","f","kingSquare","moves","isCheck","n","r","filteredMoves","attacked","blocked","setAttacked","err","self","isAttacked","currentSquare","getNeighborSquare","context","side","square","create","start","isAttackedByKnight","Knight","result","Above","AboveRight","Right","BelowRight","Below","BelowLeft","Left","AboveLeft","KnightAboveRight","KnightRightAbove","KnightBelowRight","KnightRightBelow","KnightBelowLeft","KnightLeftBelow","KnightAboveLeft","KnightLeftAbove","filter","callback","Promise","resolve","reject","setValidMoves","v","getSquares","evaluateCastle","filterKingAttack","forEach","attacker","emit","attackingSquare","Error"],"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","file":"boardValidation.js","sourcesContent":["/**\n\tBoardValidation determines viable move options for all pieces\n\tgiven the current state of the board. If it's the White sides turn\n\tto attack, only White piece move options are evaluated (and visa versa).\n\n\tBoardValidation is intended to be the 2nd phase of move\n\tvalidation that is capable of taking into account factors across pieces\n\ton the board (and not just the pieces themselves). For example, King\n\tcastle eligibility is determined based on whether or not both the candidate\n\tKing and Rook pieces have not moved and whether or not the path of travel\n\tfor the King would result in the King being placed in check at any\n\tpoint during the travel. Individual Piece validation wouldn't be sufficient\n\tto determine whether or not this move is possible.\n\n\tAdditionally, isSquareAttacked exists on the BoardValidation object. While\n\tthis method could have easily existed within the PieceValidation object\n\tI've kept it in BoardValidation so that PieceValidation remains truly\n\tagnostic of the other pieces on the same board.\n\n\tDue to how BoardValidation actually functions, the client only needs to\n\tinstantiate a BoardValidation for the Game and call the start method\n\tin order to evaluate every Piece's valid move options. There is no need\n\tto call PieceValidation (and doing so wouldn't give an accurate picture\n\tof what is possible anyway).\n*/\n\nimport { NeighborType } from './board';\nimport { PieceType, SideType } from './piece';\nimport { PieceValidation } from './pieceValidation';\n\nexport class BoardValidation {\n\tconstructor (game) {\n\t\tthis.board = game ? game.board : null;\n\t\tthis.game = game;\n\t}\n\n\tstatic create (game) {\n\t\treturn new BoardValidation(game);\n\t}\n\n\tevaluateCastle (validMoves) {\n\t\tlet\n\t\t\tgetValidSquares = (sq) => {\n\t\t\t\tlet i = 0;\n\n\t\t\t\tfor (i = 0; i < validMoves.length; i++) {\n\t\t\t\t\tif (validMoves[i].src === sq) {\n\t\t\t\t\t\treturn validMoves[i].squares;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tinterimMove = null,\n\t\t\t/* eslint no-magic-numbers: 0 */\n\t\t\trank = this.game.getCurrentSide() === SideType.White ? 1 : 8,\n\t\t\tsquares = {\n\t\t\t\t'a' : this.board.getSquare('a', rank),\n\t\t\t\t'b' : this.board.getSquare('b', rank),\n\t\t\t\t'c' : this.board.getSquare('c', rank),\n\t\t\t\t'd' : this.board.getSquare('d', rank),\n\t\t\t\t'e' : this.board.getSquare('e', rank),\n\t\t\t\t'f' : this.board.getSquare('f', rank),\n\t\t\t\t'g' : this.board.getSquare('g', rank),\n\t\t\t\t'h' : this.board.getSquare('h', rank)\n\t\t\t};\n\n\t\t// is king eligible\n\t\tif (squares.e.piece &&\n\t\t\t\tsquares.e.piece.type === PieceType.King &&\n\t\t\t\tsquares.e.piece.moveCount === 0 &&\n\t\t\t\t!this.isSquareAttacked(squares.e)) {\n\n\t\t\t// is left rook eligible\n\t\t\tif (squares.a.piece &&\n\t\t\t\t\tsquares.a.piece.type === PieceType.Rook &&\n\t\t\t\t\tsquares.a.piece.moveCount === 0) {\n\n\t\t\t\t// are the squares between king and rook clear\n\t\t\t\tif (!squares.b.piece &&\n\t\t\t\t\t\t!squares.c.piece &&\n\t\t\t\t\t\t!squares.d.piece) {\n\n\t\t\t\t\t// when king moves through squares between, is it in check\n\t\t\t\t\tinterimMove = this.board.move(squares.e, squares.d, true);\n\t\t\t\t\tif (!this.isSquareAttacked(squares.d)) {\n\t\t\t\t\t\tinterimMove.undo();\n\t\t\t\t\t\tinterimMove = this.board.move(squares.e, squares.c, true);\n\n\t\t\t\t\t\tif (!this.isSquareAttacked(squares.c)) {\n\t\t\t\t\t\t\tgetValidSquares(squares.e).push(squares.c);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinterimMove.undo();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// is right rook eligible\n\t\t\tif (squares.h.piece &&\n\t\t\t\t\tsquares.h.piece.type === PieceType.Rook &&\n\t\t\t\t\tsquares.h.piece.moveCount === 0) {\n\n\t\t\t\t// are the squares between king and rook clear\n\t\t\t\tif (!squares.g.piece && !squares.f.piece) {\n\t\t\t\t\t// when king moves through squares between, is it in check\n\t\t\t\t\tinterimMove = this.board.move(squares.e, squares.f, true);\n\t\t\t\t\tif (!this.isSquareAttacked(squares.f)) {\n\t\t\t\t\t\tinterimMove.undo();\n\t\t\t\t\t\tinterimMove = this.board.move(squares.e, squares.g, true);\n\n\t\t\t\t\t\tif (!this.isSquareAttacked(squares.g)) {\n\t\t\t\t\t\t\tgetValidSquares(squares.e).push(squares.g);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinterimMove.undo();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfilterKingAttack (kingSquare, moves) {\n\t\tlet\n\t\t\ti = 0,\n\t\t\tisCheck = false,\n\t\t\tn = 0,\n\t\t\tr = null,\n\t\t\tsquares = [],\n\t\t\tfilteredMoves = [];\n\n\t\tfor (i = 0; i < moves.length; i++) {\n\t\t\tsquares = [];\n\n\t\t\tfor (n = 0; n < moves[i].squares.length; n++) {\n\t\t\t\t// simulate move on the board\n\t\t\t\tr = this.board.move(moves[i].src, moves[i].squares[n], true);\n\n\t\t\t\t// check if king is attacked\n\t\t\t\tif (moves[i].squares[n].piece.type !== PieceType.King) {\n\t\t\t\t\tisCheck = this.isSquareAttacked(kingSquare);\n\t\t\t\t} else {\n\t\t\t\t\tisCheck = this.isSquareAttacked(moves[i].squares[n]);\n\t\t\t\t}\n\n\t\t\t\t// reverse the move\n\t\t\t\tr.undo();\n\n\t\t\t\tif (!isCheck) {\n\t\t\t\t\tsquares.push(moves[i].squares[n]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (squares && squares.length > 0) {\n\t\t\t\tfilteredMoves.push({\n\t\t\t\t\tsrc : moves[i].src,\n\t\t\t\t\tsquares\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn filteredMoves;\n\t}\n\n\tfindAttackers (sq) {\n\t\tif (!sq || !sq.piece) {\n\t\t\treturn {\n\t\t\t\tattacked : false,\n\t\t\t\tblocked : false\n\t\t\t};\n\t\t}\n\n\t\tlet\n\t\t\tsetAttacked = function (c) {\n\t\t\t\treturn function (err, squares) {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\t\t\t\t\tif (squares[i] === sq) {\n\t\t\t\t\t\t\t\tc.attacked = true;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tc.attacked = false;\n\t\t\t\t};\n\t\t\t},\n\t\t\t/* eslint no-invalid-this: 0 */\n\t\t\tself = this,\n\t\t\tisAttacked = function (b, n) {\n\t\t\t\tlet\n\t\t\t\t\tcurrentSquare = b.getNeighborSquare(sq, n),\n\t\t\t\t\tcontext = {};\n\n\t\t\t\twhile (currentSquare) {\n\t\t\t\t\tcontext = {\n\t\t\t\t\t\tattacked : currentSquare.piece && currentSquare.piece.side !== sq.piece.side,\n\t\t\t\t\t\tblocked : currentSquare.piece && currentSquare.piece.side === sq.piece.side,\n\t\t\t\t\t\tpiece : currentSquare.piece,\n\t\t\t\t\t\tsquare : currentSquare\n\t\t\t\t\t};\n\n\t\t\t\t\tif (context.attacked) {\n\t\t\t\t\t\t// verify that the square is actually attacked\n\t\t\t\t\t\tPieceValidation\n\t\t\t\t\t\t\t.create(context.piece.type, b)\n\t\t\t\t\t\t\t.start(currentSquare, setAttacked(context));\n\t\t\t\t\t\tcurrentSquare = null;\n\t\t\t\t\t} else if (context.blocked) {\n\t\t\t\t\t\tcurrentSquare = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentSquare = b.getNeighborSquare(currentSquare, n);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn context;\n\t\t\t},\n\t\t\tisAttackedByKnight = function (b, n) {\n\t\t\t\tlet\n\t\t\t\t\tcurrentSquare = b.getNeighborSquare(sq, n),\n\t\t\t\t\tcontext = {\n\t\t\t\t\t\tattacked : false,\n\t\t\t\t\t\tblocked : false,\n\t\t\t\t\t\tpiece : currentSquare ? currentSquare.piece : currentSquare,\n\t\t\t\t\t\tsquare : currentSquare\n\t\t\t\t\t};\n\n\t\t\t\tif (currentSquare &&\n\t\t\t\t\tcurrentSquare.piece &&\n\t\t\t\t\tcurrentSquare.piece.type === PieceType.Knight) {\n\t\t\t\t\tPieceValidation\n\t\t\t\t\t\t.create(PieceType.Knight, b)\n\t\t\t\t\t\t.start(currentSquare, setAttacked(context));\n\t\t\t\t}\n\n\t\t\t\treturn context;\n\t\t\t},\n\t\t\tresult = [\n\t\t\t\tisAttacked(self.board, NeighborType.Above),\n\t\t\t\tisAttacked(self.board, NeighborType.AboveRight),\n\t\t\t\tisAttacked(self.board, NeighborType.Right),\n\t\t\t\tisAttacked(self.board, NeighborType.BelowRight),\n\t\t\t\tisAttacked(self.board, NeighborType.Below),\n\t\t\t\tisAttacked(self.board, NeighborType.BelowLeft),\n\t\t\t\tisAttacked(self.board, NeighborType.Left),\n\t\t\t\tisAttacked(self.board, NeighborType.AboveLeft),\n\t\t\t\t// fix for issue #4\n\t\t\t\tisAttackedByKnight(self.board, NeighborType.KnightAboveRight),\n\t\t\t\tisAttackedByKnight(self.board, NeighborType.KnightRightAbove),\n\t\t\t\tisAttackedByKnight(self.board, NeighborType.KnightBelowRight),\n\t\t\t\tisAttackedByKnight(self.board, NeighborType.KnightRightBelow),\n\t\t\t\tisAttackedByKnight(self.board, NeighborType.KnightBelowLeft),\n\t\t\t\tisAttackedByKnight(self.board, NeighborType.KnightLeftBelow),\n\t\t\t\tisAttackedByKnight(self.board, NeighborType.KnightAboveLeft),\n\t\t\t\tisAttackedByKnight(self.board, NeighborType.KnightLeftAbove)\n\t\t\t].filter((result) => result.attacked);\n\n\t\t// console.log('findAttackers result', result);\n\n\t\treturn result;\n\t}\n\n\tisSquareAttacked = function (sq) {\n\t\treturn this.findAttackers(sq).length !== 0;\n\t}\n\n\tstart (callback) {\n\t\t// ensure callback is set\n\t\tcallback = callback || ((err, validMoves) => new Promise((resolve, reject) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(validMoves);\n\t\t}));\n\n\t\tlet\n\t\t\ti = 0,\n\t\t\tkingSquare = null,\n\t\t\tsetValidMoves = function (v, sq) {\n\t\t\t\treturn function (err, squares) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (squares && squares.length > 0) {\n\t\t\t\t\t\tv.push({\n\t\t\t\t\t\t\tsquares,\n\t\t\t\t\t\t\tsrc : sq\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\tsquares = [],\n\t\t\tvalidMoves = [];\n\n\t\tif (this.board) {\n\t\t\t// get squares with pieces for which to evaluate move options\n\t\t\tsquares = this.board.getSquares(this.game.getCurrentSide());\n\n\t\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\t\t// set king to refer to later\n\t\t\t\tif (squares[i].piece.type === PieceType.King) {\n\t\t\t\t\tkingSquare = squares[i];\n\t\t\t\t}\n\n\t\t\t\tif (squares[i] && squares[i].piece) {\n\t\t\t\t\tPieceValidation\n\t\t\t\t\t\t.create(squares[i].piece.type, this.board)\n\t\t\t\t\t\t.start(squares[i], setValidMoves(validMoves, squares[i]));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// perform king castle validation\n\t\t\tthis.evaluateCastle(validMoves);\n\n\t\t\t// make sure moves only contain escape & non-check options\n\t\t\tvalidMoves = this.filterKingAttack(kingSquare, validMoves);\n\n\t\t\t// find any pieces attacking the king\n\t\t\tthis.findAttackers(kingSquare).forEach((attacker) => {\n\t\t\t\tthis.game.emit(\n\t\t\t\t\t'check', {\n\t\t\t\t\t\tattackingSquare : attacker.square,\n\t\t\t\t\t\tkingSquare\n\t\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\treturn callback(new Error('board is invalid'));\n\t\t}\n\n\t\treturn callback(null, validMoves);\n\t}\n}\n\nexport default { BoardValidation };"]}