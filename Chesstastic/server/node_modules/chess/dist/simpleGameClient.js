'use strict';

var cov_1cypxrwjym = function () {
	var path = '/Volumes/Data/Projects/brozeph/node-chess/src/simpleGameClient.js',
	    hash = '40f066ced7e71251f18a70de205beff40cb7fe43',
	    Function = function () {}.constructor,
	    global = new Function('return this')(),
	    gcv = '__coverage__',
	    coverageData = {
		path: '/Volumes/Data/Projects/brozeph/node-chess/src/simpleGameClient.js',
		statementMap: {
			'0': {
				start: {
					line: 9,
					column: 6
				},
				end: {
					line: 9,
					column: 7
				}
			},
			'1': {
				start: {
					line: 10,
					column: 12
				},
				end: {
					line: 14,
					column: 3
				}
			},
			'2': {
				start: {
					line: 11,
					column: 3
				},
				end: {
					line: 13,
					column: 54
				}
			},
			'3': {
				start: {
					line: 15,
					column: 12
				},
				end: {
					line: 15,
					column: 14
				}
			},
			'4': {
				start: {
					line: 17,
					column: 1
				},
				end: {
					line: 21,
					column: 2
				}
			},
			'5': {
				start: {
					line: 18,
					column: 2
				},
				end: {
					line: 20,
					column: 3
				}
			},
			'6': {
				start: {
					line: 19,
					column: 3
				},
				end: {
					line: 19,
					column: 35
				}
			},
			'7': {
				start: {
					line: 23,
					column: 1
				},
				end: {
					line: 29,
					column: 2
				}
			},
			'8': {
				start: {
					line: 24,
					column: 2
				},
				end: {
					line: 28,
					column: 3
				}
			},
			'9': {
				start: {
					line: 25,
					column: 3
				},
				end: {
					line: 27,
					column: 4
				}
			},
			'10': {
				start: {
					line: 26,
					column: 4
				},
				end: {
					line: 26,
					column: 16
				}
			},
			'11': {
				start: {
					line: 31,
					column: 1
				},
				end: {
					line: 31,
					column: 14
				}
			},
			'12': {
				start: {
					line: 35,
					column: 1
				},
				end: {
					line: 45,
					column: 4
				}
			},
			'13': {
				start: {
					line: 36,
					column: 2
				},
				end: {
					line: 38,
					column: 3
				}
			},
			'14': {
				start: {
					line: 37,
					column: 3
				},
				end: {
					line: 37,
					column: 24
				}
			},
			'15': {
				start: {
					line: 40,
					column: 2
				},
				end: {
					line: 40,
					column: 38
				}
			},
			'16': {
				start: {
					line: 41,
					column: 2
				},
				end: {
					line: 41,
					column: 46
				}
			},
			'17': {
				start: {
					line: 42,
					column: 2
				},
				end: {
					line: 42,
					column: 48
				}
			},
			'18': {
				start: {
					line: 43,
					column: 2
				},
				end: {
					line: 43,
					column: 46
				}
			},
			'19': {
				start: {
					line: 44,
					column: 2
				},
				end: {
					line: 44,
					column: 44
				}
			},
			'20': {
				start: {
					line: 51,
					column: 2
				},
				end: {
					line: 51,
					column: 10
				}
			},
			'21': {
				start: {
					line: 53,
					column: 2
				},
				end: {
					line: 53,
					column: 23
				}
			},
			'22': {
				start: {
					line: 54,
					column: 2
				},
				end: {
					line: 54,
					column: 27
				}
			},
			'23': {
				start: {
					line: 55,
					column: 2
				},
				end: {
					line: 55,
					column: 28
				}
			},
			'24': {
				start: {
					line: 56,
					column: 2
				},
				end: {
					line: 56,
					column: 27
				}
			},
			'25': {
				start: {
					line: 57,
					column: 2
				},
				end: {
					line: 57,
					column: 19
				}
			},
			'26': {
				start: {
					line: 58,
					column: 2
				},
				end: {
					line: 58,
					column: 23
				}
			},
			'27': {
				start: {
					line: 59,
					column: 2
				},
				end: {
					line: 59,
					column: 53
				}
			},
			'28': {
				start: {
					line: 62,
					column: 2
				},
				end: {
					line: 62,
					column: 72
				}
			},
			'29': {
				start: {
					line: 62,
					column: 40
				},
				end: {
					line: 62,
					column: 69
				}
			},
			'30': {
				start: {
					line: 67,
					column: 10
				},
				end: {
					line: 67,
					column: 23
				}
			},
			'31': {
				start: {
					line: 68,
					column: 16
				},
				end: {
					line: 68,
					column: 42
				}
			},
			'32': {
				start: {
					line: 70,
					column: 2
				},
				end: {
					line: 70,
					column: 31
				}
			},
			'33': {
				start: {
					line: 72,
					column: 2
				},
				end: {
					line: 72,
					column: 20
				}
			},
			'34': {
				start: {
					line: 76,
					column: 2
				},
				end: {
					line: 78,
					column: 3
				}
			},
			'35': {
				start: {
					line: 77,
					column: 3
				},
				end: {
					line: 77,
					column: 26
				}
			},
			'36': {
				start: {
					line: 80,
					column: 2
				},
				end: {
					line: 87,
					column: 4
				}
			},
			'37': {
				start: {
					line: 92,
					column: 10
				},
				end: {
					line: 92,
					column: 14
				}
			},
			'38': {
				start: {
					line: 93,
					column: 10
				},
				end: {
					line: 93,
					column: 36
				}
			},
			'39': {
				start: {
					line: 95,
					column: 1
				},
				end: {
					line: 133,
					column: 2
				}
			},
			'40': {
				start: {
					line: 96,
					column: 2
				},
				end: {
					line: 96,
					column: 41
				}
			},
			'41': {
				start: {
					line: 98,
					column: 2
				},
				end: {
					line: 132,
					column: 3
				}
			},
			'42': {
				start: {
					line: 100,
					column: 3
				},
				end: {
					line: 128,
					column: 4
				}
			},
			'43': {
				start: {
					line: 103,
					column: 4
				},
				end: {
					line: 119,
					column: 5
				}
			},
			'44': {
				start: {
					line: 105,
					column: 6
				},
				end: {
					line: 105,
					column: 39
				}
			},
			'45': {
				start: {
					line: 106,
					column: 6
				},
				end: {
					line: 106,
					column: 12
				}
			},
			'46': {
				start: {
					line: 108,
					column: 6
				},
				end: {
					line: 108,
					column: 39
				}
			},
			'47': {
				start: {
					line: 109,
					column: 6
				},
				end: {
					line: 109,
					column: 12
				}
			},
			'48': {
				start: {
					line: 111,
					column: 6
				},
				end: {
					line: 111,
					column: 38
				}
			},
			'49': {
				start: {
					line: 112,
					column: 6
				},
				end: {
					line: 112,
					column: 12
				}
			},
			'50': {
				start: {
					line: 114,
					column: 6
				},
				end: {
					line: 114,
					column: 37
				}
			},
			'51': {
				start: {
					line: 115,
					column: 6
				},
				end: {
					line: 115,
					column: 12
				}
			},
			'52': {
				start: {
					line: 117,
					column: 6
				},
				end: {
					line: 117,
					column: 19
				}
			},
			'53': {
				start: {
					line: 118,
					column: 6
				},
				end: {
					line: 118,
					column: 12
				}
			},
			'54': {
				start: {
					line: 121,
					column: 4
				},
				end: {
					line: 127,
					column: 5
				}
			},
			'55': {
				start: {
					line: 122,
					column: 5
				},
				end: {
					line: 122,
					column: 58
				}
			},
			'56': {
				start: {
					line: 130,
					column: 3
				},
				end: {
					line: 130,
					column: 26
				}
			},
			'57': {
				start: {
					line: 131,
					column: 3
				},
				end: {
					line: 131,
					column: 15
				}
			},
			'58': {
				start: {
					line: 135,
					column: 1
				},
				end: {
					line: 135,
					column: 60
				}
			}
		},
		fnMap: {
			'0': {
				name: 'isMoveValid',
				decl: {
					start: {
						line: 7,
						column: 9
					},
					end: {
						line: 7,
						column: 20
					}
				},
				loc: {
					start: {
						line: 7,
						column: 45
					},
					end: {
						line: 32,
						column: 1
					}
				},
				line: 7
			},
			'1': {
				name: '(anonymous_1)',
				decl: {
					start: {
						line: 10,
						column: 12
					},
					end: {
						line: 10,
						column: 13
					}
				},
				loc: {
					start: {
						line: 10,
						column: 32
					},
					end: {
						line: 14,
						column: 3
					}
				},
				line: 10
			},
			'2': {
				name: 'updateGameClient',
				decl: {
					start: {
						line: 34,
						column: 9
					},
					end: {
						line: 34,
						column: 25
					}
				},
				loc: {
					start: {
						line: 34,
						column: 39
					},
					end: {
						line: 46,
						column: 1
					}
				},
				line: 34
			},
			'3': {
				name: '(anonymous_3)',
				decl: {
					start: {
						line: 35,
						column: 36
					},
					end: {
						line: 35,
						column: 37
					}
				},
				loc: {
					start: {
						line: 35,
						column: 59
					},
					end: {
						line: 45,
						column: 2
					}
				},
				line: 35
			},
			'4': {
				name: '(anonymous_4)',
				decl: {
					start: {
						line: 50,
						column: 1
					},
					end: {
						line: 50,
						column: 2
					}
				},
				loc: {
					start: {
						line: 50,
						column: 20
					},
					end: {
						line: 63,
						column: 2
					}
				},
				line: 50
			},
			'5': {
				name: '(anonymous_5)',
				decl: {
					start: {
						line: 62,
						column: 24
					},
					end: {
						line: 62,
						column: 25
					}
				},
				loc: {
					start: {
						line: 62,
						column: 40
					},
					end: {
						line: 62,
						column: 69
					}
				},
				line: 62
			},
			'6': {
				name: '(anonymous_6)',
				decl: {
					start: {
						line: 65,
						column: 1
					},
					end: {
						line: 65,
						column: 2
					}
				},
				loc: {
					start: {
						line: 65,
						column: 18
					},
					end: {
						line: 73,
						column: 2
					}
				},
				line: 65
			},
			'7': {
				name: '(anonymous_7)',
				decl: {
					start: {
						line: 75,
						column: 1
					},
					end: {
						line: 75,
						column: 2
					}
				},
				loc: {
					start: {
						line: 75,
						column: 25
					},
					end: {
						line: 88,
						column: 2
					}
				},
				line: 75
			},
			'8': {
				name: '(anonymous_8)',
				decl: {
					start: {
						line: 90,
						column: 1
					},
					end: {
						line: 90,
						column: 2
					}
				},
				loc: {
					start: {
						line: 90,
						column: 25
					},
					end: {
						line: 136,
						column: 2
					}
				},
				line: 90
			}
		},
		branchMap: {
			'0': {
				loc: {
					start: {
						line: 11,
						column: 11
					},
					end: {
						line: 13,
						column: 52
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 11,
						column: 12
					},
					end: {
						line: 11,
						column: 36
					}
				}, {
					start: {
						line: 11,
						column: 40
					},
					end: {
						line: 11,
						column: 66
					}
				}, {
					start: {
						line: 12,
						column: 5
					},
					end: {
						line: 12,
						column: 14
					}
				}, {
					start: {
						line: 12,
						column: 18
					},
					end: {
						line: 12,
						column: 27
					}
				}, {
					start: {
						line: 13,
						column: 5
					},
					end: {
						line: 13,
						column: 26
					}
				}, {
					start: {
						line: 13,
						column: 30
					},
					end: {
						line: 13,
						column: 51
					}
				}],
				line: 11
			},
			'1': {
				loc: {
					start: {
						line: 18,
						column: 2
					},
					end: {
						line: 20,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 18,
						column: 2
					},
					end: {
						line: 20,
						column: 3
					}
				}, {
					start: {
						line: 18,
						column: 2
					},
					end: {
						line: 20,
						column: 3
					}
				}],
				line: 18
			},
			'2': {
				loc: {
					start: {
						line: 23,
						column: 1
					},
					end: {
						line: 29,
						column: 2
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 23,
						column: 1
					},
					end: {
						line: 29,
						column: 2
					}
				}, {
					start: {
						line: 23,
						column: 1
					},
					end: {
						line: 29,
						column: 2
					}
				}],
				line: 23
			},
			'3': {
				loc: {
					start: {
						line: 23,
						column: 5
					},
					end: {
						line: 23,
						column: 34
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 23,
						column: 5
					},
					end: {
						line: 23,
						column: 12
					}
				}, {
					start: {
						line: 23,
						column: 16
					},
					end: {
						line: 23,
						column: 34
					}
				}],
				line: 23
			},
			'4': {
				loc: {
					start: {
						line: 25,
						column: 3
					},
					end: {
						line: 27,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 25,
						column: 3
					},
					end: {
						line: 27,
						column: 4
					}
				}, {
					start: {
						line: 25,
						column: 3
					},
					end: {
						line: 27,
						column: 4
					}
				}],
				line: 25
			},
			'5': {
				loc: {
					start: {
						line: 36,
						column: 2
					},
					end: {
						line: 38,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 36,
						column: 2
					},
					end: {
						line: 38,
						column: 3
					}
				}, {
					start: {
						line: 36,
						column: 2
					},
					end: {
						line: 38,
						column: 3
					}
				}],
				line: 36
			},
			'6': {
				loc: {
					start: {
						line: 76,
						column: 2
					},
					end: {
						line: 78,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 76,
						column: 2
					},
					end: {
						line: 78,
						column: 3
					}
				}, {
					start: {
						line: 76,
						column: 2
					},
					end: {
						line: 78,
						column: 3
					}
				}],
				line: 76
			},
			'7': {
				loc: {
					start: {
						line: 95,
						column: 1
					},
					end: {
						line: 133,
						column: 2
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 95,
						column: 1
					},
					end: {
						line: 133,
						column: 2
					}
				}, {
					start: {
						line: 95,
						column: 1
					},
					end: {
						line: 133,
						column: 2
					}
				}],
				line: 95
			},
			'8': {
				loc: {
					start: {
						line: 95,
						column: 5
					},
					end: {
						line: 95,
						column: 59
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 95,
						column: 5
					},
					end: {
						line: 95,
						column: 8
					}
				}, {
					start: {
						line: 95,
						column: 12
					},
					end: {
						line: 95,
						column: 16
					}
				}, {
					start: {
						line: 95,
						column: 20
					},
					end: {
						line: 95,
						column: 59
					}
				}],
				line: 95
			},
			'9': {
				loc: {
					start: {
						line: 98,
						column: 2
					},
					end: {
						line: 132,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 98,
						column: 2
					},
					end: {
						line: 132,
						column: 3
					}
				}, {
					start: {
						line: 98,
						column: 2
					},
					end: {
						line: 132,
						column: 3
					}
				}],
				line: 98
			},
			'10': {
				loc: {
					start: {
						line: 100,
						column: 3
					},
					end: {
						line: 128,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 100,
						column: 3
					},
					end: {
						line: 128,
						column: 4
					}
				}, {
					start: {
						line: 100,
						column: 3
					},
					end: {
						line: 128,
						column: 4
					}
				}],
				line: 100
			},
			'11': {
				loc: {
					start: {
						line: 103,
						column: 4
					},
					end: {
						line: 119,
						column: 5
					}
				},
				type: 'switch',
				locations: [{
					start: {
						line: 104,
						column: 5
					},
					end: {
						line: 106,
						column: 12
					}
				}, {
					start: {
						line: 107,
						column: 5
					},
					end: {
						line: 109,
						column: 12
					}
				}, {
					start: {
						line: 110,
						column: 5
					},
					end: {
						line: 112,
						column: 12
					}
				}, {
					start: {
						line: 113,
						column: 5
					},
					end: {
						line: 115,
						column: 12
					}
				}, {
					start: {
						line: 116,
						column: 5
					},
					end: {
						line: 118,
						column: 12
					}
				}],
				line: 103
			},
			'12': {
				loc: {
					start: {
						line: 121,
						column: 4
					},
					end: {
						line: 127,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 121,
						column: 4
					},
					end: {
						line: 127,
						column: 5
					}
				}, {
					start: {
						line: 121,
						column: 4
					},
					end: {
						line: 127,
						column: 5
					}
				}],
				line: 121
			}
		},
		s: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0,
			'35': 0,
			'36': 0,
			'37': 0,
			'38': 0,
			'39': 0,
			'40': 0,
			'41': 0,
			'42': 0,
			'43': 0,
			'44': 0,
			'45': 0,
			'46': 0,
			'47': 0,
			'48': 0,
			'49': 0,
			'50': 0,
			'51': 0,
			'52': 0,
			'53': 0,
			'54': 0,
			'55': 0,
			'56': 0,
			'57': 0,
			'58': 0
		},
		f: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0
		},
		b: {
			'0': [0, 0, 0, 0, 0, 0],
			'1': [0, 0],
			'2': [0, 0],
			'3': [0, 0],
			'4': [0, 0],
			'5': [0, 0],
			'6': [0, 0],
			'7': [0, 0],
			'8': [0, 0, 0],
			'9': [0, 0],
			'10': [0, 0],
			'11': [0, 0, 0, 0, 0],
			'12': [0, 0]
		},
		_coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	},
	    coverage = global[gcv] || (global[gcv] = {});

	if (coverage[path] && coverage[path].hash === hash) {
		return coverage[path];
	}

	coverageData.hash = hash;
	return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.SimpleGameClient = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _game = require('./game');

var _gameValidation = require('./gameValidation');

var _piece = require('./piece');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// private methods
function isMoveValid(src, dest, validMoves) {
	cov_1cypxrwjym.f[0]++;
	cov_1cypxrwjym.s[1]++;

	var i = (cov_1cypxrwjym.s[0]++, 0),
	    isFound = function isFound(expr, sq) {
		cov_1cypxrwjym.f[1]++;
		cov_1cypxrwjym.s[2]++;

		return (cov_1cypxrwjym.b[0][0]++, typeof expr === 'string') && (cov_1cypxrwjym.b[0][1]++, sq.file + sq.rank === expr) || (cov_1cypxrwjym.b[0][2]++, expr.rank) && (cov_1cypxrwjym.b[0][3]++, expr.file) && (cov_1cypxrwjym.b[0][4]++, sq.file === expr.file) && (cov_1cypxrwjym.b[0][5]++, sq.rank === expr.rank);
	},
	    squares = (cov_1cypxrwjym.s[3]++, []);

	cov_1cypxrwjym.s[4]++;
	for (i = 0; i < validMoves.length; i++) {
		cov_1cypxrwjym.s[5]++;

		if (isFound(src, validMoves[i].src)) {
			cov_1cypxrwjym.b[1][0]++;
			cov_1cypxrwjym.s[6]++;

			squares = validMoves[i].squares;
		} else {
			cov_1cypxrwjym.b[1][1]++;
		}
	}

	cov_1cypxrwjym.s[7]++;
	if ((cov_1cypxrwjym.b[3][0]++, squares) && (cov_1cypxrwjym.b[3][1]++, squares.length > 0)) {
		cov_1cypxrwjym.b[2][0]++;
		cov_1cypxrwjym.s[8]++;

		for (i = 0; i < squares.length; i++) {
			cov_1cypxrwjym.s[9]++;

			if (isFound(dest, squares[i])) {
				cov_1cypxrwjym.b[4][0]++;
				cov_1cypxrwjym.s[10]++;

				return true;
			} else {
				cov_1cypxrwjym.b[4][1]++;
			}
		}
	} else {
		cov_1cypxrwjym.b[2][1]++;
	}

	cov_1cypxrwjym.s[11]++;
	return false;
}

function updateGameClient(gameClient) {
	cov_1cypxrwjym.f[2]++;
	cov_1cypxrwjym.s[12]++;

	return gameClient.validation.start(function (err, result) {
		cov_1cypxrwjym.f[3]++;
		cov_1cypxrwjym.s[13]++;

		if (err) {
			cov_1cypxrwjym.b[5][0]++;
			cov_1cypxrwjym.s[14]++;

			throw new Error(err);
		} else {
			cov_1cypxrwjym.b[5][1]++;
		}

		cov_1cypxrwjym.s[15]++;
		gameClient.isCheck = result.isCheck;
		cov_1cypxrwjym.s[16]++;
		gameClient.isCheckmate = result.isCheckmate;
		cov_1cypxrwjym.s[17]++;
		gameClient.isRepetition = result.isRepetition;
		cov_1cypxrwjym.s[18]++;
		gameClient.isStalemate = result.isStalemate;
		cov_1cypxrwjym.s[19]++;
		gameClient.validMoves = result.validMoves;
	});
}

// ctor

var SimpleGameClient = exports.SimpleGameClient = function (_ref) {
	_inherits(SimpleGameClient, _ref);

	function SimpleGameClient(game) {
		_classCallCheck(this, SimpleGameClient);

		cov_1cypxrwjym.f[4]++;
		cov_1cypxrwjym.s[20]++;

		var _this = _possibleConstructorReturn(this, (SimpleGameClient.__proto__ || Object.getPrototypeOf(SimpleGameClient)).call(this));

		cov_1cypxrwjym.s[21]++;


		_this.isCheck = false;
		cov_1cypxrwjym.s[22]++;
		_this.isCheckmate = false;
		cov_1cypxrwjym.s[23]++;
		_this.isRepetition = false;
		cov_1cypxrwjym.s[24]++;
		_this.isStalemate = false;
		cov_1cypxrwjym.s[25]++;
		_this.game = game;
		cov_1cypxrwjym.s[26]++;
		_this.validMoves = [];
		cov_1cypxrwjym.s[27]++;
		_this.validation = _gameValidation.GameValidation.create(_this.game);

		// bubble the game check event
		cov_1cypxrwjym.s[28]++;
		_this.game.on('check', function (attackers) {
			cov_1cypxrwjym.f[5]++;
			cov_1cypxrwjym.s[29]++;
			return _this.emit('check', attackers);
		});
		return _this;
	}

	_createClass(SimpleGameClient, [{
		key: 'getStatus',
		value: function getStatus(forceUpdate) {
			cov_1cypxrwjym.f[7]++;
			cov_1cypxrwjym.s[34]++;

			if (forceUpdate) {
				cov_1cypxrwjym.b[6][0]++;
				cov_1cypxrwjym.s[35]++;

				updateGameClient(this);
			} else {
				cov_1cypxrwjym.b[6][1]++;
			}

			cov_1cypxrwjym.s[36]++;
			return {
				board: this.game.board,
				isCheck: this.isCheck,
				isCheckmate: this.isCheckmate,
				isRepetition: this.isRepetition,
				isStalemate: this.isStalemate,
				validMoves: this.validMoves
			};
		}
	}, {
		key: 'move',
		value: function move(src, dest, promo) {
			cov_1cypxrwjym.f[8]++;

			var move = (cov_1cypxrwjym.s[37]++, null),
			    side = (cov_1cypxrwjym.s[38]++, this.game.getCurrentSide());

			cov_1cypxrwjym.s[39]++;
			if ((cov_1cypxrwjym.b[8][0]++, src) && (cov_1cypxrwjym.b[8][1]++, dest) && (cov_1cypxrwjym.b[8][2]++, isMoveValid(src, dest, this.validMoves))) {
				cov_1cypxrwjym.b[7][0]++;
				cov_1cypxrwjym.s[40]++;

				move = this.game.board.move(src, dest);

				cov_1cypxrwjym.s[41]++;
				if (move) {
					cov_1cypxrwjym.b[9][0]++;
					cov_1cypxrwjym.s[42]++;

					// apply pawn promotion if applicable
					if (promo) {
						cov_1cypxrwjym.b[10][0]++;

						var piece = void 0;

						cov_1cypxrwjym.s[43]++;
						switch (promo) {
							case 'B':
								cov_1cypxrwjym.b[11][0]++;
								cov_1cypxrwjym.s[44]++;

								piece = _piece.Piece.createBishop(side);
								cov_1cypxrwjym.s[45]++;
								break;
							case 'N':
								cov_1cypxrwjym.b[11][1]++;
								cov_1cypxrwjym.s[46]++;

								piece = _piece.Piece.createKnight(side);
								cov_1cypxrwjym.s[47]++;
								break;
							case 'Q':
								cov_1cypxrwjym.b[11][2]++;
								cov_1cypxrwjym.s[48]++;

								piece = _piece.Piece.createQueen(side);
								cov_1cypxrwjym.s[49]++;
								break;
							case 'R':
								cov_1cypxrwjym.b[11][3]++;
								cov_1cypxrwjym.s[50]++;

								piece = _piece.Piece.createRook(side);
								cov_1cypxrwjym.s[51]++;
								break;
							default:
								cov_1cypxrwjym.b[11][4]++;
								cov_1cypxrwjym.s[52]++;

								piece = null;
								cov_1cypxrwjym.s[53]++;
								break;
						}

						cov_1cypxrwjym.s[54]++;
						if (piece) {
							cov_1cypxrwjym.b[12][0]++;
							cov_1cypxrwjym.s[55]++;

							this.game.board.promote(move.move.postSquare, piece);
							/*
       p.moveCount = move.move.postSquare.piece.moveCount;
       move.move.postSquare.piece = p;
       //*/
						} else {
							cov_1cypxrwjym.b[12][1]++;
						}
					} else {
						cov_1cypxrwjym.b[10][1]++;
					}

					cov_1cypxrwjym.s[56]++;
					updateGameClient(this);
					cov_1cypxrwjym.s[57]++;
					return move;
				} else {
					cov_1cypxrwjym.b[9][1]++;
				}
			} else {
				cov_1cypxrwjym.b[7][1]++;
			}

			cov_1cypxrwjym.s[58]++;
			throw new Error('Move is invalid (' + src + ' to ' + dest + ')');
		}
	}], [{
		key: 'create',
		value: function create() {
			cov_1cypxrwjym.f[6]++;

			var game = (cov_1cypxrwjym.s[30]++, _game.Game.create()),
			    gameClient = (cov_1cypxrwjym.s[31]++, new SimpleGameClient(game));

			cov_1cypxrwjym.s[32]++;
			updateGameClient(gameClient);

			cov_1cypxrwjym.s[33]++;
			return gameClient;
		}
	}]);

	return SimpleGameClient;
}((_events.EventEmitter));

exports.default = { SimpleGameClient: SimpleGameClient };
//# sourceMappingURL=simpleGameClient.js.map
